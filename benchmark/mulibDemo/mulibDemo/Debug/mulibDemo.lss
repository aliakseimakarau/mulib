
mulibDemo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a70  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000064  20000000  00002a70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001e4  20000064  00002ad4  00020064  2**2
                  ALLOC
  3 .stack        00002000  20000248  00002cb8  00020064  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
  6 .debug_info   00029ea0  00000000  00000000  000200e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003b37  00000000  00000000  00049f85  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000d415  00000000  00000000  0004dabc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000c68  00000000  00000000  0005aed1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001210  00000000  00000000  0005bb39  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001a68b  00000000  00000000  0005cd49  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000ff37  00000000  00000000  000773d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00089ab1  00000000  00000000  0008730b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002450  00000000  00000000  00110dbc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	48 22 00 20 41 05 00 00 3d 05 00 00 3d 05 00 00     H". A...=...=...
	...
      2c:	3d 05 00 00 00 00 00 00 00 00 00 00 3d 05 00 00     =...........=...
      3c:	3d 05 00 00 3d 05 00 00 3d 05 00 00 3d 05 00 00     =...=...=...=...
      4c:	89 12 00 00 3d 05 00 00 3d 05 00 00 3d 05 00 00     ....=...=...=...
      5c:	3d 05 00 00 3d 05 00 00 3d 05 00 00 3d 05 00 00     =...=...=...=...
      6c:	3d 05 00 00 65 14 00 00 3d 05 00 00 3d 05 00 00     =...e...=...=...
      7c:	3d 05 00 00 3d 05 00 00 3d 05 00 00 3d 05 00 00     =...=...=...=...
      8c:	3d 05 00 00 3d 05 00 00 3d 05 00 00 3d 05 00 00     =...=...=...=...
      9c:	3d 05 00 00 3d 05 00 00 3d 05 00 00 3d 05 00 00     =...=...=...=...
      ac:	3d 05 00 00 00 00 00 00                             =.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000064 	.word	0x20000064
      d4:	00000000 	.word	0x00000000
      d8:	00002a70 	.word	0x00002a70

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000068 	.word	0x20000068
     108:	00002a70 	.word	0x00002a70
     10c:	00002a70 	.word	0x00002a70
     110:	00000000 	.word	0x00000000

00000114 <port_init>:
// local storage

// =============================================================================
// public code

void port_init() {
     114:	b510      	push	{r4, lr}
	calendar_enable(&CALENDAR_0);
     116:	4802      	ldr	r0, [pc, #8]	; (120 <port_init+0xc>)
     118:	4b02      	ldr	r3, [pc, #8]	; (124 <port_init+0x10>)
     11a:	4798      	blx	r3
}
     11c:	bd10      	pop	{r4, pc}
     11e:	46c0      	nop			; (mov r8, r8)
     120:	20000228 	.word	0x20000228
     124:	00000c09 	.word	0x00000c09

00000128 <port_time_offset>:
    printf("Assertion '%s' failed at %s:%d", expr, file, line);
  }
}

port_time_t port_time_offset(port_time_t t, port_time_dt dt) {
  return t + dt;
     128:	1808      	adds	r0, r1, r0
}
     12a:	4770      	bx	lr

0000012c <port_time_difference>:

port_time_dt port_time_difference(port_time_t t1, port_time_t t2) {
  return t1 - t2;
     12c:	1a40      	subs	r0, r0, r1
}
     12e:	4770      	bx	lr

00000130 <port_time_is_before>:
  return t1 - t2;
     130:	1a40      	subs	r0, r0, r1

bool port_time_is_before(port_time_t t1, port_time_t t2) {
  return port_time_difference(t1, t2) > MAX_DURATION;
     132:	0fc0      	lsrs	r0, r0, #31
}
     134:	4770      	bx	lr

00000136 <port_time_is_after>:
  return t1 - t2;
     136:	1a08      	subs	r0, r1, r0
bool port_time_is_equal(port_time_t t1, port_time_t t2) {
  return t1 == t2;
}

bool port_time_is_after(port_time_t t1, port_time_t t2) {
  return port_time_difference(t2, t1) > MAX_DURATION;
     138:	0fc0      	lsrs	r0, r0, #31
}
     13a:	4770      	bx	lr

0000013c <port_time_seconds_to_duration>:

port_time_seconds_t port_time_seconds_to_duration(port_time_seconds_t seconds) {
     13c:	b510      	push	{r4, lr}
  return seconds * RTC_FREQUENCY;
     13e:	2200      	movs	r2, #0
     140:	4b01      	ldr	r3, [pc, #4]	; (148 <port_time_seconds_to_duration+0xc>)
     142:	4c02      	ldr	r4, [pc, #8]	; (14c <port_time_seconds_to_duration+0x10>)
     144:	47a0      	blx	r4
}
     146:	bd10      	pop	{r4, pc}
     148:	40e00000 	.word	0x40e00000
     14c:	00001641 	.word	0x00001641

00000150 <port_time_duration_to_seconds>:

port_time_dt port_time_duration_to_seconds(port_time_dt dt) {
     150:	b510      	push	{r4, lr}
  return (port_time_seconds_t)dt / RTC_FREQUENCY;
     152:	4b05      	ldr	r3, [pc, #20]	; (168 <port_time_duration_to_seconds+0x18>)
     154:	4798      	blx	r3
     156:	2200      	movs	r2, #0
     158:	23fc      	movs	r3, #252	; 0xfc
     15a:	059b      	lsls	r3, r3, #22
     15c:	4c03      	ldr	r4, [pc, #12]	; (16c <port_time_duration_to_seconds+0x1c>)
     15e:	47a0      	blx	r4
     160:	4b03      	ldr	r3, [pc, #12]	; (170 <port_time_duration_to_seconds+0x20>)
     162:	4798      	blx	r3
}
     164:	bd10      	pop	{r4, pc}
     166:	46c0      	nop			; (mov r8, r8)
     168:	00001ba9 	.word	0x00001ba9
     16c:	00001641 	.word	0x00001641
     170:	00001b41 	.word	0x00001b41

00000174 <port_time_now>:

port_time_t port_time_now() {
  return hri_rtcmode0_read_COUNT_COUNT_bf(CALENDAR_0.device.hw);
     174:	4b03      	ldr	r3, [pc, #12]	; (184 <port_time_now+0x10>)
     176:	681a      	ldr	r2, [r3, #0]
typedef uint8_t  hri_rtcmode2_intflag_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtc_wait_for_sync(const void *const hw)
{
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     178:	7a93      	ldrb	r3, [r2, #10]
     17a:	09db      	lsrs	r3, r3, #7
     17c:	d1fc      	bne.n	178 <port_time_now+0x4>

static inline hri_rtcmode0_count_reg_t hri_rtcmode0_read_COUNT_COUNT_bf(const void *const hw)
{
	uint32_t tmp;
	hri_rtc_wait_for_sync(hw);
	tmp = ((Rtc *)hw)->MODE0.COUNT.reg;
     17e:	6910      	ldr	r0, [r2, #16]
}
     180:	4770      	bx	lr
     182:	46c0      	nop			; (mov r8, r8)
     184:	20000228 	.word	0x20000228

00000188 <mu_evt_init_immed>:
// public code

mu_evt_t *mu_evt_init_immed(mu_evt_t *evt,
                            mu_task_fn fn,
                            void *self,
                            const char *name) {
     188:	b570      	push	{r4, r5, r6, lr}
     18a:	0004      	movs	r4, r0
                            bool is_immediate,
                            port_time_t time,
                            mu_task_fn fn,
                            void *self,
                            const char *name) {
  evt->next = (mu_evt_t *)NULL;
     18c:	2000      	movs	r0, #0
     18e:	6020      	str	r0, [r4, #0]
  evt->is_immediate = is_immediate;
     190:	2601      	movs	r6, #1
     192:	2520      	movs	r5, #32
     194:	5566      	strb	r6, [r4, r5]
  evt->time = time;
     196:	61e0      	str	r0, [r4, #28]
  mu_task_init(&evt->task, fn, self, name);
     198:	1d20      	adds	r0, r4, #4
     19a:	4d02      	ldr	r5, [pc, #8]	; (1a4 <mu_evt_init_immed+0x1c>)
     19c:	47a8      	blx	r5
}
     19e:	0020      	movs	r0, r4
     1a0:	bd70      	pop	{r4, r5, r6, pc}
     1a2:	46c0      	nop			; (mov r8, r8)
     1a4:	00000475 	.word	0x00000475

000001a8 <mu_evt_init_at>:
                         const char *name) {
     1a8:	b570      	push	{r4, r5, r6, lr}
     1aa:	0004      	movs	r4, r0
     1ac:	0015      	movs	r5, r2
     1ae:	001a      	movs	r2, r3
  evt->next = (mu_evt_t *)NULL;
     1b0:	2300      	movs	r3, #0
     1b2:	6003      	str	r3, [r0, #0]
  evt->is_immediate = is_immediate;
     1b4:	2020      	movs	r0, #32
     1b6:	5423      	strb	r3, [r4, r0]
  evt->time = time;
     1b8:	61e1      	str	r1, [r4, #28]
  mu_task_init(&evt->task, fn, self, name);
     1ba:	1d20      	adds	r0, r4, #4
     1bc:	9b04      	ldr	r3, [sp, #16]
     1be:	0029      	movs	r1, r5
     1c0:	4d01      	ldr	r5, [pc, #4]	; (1c8 <mu_evt_init_at+0x20>)
     1c2:	47a8      	blx	r5
}
     1c4:	0020      	movs	r0, r4
     1c6:	bd70      	pop	{r4, r5, r6, pc}
     1c8:	00000475 	.word	0x00000475

000001cc <mu_evt_is_immediate>:
bool mu_evt_is_immediate(mu_evt_t *evt) { return evt->is_immediate; }
     1cc:	2320      	movs	r3, #32
     1ce:	5cc0      	ldrb	r0, [r0, r3]
     1d0:	4770      	bx	lr
	...

000001d4 <mu_evt_is_after>:
bool mu_evt_is_after(mu_evt_t *e1, mu_evt_t *e2) {
     1d4:	b510      	push	{r4, lr}
     1d6:	0003      	movs	r3, r0
bool mu_evt_is_immediate(mu_evt_t *evt) { return evt->is_immediate; }
     1d8:	2220      	movs	r2, #32
  if (mu_evt_is_immediate(e1)) {
     1da:	5c82      	ldrb	r2, [r0, r2]
    return false;
     1dc:	2000      	movs	r0, #0
  if (mu_evt_is_immediate(e1)) {
     1de:	2a00      	cmp	r2, #0
     1e0:	d103      	bne.n	1ea <mu_evt_is_after+0x16>
bool mu_evt_is_immediate(mu_evt_t *evt) { return evt->is_immediate; }
     1e2:	3220      	adds	r2, #32
     1e4:	5c88      	ldrb	r0, [r1, r2]
  } else if (mu_evt_is_immediate(e2)) {
     1e6:	2800      	cmp	r0, #0
     1e8:	d000      	beq.n	1ec <mu_evt_is_after+0x18>
}
     1ea:	bd10      	pop	{r4, pc}
    return port_time_is_after(mu_evt_time(e1), mu_evt_time(e2));
     1ec:	69c9      	ldr	r1, [r1, #28]
     1ee:	69d8      	ldr	r0, [r3, #28]
     1f0:	4b01      	ldr	r3, [pc, #4]	; (1f8 <mu_evt_is_after+0x24>)
     1f2:	4798      	blx	r3
     1f4:	e7f9      	b.n	1ea <mu_evt_is_after+0x16>
     1f6:	46c0      	nop			; (mov r8, r8)
     1f8:	00000137 	.word	0x00000137

000001fc <mu_evt_is_runnable>:
bool mu_evt_is_runnable(mu_evt_t *evt, port_time_t at) {
     1fc:	b510      	push	{r4, lr}
     1fe:	000a      	movs	r2, r1
bool mu_evt_is_immediate(mu_evt_t *evt) { return evt->is_immediate; }
     200:	2320      	movs	r3, #32
     202:	5cc3      	ldrb	r3, [r0, r3]
  if (mu_evt_is_immediate(evt)) {
     204:	2b00      	cmp	r3, #0
     206:	d001      	beq.n	20c <mu_evt_is_runnable+0x10>
}
     208:	0018      	movs	r0, r3
     20a:	bd10      	pop	{r4, pc}
  } else if (!port_time_is_before(at, mu_evt_time(evt))) {
     20c:	69c1      	ldr	r1, [r0, #28]
     20e:	0010      	movs	r0, r2
     210:	4b02      	ldr	r3, [pc, #8]	; (21c <mu_evt_is_runnable+0x20>)
     212:	4798      	blx	r3
     214:	2301      	movs	r3, #1
     216:	4043      	eors	r3, r0
     218:	b2db      	uxtb	r3, r3
     21a:	e7f5      	b.n	208 <mu_evt_is_runnable+0xc>
     21c:	00000131 	.word	0x00000131

00000220 <mu_evt_call>:
void mu_evt_call(mu_evt_t *evt, void *arg) {
     220:	b510      	push	{r4, lr}
mu_task_t *mu_evt_task(mu_evt_t *evt) { return &evt->task; }
     222:	3004      	adds	r0, #4
  mu_task_call(mu_evt_task(evt), arg);
     224:	4b01      	ldr	r3, [pc, #4]	; (22c <mu_evt_call+0xc>)
     226:	4798      	blx	r3
}
     228:	bd10      	pop	{r4, pc}
     22a:	46c0      	nop			; (mov r8, r8)
     22c:	00000485 	.word	0x00000485

00000230 <mu_ring_init>:
// =============================================================================
// public code

mu_ring_err_t mu_ring_init(mu_ring_t *q,
                             mu_ring_obj_t *pool,
                             unsigned int capacity) {
     230:	b510      	push	{r4, lr}
  if ((capacity == 0) || !IS_POWER_OF_TWO(capacity)) {
    return MU_RING_ERR_SIZE;
     232:	2303      	movs	r3, #3
  if ((capacity == 0) || !IS_POWER_OF_TWO(capacity)) {
     234:	2a00      	cmp	r2, #0
     236:	d101      	bne.n	23c <mu_ring_init+0xc>
  }
  q->mask = capacity - 1;
  q->pool = pool;
  return mu_ring_reset(q);
}
     238:	0018      	movs	r0, r3
     23a:	bd10      	pop	{r4, pc}
  if ((capacity == 0) || !IS_POWER_OF_TWO(capacity)) {
     23c:	1e54      	subs	r4, r2, #1
     23e:	4214      	tst	r4, r2
     240:	d1fa      	bne.n	238 <mu_ring_init+0x8>
  q->mask = capacity - 1;
     242:	6004      	str	r4, [r0, #0]
  q->pool = pool;
     244:	60c1      	str	r1, [r0, #12]

mu_ring_err_t mu_ring_reset(mu_ring_t *q) {
  q->head = 0;
     246:	2300      	movs	r3, #0
     248:	6043      	str	r3, [r0, #4]
  q->tail = 0;
     24a:	6083      	str	r3, [r0, #8]
  return mu_ring_reset(q);
     24c:	e7f4      	b.n	238 <mu_ring_init+0x8>

0000024e <mu_ring_reset>:
  q->head = 0;
     24e:	2300      	movs	r3, #0
     250:	6043      	str	r3, [r0, #4]
  q->tail = 0;
     252:	6083      	str	r3, [r0, #8]
  return MU_RING_ERR_NONE;
}
     254:	2000      	movs	r0, #0
     256:	4770      	bx	lr

00000258 <mu_ring_put>:

unsigned int mu_ring_count(mu_ring_t *q) {
  return q->head - q->tail; // thank you, twos-compliment arithmetic
}

mu_ring_err_t mu_ring_put(mu_ring_t *q, mu_ring_obj_t obj) {
     258:	b530      	push	{r4, r5, lr}
  return q->head - q->tail; // thank you, twos-compliment arithmetic
     25a:	6842      	ldr	r2, [r0, #4]
     25c:	6884      	ldr	r4, [r0, #8]
unsigned int mu_ring_capacity(mu_ring_t *q) { return q->mask + 1; }
     25e:	6803      	ldr	r3, [r0, #0]
     260:	1c5d      	adds	r5, r3, #1
  return q->head - q->tail; // thank you, twos-compliment arithmetic
     262:	1b12      	subs	r2, r2, r4
  if (mu_ring_count(q) == mu_ring_capacity(q)) {
    return MU_RING_ERR_FULL;
     264:	2402      	movs	r4, #2
  if (mu_ring_count(q) == mu_ring_capacity(q)) {
     266:	4295      	cmp	r5, r2
     268:	d007      	beq.n	27a <mu_ring_put+0x22>
  }
  // Note that head grows "without bound", but tail is guarateed to grow too.
  q->pool[q->head++ & q->mask] = obj;
     26a:	68c4      	ldr	r4, [r0, #12]
     26c:	6842      	ldr	r2, [r0, #4]
     26e:	1c55      	adds	r5, r2, #1
     270:	6045      	str	r5, [r0, #4]
     272:	4013      	ands	r3, r2
     274:	009b      	lsls	r3, r3, #2
     276:	5119      	str	r1, [r3, r4]
  return MU_RING_ERR_NONE;
     278:	2400      	movs	r4, #0
}
     27a:	0020      	movs	r0, r4
     27c:	bd30      	pop	{r4, r5, pc}

0000027e <mu_ring_get>:

mu_ring_err_t mu_ring_get(mu_ring_t *q, mu_ring_obj_t *obj) {
     27e:	b510      	push	{r4, lr}
  return q->head - q->tail; // thank you, twos-compliment arithmetic
     280:	6842      	ldr	r2, [r0, #4]
     282:	6883      	ldr	r3, [r0, #8]
  if (mu_ring_count(q) == 0) {
     284:	429a      	cmp	r2, r3
     286:	d00a      	beq.n	29e <mu_ring_get+0x20>
    *obj = NULL;
    return MU_RING_ERR_EMPTY;
  }
  // Note that tail grows "without bound", but head is guaranteed to grow too.
  *obj = q->pool[q->tail++ & q->mask];
     288:	68c4      	ldr	r4, [r0, #12]
     28a:	6882      	ldr	r2, [r0, #8]
     28c:	1c53      	adds	r3, r2, #1
     28e:	6083      	str	r3, [r0, #8]
     290:	6803      	ldr	r3, [r0, #0]
     292:	4013      	ands	r3, r2
     294:	009b      	lsls	r3, r3, #2
     296:	591b      	ldr	r3, [r3, r4]
     298:	600b      	str	r3, [r1, #0]
  return MU_RING_ERR_NONE;
     29a:	2000      	movs	r0, #0
}
     29c:	bd10      	pop	{r4, pc}
    *obj = NULL;
     29e:	2300      	movs	r3, #0
     2a0:	600b      	str	r3, [r1, #0]
    return MU_RING_ERR_EMPTY;
     2a2:	2001      	movs	r0, #1
     2a4:	e7fa      	b.n	29c <mu_ring_get+0x1e>
	...

000002a8 <mu_sched_reset>:
  sched->clock_source = mu_time_now;  // default clock source
  sched->idle_task = NULL;
  return mu_sched_reset(sched);
}

mu_sched_t *mu_sched_reset(mu_sched_t *sched) {
     2a8:	b510      	push	{r4, lr}
     2aa:	0004      	movs	r4, r0
  mu_evt_t *evt;

  while ((evt = sched->events) != NULL) {
     2ac:	6803      	ldr	r3, [r0, #0]
     2ae:	2b00      	cmp	r3, #0
     2b0:	d006      	beq.n	2c0 <mu_sched_reset+0x18>
    sched->events = evt->next;
    evt->next = NULL;
     2b2:	2200      	movs	r2, #0
    sched->events = evt->next;
     2b4:	6819      	ldr	r1, [r3, #0]
     2b6:	6021      	str	r1, [r4, #0]
    evt->next = NULL;
     2b8:	601a      	str	r2, [r3, #0]
  while ((evt = sched->events) != NULL) {
     2ba:	6823      	ldr	r3, [r4, #0]
     2bc:	2b00      	cmp	r3, #0
     2be:	d1f9      	bne.n	2b4 <mu_sched_reset+0xc>
  }

  if (sched->current_event) {
     2c0:	69e3      	ldr	r3, [r4, #28]
     2c2:	2b00      	cmp	r3, #0
     2c4:	d002      	beq.n	2cc <mu_sched_reset+0x24>
    sched->current_event->next = NULL;
     2c6:	2200      	movs	r2, #0
     2c8:	601a      	str	r2, [r3, #0]
    sched->current_event = NULL;
     2ca:	61e2      	str	r2, [r4, #28]
  }

  mu_ring_reset(&(sched->isr_queue));
     2cc:	1d20      	adds	r0, r4, #4
     2ce:	4b02      	ldr	r3, [pc, #8]	; (2d8 <mu_sched_reset+0x30>)
     2d0:	4798      	blx	r3

  return sched;
}
     2d2:	0020      	movs	r0, r4
     2d4:	bd10      	pop	{r4, pc}
     2d6:	46c0      	nop			; (mov r8, r8)
     2d8:	0000024f 	.word	0x0000024f

000002dc <mu_sched_init>:
                          unsigned int isr_queue_pool_size) {
     2dc:	b570      	push	{r4, r5, r6, lr}
     2de:	0004      	movs	r4, r0
  sched->events = (mu_evt_t *)NULL;     // event queue starts out empty
     2e0:	2500      	movs	r5, #0
     2e2:	c020      	stmia	r0!, {r5}
  err = mu_ring_init(q, isr_queue_pool, isr_queue_pool_size);
     2e4:	4b04      	ldr	r3, [pc, #16]	; (2f8 <mu_sched_init+0x1c>)
     2e6:	4798      	blx	r3
  sched->clock_source = mu_time_now;  // default clock source
     2e8:	4b04      	ldr	r3, [pc, #16]	; (2fc <mu_sched_init+0x20>)
     2ea:	6163      	str	r3, [r4, #20]
  sched->idle_task = NULL;
     2ec:	61a5      	str	r5, [r4, #24]
  return mu_sched_reset(sched);
     2ee:	0020      	movs	r0, r4
     2f0:	4b03      	ldr	r3, [pc, #12]	; (300 <mu_sched_init+0x24>)
     2f2:	4798      	blx	r3
}
     2f4:	bd70      	pop	{r4, r5, r6, pc}
     2f6:	46c0      	nop			; (mov r8, r8)
     2f8:	00000231 	.word	0x00000231
     2fc:	000004e5 	.word	0x000004e5
     300:	000002a9 	.word	0x000002a9

00000304 <mu_sched_has_event>:
	}
	return count;
}

mu_evt_t *mu_sched_get_events(mu_sched_t *sched) {
	return sched->events;
     304:	6803      	ldr	r3, [r0, #0]
	while(evts) {
     306:	2b00      	cmp	r3, #0
     308:	d00a      	beq.n	320 <mu_sched_has_event+0x1c>
		if (evts == event) return true;
     30a:	4299      	cmp	r1, r3
     30c:	d00a      	beq.n	324 <mu_sched_has_event+0x20>
		evts = evts->next;
     30e:	681b      	ldr	r3, [r3, #0]
	while(evts) {
     310:	2b00      	cmp	r3, #0
     312:	d003      	beq.n	31c <mu_sched_has_event+0x18>
		if (evts == event) return true;
     314:	4299      	cmp	r1, r3
     316:	d1fa      	bne.n	30e <mu_sched_has_event+0xa>
     318:	2001      	movs	r0, #1
     31a:	e000      	b.n	31e <mu_sched_has_event+0x1a>
	return false;
     31c:	2000      	movs	r0, #0
}
     31e:	4770      	bx	lr
	return false;
     320:	2000      	movs	r0, #0
     322:	e7fc      	b.n	31e <mu_sched_has_event+0x1a>
		if (evts == event) return true;
     324:	2001      	movs	r0, #1
     326:	e7fa      	b.n	31e <mu_sched_has_event+0x1a>

00000328 <mu_sched_task_count>:
	return sched->events;
     328:	6803      	ldr	r3, [r0, #0]
	while(evts) {
     32a:	2b00      	cmp	r3, #0
     32c:	d005      	beq.n	33a <mu_sched_task_count+0x12>
     32e:	2000      	movs	r0, #0
		count += 1;
     330:	3001      	adds	r0, #1
    evts = evts->next;
     332:	681b      	ldr	r3, [r3, #0]
	while(evts) {
     334:	2b00      	cmp	r3, #0
     336:	d1fb      	bne.n	330 <mu_sched_task_count+0x8>
}
     338:	4770      	bx	lr
	unsigned int count = 0;
     33a:	2000      	movs	r0, #0
	return count;
     33c:	e7fc      	b.n	338 <mu_sched_task_count+0x10>

0000033e <mu_sched_get_events>:
	return sched->events;
     33e:	6800      	ldr	r0, [r0, #0]
}
     340:	4770      	bx	lr

00000342 <mu_sched_get_time>:
    mu_task_call(sched->idle_task, sched);
  }
  return MU_SCHED_ERR_NONE;
}

mu_time_t mu_sched_get_time(mu_sched_t *sched) {
     342:	b510      	push	{r4, lr}
  return sched->clock_source();
     344:	6943      	ldr	r3, [r0, #20]
     346:	4798      	blx	r3
}
     348:	bd10      	pop	{r4, pc}

0000034a <mu_sched_current_event>:

mu_evt_t *mu_sched_current_event(mu_sched_t *sched) {
  return sched->current_event;
     34a:	69c0      	ldr	r0, [r0, #28]
}
     34c:	4770      	bx	lr
	...

00000350 <mu_sched_add>:

mu_sched_err_t mu_sched_add(mu_sched_t *sched, mu_evt_t *event) {
     350:	b5f0      	push	{r4, r5, r6, r7, lr}
     352:	46c6      	mov	lr, r8
     354:	b500      	push	{lr}
     356:	4680      	mov	r8, r0
     358:	000d      	movs	r5, r1
  if (mu_evt_is_immediate(event)) {
     35a:	0008      	movs	r0, r1
     35c:	4b14      	ldr	r3, [pc, #80]	; (3b0 <mu_sched_add+0x60>)
     35e:	4798      	blx	r3
     360:	2800      	cmp	r0, #0
     362:	d110      	bne.n	386 <mu_sched_add+0x36>
    sched->events = event;

  } else {
    // run down the linked list until we find the insertion point.
    mu_evt_t *prev = NULL;
    mu_evt_t *curr = sched->events;
     364:	4643      	mov	r3, r8
     366:	681c      	ldr	r4, [r3, #0]
    while (curr && mu_evt_is_after(event, curr)) {
     368:	2600      	movs	r6, #0
     36a:	2c00      	cmp	r4, #0
     36c:	d01b      	beq.n	3a6 <mu_sched_add+0x56>
     36e:	4f11      	ldr	r7, [pc, #68]	; (3b4 <mu_sched_add+0x64>)
     370:	0021      	movs	r1, r4
     372:	0028      	movs	r0, r5
     374:	47b8      	blx	r7
     376:	2800      	cmp	r0, #0
     378:	d00d      	beq.n	396 <mu_sched_add+0x46>
      prev = curr;
      curr = curr->next;
     37a:	6823      	ldr	r3, [r4, #0]
     37c:	0026      	movs	r6, r4
    while (curr && mu_evt_is_after(event, curr)) {
     37e:	2b00      	cmp	r3, #0
     380:	d007      	beq.n	392 <mu_sched_add+0x42>
      curr = curr->next;
     382:	001c      	movs	r4, r3
     384:	e7f4      	b.n	370 <mu_sched_add+0x20>
    event->next = sched->events;
     386:	4643      	mov	r3, r8
     388:	681b      	ldr	r3, [r3, #0]
     38a:	602b      	str	r3, [r5, #0]
    sched->events = event;
     38c:	4643      	mov	r3, r8
     38e:	601d      	str	r5, [r3, #0]
     390:	e005      	b.n	39e <mu_sched_add+0x4e>
     392:	0026      	movs	r6, r4
      curr = curr->next;
     394:	001c      	movs	r4, r3
    }
    // endgame: if prev is null, insert at head.  else insert after prev
    event->next = curr;
     396:	602c      	str	r4, [r5, #0]
    if (prev == NULL) {
     398:	2e00      	cmp	r6, #0
     39a:	d006      	beq.n	3aa <mu_sched_add+0x5a>
      sched->events = event;
    } else {
      prev->next = event;
     39c:	6035      	str	r5, [r6, #0]
    }
  }
  return MU_SCHED_ERR_NONE;
}
     39e:	2000      	movs	r0, #0
     3a0:	bc04      	pop	{r2}
     3a2:	4690      	mov	r8, r2
     3a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    event->next = curr;
     3a6:	2300      	movs	r3, #0
     3a8:	602b      	str	r3, [r5, #0]
      sched->events = event;
     3aa:	4643      	mov	r3, r8
     3ac:	601d      	str	r5, [r3, #0]
     3ae:	e7f6      	b.n	39e <mu_sched_add+0x4e>
     3b0:	000001cd 	.word	0x000001cd
     3b4:	000001d5 	.word	0x000001d5

000003b8 <mu_sched_step>:
mu_sched_err_t mu_sched_step(mu_sched_t *sched) {
     3b8:	b5f0      	push	{r4, r5, r6, r7, lr}
     3ba:	b085      	sub	sp, #20
     3bc:	0004      	movs	r4, r0
  mu_time_t now = mu_sched_get_time(sched);
     3be:	4b15      	ldr	r3, [pc, #84]	; (414 <mu_sched_step+0x5c>)
     3c0:	4798      	blx	r3
     3c2:	9001      	str	r0, [sp, #4]

// slurp any events that have been added to the ISR queue and add them to the
// scheduler's event list.
static void process_isr_queue(mu_sched_t *sched) {
  mu_evt_t *evt;
  mu_ring_t *q = &(sched->isr_queue);
     3c4:	1d25      	adds	r5, r4, #4

  while (MU_RING_ERR_NONE == mu_ring_get(q, (mu_ring_obj_t *)(&evt))) {
     3c6:	4f14      	ldr	r7, [pc, #80]	; (418 <mu_sched_step+0x60>)
    mu_sched_add(sched, evt);
     3c8:	4e14      	ldr	r6, [pc, #80]	; (41c <mu_sched_step+0x64>)
     3ca:	e002      	b.n	3d2 <mu_sched_step+0x1a>
     3cc:	9903      	ldr	r1, [sp, #12]
     3ce:	0020      	movs	r0, r4
     3d0:	47b0      	blx	r6
  while (MU_RING_ERR_NONE == mu_ring_get(q, (mu_ring_obj_t *)(&evt))) {
     3d2:	a903      	add	r1, sp, #12
     3d4:	0028      	movs	r0, r5
     3d6:	47b8      	blx	r7
     3d8:	2800      	cmp	r0, #0
     3da:	d0f7      	beq.n	3cc <mu_sched_step+0x14>
  mu_evt_t *curr = sched->events;
     3dc:	6825      	ldr	r5, [r4, #0]
  if (curr == NULL) {
     3de:	2d00      	cmp	r5, #0
     3e0:	d012      	beq.n	408 <mu_sched_step+0x50>
  } else if (!mu_evt_is_runnable(curr, now)) {
     3e2:	9901      	ldr	r1, [sp, #4]
     3e4:	0028      	movs	r0, r5
     3e6:	4b0e      	ldr	r3, [pc, #56]	; (420 <mu_sched_step+0x68>)
     3e8:	4798      	blx	r3
     3ea:	2800      	cmp	r0, #0
     3ec:	d00c      	beq.n	408 <mu_sched_step+0x50>
    sched->events = curr->next;
     3ee:	682b      	ldr	r3, [r5, #0]
     3f0:	6023      	str	r3, [r4, #0]
    curr->next = NULL;
     3f2:	2600      	movs	r6, #0
     3f4:	602e      	str	r6, [r5, #0]
    sched->current_event = runnable;
     3f6:	61e5      	str	r5, [r4, #28]
    mu_evt_call(runnable, sched);
     3f8:	0021      	movs	r1, r4
     3fa:	0028      	movs	r0, r5
     3fc:	4b09      	ldr	r3, [pc, #36]	; (424 <mu_sched_step+0x6c>)
     3fe:	4798      	blx	r3
    sched->current_event = NULL;
     400:	61e6      	str	r6, [r4, #28]
}
     402:	2000      	movs	r0, #0
     404:	b005      	add	sp, #20
     406:	bdf0      	pop	{r4, r5, r6, r7, pc}
    mu_task_call(sched->idle_task, sched);
     408:	69a0      	ldr	r0, [r4, #24]
     40a:	0021      	movs	r1, r4
     40c:	4b06      	ldr	r3, [pc, #24]	; (428 <mu_sched_step+0x70>)
     40e:	4798      	blx	r3
  return MU_SCHED_ERR_NONE;
     410:	e7f7      	b.n	402 <mu_sched_step+0x4a>
     412:	46c0      	nop			; (mov r8, r8)
     414:	00000343 	.word	0x00000343
     418:	0000027f 	.word	0x0000027f
     41c:	00000351 	.word	0x00000351
     420:	000001fd 	.word	0x000001fd
     424:	00000221 	.word	0x00000221
     428:	00000485 	.word	0x00000485

0000042c <mu_sched_remove>:
  mu_evt_t *curr = sched->events;
     42c:	6802      	ldr	r2, [r0, #0]
  while((curr != NULL) && (curr != evt)) {
     42e:	2a00      	cmp	r2, #0
     430:	d014      	beq.n	45c <mu_sched_remove+0x30>
     432:	428a      	cmp	r2, r1
     434:	d101      	bne.n	43a <mu_sched_remove+0xe>
     436:	e00e      	b.n	456 <mu_sched_remove+0x2a>
    curr = curr->next;
     438:	001a      	movs	r2, r3
     43a:	6813      	ldr	r3, [r2, #0]
  while((curr != NULL) && (curr != evt)) {
     43c:	2b00      	cmp	r3, #0
     43e:	d00f      	beq.n	460 <mu_sched_remove+0x34>
     440:	4299      	cmp	r1, r3
     442:	d1f9      	bne.n	438 <mu_sched_remove+0xc>
  } else if (prev == NULL) {
     444:	2a00      	cmp	r2, #0
     446:	d005      	beq.n	454 <mu_sched_remove+0x28>
    prev->next = curr->next;
     448:	680b      	ldr	r3, [r1, #0]
     44a:	6013      	str	r3, [r2, #0]
  evt->next = NULL; // tidy up.
     44c:	2300      	movs	r3, #0
     44e:	600b      	str	r3, [r1, #0]
  return MU_SCHED_ERR_NONE;
     450:	2000      	movs	r0, #0
}
     452:	4770      	bx	lr
    curr = curr->next;
     454:	000a      	movs	r2, r1
    sched->events = curr->next;
     456:	6813      	ldr	r3, [r2, #0]
     458:	6003      	str	r3, [r0, #0]
     45a:	e7f7      	b.n	44c <mu_sched_remove+0x20>
    return MU_SCHED_ERR_NOT_FOUND;
     45c:	2002      	movs	r0, #2
     45e:	e7f8      	b.n	452 <mu_sched_remove+0x26>
     460:	2002      	movs	r0, #2
     462:	e7f6      	b.n	452 <mu_sched_remove+0x26>

00000464 <mu_sched_from_isr>:
mu_sched_err_t mu_sched_from_isr(mu_sched_t *sched, mu_evt_t *event) {
     464:	b510      	push	{r4, lr}
  mu_ring_t *q = &(sched->isr_queue);
     466:	3004      	adds	r0, #4
  mu_ring_err_t err = mu_ring_put(q, event);
     468:	4b01      	ldr	r3, [pc, #4]	; (470 <mu_sched_from_isr+0xc>)
     46a:	4798      	blx	r3
}
     46c:	2000      	movs	r0, #0
     46e:	bd10      	pop	{r4, pc}
     470:	00000259 	.word	0x00000259

00000474 <mu_task_init>:

mu_task_t *mu_task_init(mu_task_t *task,
                        mu_task_fn fn,
                        void *self,
                        const char *name) {
  task->fn = fn;
     474:	6001      	str	r1, [r0, #0]
  task->self = self;
     476:	6042      	str	r2, [r0, #4]
#if (MU_TASK_PROFILING)
  task->name = name;
     478:	6083      	str	r3, [r0, #8]
  task->call_count = 0;
     47a:	2300      	movs	r3, #0
     47c:	60c3      	str	r3, [r0, #12]
  task->runtime = 0;
     47e:	6143      	str	r3, [r0, #20]
#else
  (void)name;
#endif
  return task;
}
     480:	4770      	bx	lr
	...

00000484 <mu_task_call>:

void mu_task_call(mu_task_t *task, void *arg) {
     484:	b570      	push	{r4, r5, r6, lr}
     486:	0004      	movs	r4, r0
     488:	000e      	movs	r6, r1
#if (MU_TASK_PROFILING)
  mu_time_t called_at = mu_time_now();
     48a:	4b0c      	ldr	r3, [pc, #48]	; (4bc <mu_task_call+0x38>)
     48c:	4798      	blx	r3
     48e:	0005      	movs	r5, r0
#endif
  if (task && task->fn != NULL) {
     490:	2c00      	cmp	r4, #0
     492:	d005      	beq.n	4a0 <mu_task_call+0x1c>
     494:	6823      	ldr	r3, [r4, #0]
     496:	2b00      	cmp	r3, #0
     498:	d002      	beq.n	4a0 <mu_task_call+0x1c>
    task->fn(task->self, arg);
     49a:	0031      	movs	r1, r6
     49c:	6860      	ldr	r0, [r4, #4]
     49e:	4798      	blx	r3
  }
#if (MU_TASK_PROFILING)
  task->call_count += 1;
     4a0:	68e3      	ldr	r3, [r4, #12]
     4a2:	3301      	adds	r3, #1
     4a4:	60e3      	str	r3, [r4, #12]
  task->runtime += mu_time_difference(mu_time_now(), called_at);
     4a6:	4b05      	ldr	r3, [pc, #20]	; (4bc <mu_task_call+0x38>)
     4a8:	4798      	blx	r3
     4aa:	0029      	movs	r1, r5
     4ac:	4b04      	ldr	r3, [pc, #16]	; (4c0 <mu_task_call+0x3c>)
     4ae:	4798      	blx	r3
     4b0:	6963      	ldr	r3, [r4, #20]
     4b2:	469c      	mov	ip, r3
     4b4:	4460      	add	r0, ip
     4b6:	6160      	str	r0, [r4, #20]
#endif
}
     4b8:	bd70      	pop	{r4, r5, r6, pc}
     4ba:	46c0      	nop			; (mov r8, r8)
     4bc:	000004e5 	.word	0x000004e5
     4c0:	000004fd 	.word	0x000004fd

000004c4 <mu_task_name>:

#if (MU_TASK_PROFILING)

const char *mu_task_name(mu_task_t *task) {
  return task->name;
     4c4:	6880      	ldr	r0, [r0, #8]
}
     4c6:	4770      	bx	lr

000004c8 <mu_task_call_count>:

unsigned int mu_task_call_count(mu_task_t *task) {
  return task->call_count;
     4c8:	68c0      	ldr	r0, [r0, #12]
}
     4ca:	4770      	bx	lr

000004cc <mu_task_runtime>:

float mu_task_runtime(mu_task_t *task) {
     4cc:	b510      	push	{r4, lr}
  float sec = mu_time_duration_to_seconds(task->runtime);
     4ce:	6940      	ldr	r0, [r0, #20]
     4d0:	4b02      	ldr	r3, [pc, #8]	; (4dc <mu_task_runtime+0x10>)
     4d2:	4798      	blx	r3
     4d4:	4b02      	ldr	r3, [pc, #8]	; (4e0 <mu_task_runtime+0x14>)
     4d6:	4798      	blx	r3
  // printf("\nmu_task_runtime %lu, %f", task->runtime, sec);
  return sec;
}
     4d8:	bd10      	pop	{r4, pc}
     4da:	46c0      	nop			; (mov r8, r8)
     4dc:	00000509 	.word	0x00000509
     4e0:	00001cd1 	.word	0x00001cd1

000004e4 <mu_time_now>:
// local storage

// =============================================================================
// public code

mu_time_t mu_time_now() {
     4e4:	b510      	push	{r4, lr}
  return port_time_now();
     4e6:	4b01      	ldr	r3, [pc, #4]	; (4ec <mu_time_now+0x8>)
     4e8:	4798      	blx	r3
}
     4ea:	bd10      	pop	{r4, pc}
     4ec:	00000175 	.word	0x00000175

000004f0 <mu_time_offset>:

mu_time_t mu_time_offset(mu_time_t t1, mu_time_dt dt) {
     4f0:	b510      	push	{r4, lr}
  return port_time_offset(t1, dt);
     4f2:	4b01      	ldr	r3, [pc, #4]	; (4f8 <mu_time_offset+0x8>)
     4f4:	4798      	blx	r3
}
     4f6:	bd10      	pop	{r4, pc}
     4f8:	00000129 	.word	0x00000129

000004fc <mu_time_difference>:

mu_time_dt mu_time_difference(mu_time_t t1, mu_time_t t2) {
     4fc:	b510      	push	{r4, lr}
  return port_time_difference(t1, t2);
     4fe:	4b01      	ldr	r3, [pc, #4]	; (504 <mu_time_difference+0x8>)
     500:	4798      	blx	r3
}
     502:	bd10      	pop	{r4, pc}
     504:	0000012d 	.word	0x0000012d

00000508 <mu_time_duration_to_seconds>:

bool mu_time_is_after(mu_time_t t1, mu_time_t t2) {
  return port_time_is_before(t2, t1);
}

mu_time_seconds_t mu_time_duration_to_seconds(mu_time_dt dt) {
     508:	b510      	push	{r4, lr}
  return port_time_duration_to_seconds(dt);
     50a:	4b02      	ldr	r3, [pc, #8]	; (514 <mu_time_duration_to_seconds+0xc>)
     50c:	4798      	blx	r3
     50e:	4b02      	ldr	r3, [pc, #8]	; (518 <mu_time_duration_to_seconds+0x10>)
     510:	4798      	blx	r3
}
     512:	bd10      	pop	{r4, pc}
     514:	00000151 	.word	0x00000151
     518:	00001ba9 	.word	0x00001ba9

0000051c <mu_time_seconds_to_duration>:

mu_time_dt mu_time_seconds_to_duration(mu_time_seconds_t s) {
     51c:	b510      	push	{r4, lr}
  return port_time_seconds_to_duration(s);
     51e:	4b02      	ldr	r3, [pc, #8]	; (528 <mu_time_seconds_to_duration+0xc>)
     520:	4798      	blx	r3
     522:	4b02      	ldr	r3, [pc, #8]	; (52c <mu_time_seconds_to_duration+0x10>)
     524:	4798      	blx	r3
}
     526:	bd10      	pop	{r4, pc}
     528:	0000013d 	.word	0x0000013d
     52c:	00001b41 	.word	0x00001b41

00000530 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     530:	b510      	push	{r4, lr}
	system_init();
     532:	4b01      	ldr	r3, [pc, #4]	; (538 <atmel_start_init+0x8>)
     534:	4798      	blx	r3
}
     536:	bd10      	pop	{r4, pc}
     538:	000006fd 	.word	0x000006fd

0000053c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     53c:	e7fe      	b.n	53c <Dummy_Handler>
	...

00000540 <Reset_Handler>:
{
     540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     542:	4a2a      	ldr	r2, [pc, #168]	; (5ec <Reset_Handler+0xac>)
     544:	4b2a      	ldr	r3, [pc, #168]	; (5f0 <Reset_Handler+0xb0>)
     546:	429a      	cmp	r2, r3
     548:	d011      	beq.n	56e <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     54a:	001a      	movs	r2, r3
     54c:	4b29      	ldr	r3, [pc, #164]	; (5f4 <Reset_Handler+0xb4>)
     54e:	429a      	cmp	r2, r3
     550:	d20d      	bcs.n	56e <Reset_Handler+0x2e>
     552:	4a29      	ldr	r2, [pc, #164]	; (5f8 <Reset_Handler+0xb8>)
     554:	3303      	adds	r3, #3
     556:	1a9b      	subs	r3, r3, r2
     558:	089b      	lsrs	r3, r3, #2
     55a:	3301      	adds	r3, #1
     55c:	009b      	lsls	r3, r3, #2
     55e:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     560:	4823      	ldr	r0, [pc, #140]	; (5f0 <Reset_Handler+0xb0>)
     562:	4922      	ldr	r1, [pc, #136]	; (5ec <Reset_Handler+0xac>)
     564:	588c      	ldr	r4, [r1, r2]
     566:	5084      	str	r4, [r0, r2]
     568:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     56a:	429a      	cmp	r2, r3
     56c:	d1fa      	bne.n	564 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     56e:	4a23      	ldr	r2, [pc, #140]	; (5fc <Reset_Handler+0xbc>)
     570:	4b23      	ldr	r3, [pc, #140]	; (600 <Reset_Handler+0xc0>)
     572:	429a      	cmp	r2, r3
     574:	d20a      	bcs.n	58c <Reset_Handler+0x4c>
     576:	43d3      	mvns	r3, r2
     578:	4921      	ldr	r1, [pc, #132]	; (600 <Reset_Handler+0xc0>)
     57a:	185b      	adds	r3, r3, r1
     57c:	2103      	movs	r1, #3
     57e:	438b      	bics	r3, r1
     580:	3304      	adds	r3, #4
     582:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     584:	2100      	movs	r1, #0
     586:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     588:	4293      	cmp	r3, r2
     58a:	d1fc      	bne.n	586 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     58c:	4a1d      	ldr	r2, [pc, #116]	; (604 <Reset_Handler+0xc4>)
     58e:	21ff      	movs	r1, #255	; 0xff
     590:	4b1d      	ldr	r3, [pc, #116]	; (608 <Reset_Handler+0xc8>)
     592:	438b      	bics	r3, r1
     594:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     596:	39fd      	subs	r1, #253	; 0xfd
     598:	2390      	movs	r3, #144	; 0x90
     59a:	005b      	lsls	r3, r3, #1
     59c:	4a1b      	ldr	r2, [pc, #108]	; (60c <Reset_Handler+0xcc>)
     59e:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     5a0:	4a1b      	ldr	r2, [pc, #108]	; (610 <Reset_Handler+0xd0>)
     5a2:	78d3      	ldrb	r3, [r2, #3]
     5a4:	2503      	movs	r5, #3
     5a6:	43ab      	bics	r3, r5
     5a8:	2402      	movs	r4, #2
     5aa:	4323      	orrs	r3, r4
     5ac:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     5ae:	78d3      	ldrb	r3, [r2, #3]
     5b0:	270c      	movs	r7, #12
     5b2:	43bb      	bics	r3, r7
     5b4:	2608      	movs	r6, #8
     5b6:	4333      	orrs	r3, r6
     5b8:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     5ba:	4b16      	ldr	r3, [pc, #88]	; (614 <Reset_Handler+0xd4>)
     5bc:	7b98      	ldrb	r0, [r3, #14]
     5be:	2230      	movs	r2, #48	; 0x30
     5c0:	4390      	bics	r0, r2
     5c2:	2220      	movs	r2, #32
     5c4:	4310      	orrs	r0, r2
     5c6:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     5c8:	7b99      	ldrb	r1, [r3, #14]
     5ca:	43b9      	bics	r1, r7
     5cc:	4331      	orrs	r1, r6
     5ce:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     5d0:	7b9a      	ldrb	r2, [r3, #14]
     5d2:	43aa      	bics	r2, r5
     5d4:	4322      	orrs	r2, r4
     5d6:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     5d8:	4a0f      	ldr	r2, [pc, #60]	; (618 <Reset_Handler+0xd8>)
     5da:	6853      	ldr	r3, [r2, #4]
     5dc:	2180      	movs	r1, #128	; 0x80
     5de:	430b      	orrs	r3, r1
     5e0:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     5e2:	4b0e      	ldr	r3, [pc, #56]	; (61c <Reset_Handler+0xdc>)
     5e4:	4798      	blx	r3
        main();
     5e6:	4b0e      	ldr	r3, [pc, #56]	; (620 <Reset_Handler+0xe0>)
     5e8:	4798      	blx	r3
     5ea:	e7fe      	b.n	5ea <Reset_Handler+0xaa>
     5ec:	00002a70 	.word	0x00002a70
     5f0:	20000000 	.word	0x20000000
     5f4:	20000064 	.word	0x20000064
     5f8:	20000004 	.word	0x20000004
     5fc:	20000064 	.word	0x20000064
     600:	20000248 	.word	0x20000248
     604:	e000ed00 	.word	0xe000ed00
     608:	00000000 	.word	0x00000000
     60c:	41007000 	.word	0x41007000
     610:	41005000 	.word	0x41005000
     614:	41004800 	.word	0x41004800
     618:	41004000 	.word	0x41004000
     61c:	00001e21 	.word	0x00001e21
     620:	00000add 	.word	0x00000add

00000624 <EDBG_COM_CLOCK_init>:
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
     624:	4a04      	ldr	r2, [pc, #16]	; (638 <EDBG_COM_CLOCK_init+0x14>)
     626:	6a13      	ldr	r3, [r2, #32]
     628:	2120      	movs	r1, #32
     62a:	430b      	orrs	r3, r1
     62c:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     62e:	4a03      	ldr	r2, [pc, #12]	; (63c <EDBG_COM_CLOCK_init+0x18>)
     630:	4b03      	ldr	r3, [pc, #12]	; (640 <EDBG_COM_CLOCK_init+0x1c>)
     632:	805a      	strh	r2, [r3, #2]
void EDBG_COM_CLOCK_init()
{

	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM3);
	_gclk_enable_channel(SERCOM3_GCLK_ID_CORE, CONF_GCLK_SERCOM3_CORE_SRC);
}
     634:	4770      	bx	lr
     636:	46c0      	nop			; (mov r8, r8)
     638:	40000400 	.word	0x40000400
     63c:	00004017 	.word	0x00004017
     640:	40000c00 	.word	0x40000c00

00000644 <EDBG_COM_PORT_init>:
 * \brief USART pinmux initialization function
 *
 * Set each required pin to USART functionality
 */
void EDBG_COM_PORT_init()
{
     644:	b530      	push	{r4, r5, lr}
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     646:	4b0e      	ldr	r3, [pc, #56]	; (680 <EDBG_COM_PORT_init+0x3c>)
     648:	2256      	movs	r2, #86	; 0x56
     64a:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     64c:	2501      	movs	r5, #1
     64e:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     650:	2401      	movs	r4, #1
     652:	4321      	orrs	r1, r4
     654:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     656:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     658:	203b      	movs	r0, #59	; 0x3b
     65a:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     65c:	3a47      	subs	r2, #71	; 0x47
     65e:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     660:	3a0d      	subs	r2, #13
     662:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     664:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     666:	2157      	movs	r1, #87	; 0x57
     668:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     66a:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     66c:	4322      	orrs	r2, r4
     66e:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     670:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     672:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     674:	3948      	subs	r1, #72	; 0x48
     676:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     678:	3111      	adds	r1, #17
     67a:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     67c:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(EDBG_COM_TX, PINMUX_PA22C_SERCOM3_PAD0);

	gpio_set_pin_function(EDBG_COM_RX, PINMUX_PA23C_SERCOM3_PAD1);
}
     67e:	bd30      	pop	{r4, r5, pc}
     680:	41004400 	.word	0x41004400

00000684 <EDBG_COM_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void EDBG_COM_init(void)
{
     684:	b510      	push	{r4, lr}
     686:	b082      	sub	sp, #8
	EDBG_COM_CLOCK_init();
     688:	4b06      	ldr	r3, [pc, #24]	; (6a4 <EDBG_COM_init+0x20>)
     68a:	4798      	blx	r3
	usart_async_init(&EDBG_COM, SERCOM3, EDBG_COM_buffer, EDBG_COM_BUFFER_SIZE, (void *)NULL);
     68c:	2300      	movs	r3, #0
     68e:	9300      	str	r3, [sp, #0]
     690:	3310      	adds	r3, #16
     692:	4a05      	ldr	r2, [pc, #20]	; (6a8 <EDBG_COM_init+0x24>)
     694:	4905      	ldr	r1, [pc, #20]	; (6ac <EDBG_COM_init+0x28>)
     696:	4806      	ldr	r0, [pc, #24]	; (6b0 <EDBG_COM_init+0x2c>)
     698:	4c06      	ldr	r4, [pc, #24]	; (6b4 <EDBG_COM_init+0x30>)
     69a:	47a0      	blx	r4
	EDBG_COM_PORT_init();
     69c:	4b06      	ldr	r3, [pc, #24]	; (6b8 <EDBG_COM_init+0x34>)
     69e:	4798      	blx	r3
}
     6a0:	b002      	add	sp, #8
     6a2:	bd10      	pop	{r4, pc}
     6a4:	00000625 	.word	0x00000625
     6a8:	20000080 	.word	0x20000080
     6ac:	42001400 	.word	0x42001400
     6b0:	200001d8 	.word	0x200001d8
     6b4:	00000e81 	.word	0x00000e81
     6b8:	00000645 	.word	0x00000645

000006bc <CALENDAR_0_CLOCK_init>:
		PM->APBAMASK.reg |= 1 << peripheral;
     6bc:	4a04      	ldr	r2, [pc, #16]	; (6d0 <CALENDAR_0_CLOCK_init+0x14>)
     6be:	6993      	ldr	r3, [r2, #24]
     6c0:	2120      	movs	r1, #32
     6c2:	430b      	orrs	r3, r1
     6c4:	6193      	str	r3, [r2, #24]
     6c6:	4a03      	ldr	r2, [pc, #12]	; (6d4 <CALENDAR_0_CLOCK_init+0x18>)
     6c8:	4b03      	ldr	r3, [pc, #12]	; (6d8 <CALENDAR_0_CLOCK_init+0x1c>)
     6ca:	805a      	strh	r2, [r3, #2]

void CALENDAR_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBA, RTC);
	_gclk_enable_channel(RTC_GCLK_ID, CONF_GCLK_RTC_SRC);
}
     6cc:	4770      	bx	lr
     6ce:	46c0      	nop			; (mov r8, r8)
     6d0:	40000400 	.word	0x40000400
     6d4:	00004304 	.word	0x00004304
     6d8:	40000c00 	.word	0x40000c00

000006dc <CALENDAR_0_init>:

void CALENDAR_0_init(void)
{
     6dc:	b510      	push	{r4, lr}
	CALENDAR_0_CLOCK_init();
     6de:	4b03      	ldr	r3, [pc, #12]	; (6ec <CALENDAR_0_init+0x10>)
     6e0:	4798      	blx	r3
	calendar_init(&CALENDAR_0, RTC);
     6e2:	4903      	ldr	r1, [pc, #12]	; (6f0 <CALENDAR_0_init+0x14>)
     6e4:	4803      	ldr	r0, [pc, #12]	; (6f4 <CALENDAR_0_init+0x18>)
     6e6:	4b04      	ldr	r3, [pc, #16]	; (6f8 <CALENDAR_0_init+0x1c>)
     6e8:	4798      	blx	r3
}
     6ea:	bd10      	pop	{r4, pc}
     6ec:	000006bd 	.word	0x000006bd
     6f0:	40001400 	.word	0x40001400
     6f4:	20000228 	.word	0x20000228
     6f8:	00000bc1 	.word	0x00000bc1

000006fc <system_init>:

void system_init(void)
{
     6fc:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     6fe:	4b0c      	ldr	r3, [pc, #48]	; (730 <system_init+0x34>)
     700:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     702:	23c0      	movs	r3, #192	; 0xc0
     704:	05db      	lsls	r3, r3, #23
     706:	2280      	movs	r2, #128	; 0x80
     708:	05d2      	lsls	r2, r2, #23
     70a:	2198      	movs	r1, #152	; 0x98
     70c:	505a      	str	r2, [r3, r1]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     70e:	3910      	subs	r1, #16
     710:	505a      	str	r2, [r3, r1]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     712:	4b08      	ldr	r3, [pc, #32]	; (734 <system_init+0x38>)
     714:	3120      	adds	r1, #32
     716:	505a      	str	r2, [r3, r1]
     718:	4a07      	ldr	r2, [pc, #28]	; (738 <system_init+0x3c>)
     71a:	505a      	str	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     71c:	3136      	adds	r1, #54	; 0x36
     71e:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     720:	2001      	movs	r0, #1
     722:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     724:	545a      	strb	r2, [r3, r1]
	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);

	EDBG_COM_init();
     726:	4b05      	ldr	r3, [pc, #20]	; (73c <system_init+0x40>)
     728:	4798      	blx	r3

	CALENDAR_0_init();
     72a:	4b05      	ldr	r3, [pc, #20]	; (740 <system_init+0x44>)
     72c:	4798      	blx	r3
}
     72e:	bd10      	pop	{r4, pc}
     730:	0000113d 	.word	0x0000113d
     734:	41004400 	.word	0x41004400
     738:	c0004000 	.word	0xc0004000
     73c:	00000685 	.word	0x00000685
     740:	000006dd 	.word	0x000006dd

00000744 <serial_tx_cb>:
  mu_sched_from_isr(&s_sched, &s_console_event);
}

static void serial_tx_cb(const struct usart_async_descriptor *const descr) {
  (void)descr;
  asm("nop");
     744:	46c0      	nop			; (mov r8, r8)
}
     746:	4770      	bx	lr

00000748 <serial_err_cb>:

static void serial_err_cb(const struct usart_async_descriptor *const descr) {
  (void)descr;
  asm("nop");
     748:	46c0      	nop			; (mov r8, r8)
}
     74a:	4770      	bx	lr

0000074c <serial_rx_cb>:
static void serial_rx_cb(const struct usart_async_descriptor *const descr) {
     74c:	b510      	push	{r4, lr}
  mu_sched_from_isr(&s_sched, &s_console_event);
     74e:	4903      	ldr	r1, [pc, #12]	; (75c <serial_rx_cb+0x10>)
     750:	0008      	movs	r0, r1
     752:	3024      	adds	r0, #36	; 0x24
     754:	4b02      	ldr	r3, [pc, #8]	; (760 <serial_rx_cb+0x14>)
     756:	4798      	blx	r3
}
     758:	bd10      	pop	{r4, pc}
     75a:	46c0      	nop			; (mov r8, r8)
     75c:	20000090 	.word	0x20000090
     760:	00000465 	.word	0x00000465

00000764 <str_write>:
static void str_write(const char *s) {
     764:	b510      	push	{r4, lr}
     766:	0004      	movs	r4, r0
  io_write(s_usart_io, (const uint8_t *)s, strlen(s));
     768:	4b06      	ldr	r3, [pc, #24]	; (784 <str_write+0x20>)
     76a:	4798      	blx	r3
     76c:	b282      	uxth	r2, r0
     76e:	4b06      	ldr	r3, [pc, #24]	; (788 <str_write+0x24>)
     770:	6c58      	ldr	r0, [r3, #68]	; 0x44
     772:	0021      	movs	r1, r4
     774:	4b05      	ldr	r3, [pc, #20]	; (78c <str_write+0x28>)
     776:	4798      	blx	r3
  delay_ms(500);
     778:	20fa      	movs	r0, #250	; 0xfa
     77a:	0040      	lsls	r0, r0, #1
     77c:	4b04      	ldr	r3, [pc, #16]	; (790 <str_write+0x2c>)
     77e:	4798      	blx	r3
}
     780:	bd10      	pop	{r4, pc}
     782:	46c0      	nop			; (mov r8, r8)
     784:	00001f11 	.word	0x00001f11
     788:	20000090 	.word	0x20000090
     78c:	00000c55 	.word	0x00000c55
     790:	00000c35 	.word	0x00000c35

00000794 <task_led_pause>:
static void task_led_pause(bool pause) {
     794:	b530      	push	{r4, r5, lr}
     796:	b083      	sub	sp, #12
  if (pause) {
     798:	2800      	cmp	r0, #0
     79a:	d119      	bne.n	7d0 <task_led_pause+0x3c>
  } else if (!mu_sched_has_event(&s_sched, &s_led_event)) {
     79c:	4810      	ldr	r0, [pc, #64]	; (7e0 <task_led_pause+0x4c>)
     79e:	0001      	movs	r1, r0
     7a0:	3148      	adds	r1, #72	; 0x48
     7a2:	3024      	adds	r0, #36	; 0x24
     7a4:	4b0f      	ldr	r3, [pc, #60]	; (7e4 <task_led_pause+0x50>)
     7a6:	4798      	blx	r3
     7a8:	2800      	cmp	r0, #0
     7aa:	d117      	bne.n	7dc <task_led_pause+0x48>
    mu_time_t now = mu_time_now();
     7ac:	4b0e      	ldr	r3, [pc, #56]	; (7e8 <task_led_pause+0x54>)
     7ae:	4798      	blx	r3
     7b0:	0001      	movs	r1, r0
    mu_sched_add(&s_sched,
     7b2:	4c0b      	ldr	r4, [pc, #44]	; (7e0 <task_led_pause+0x4c>)
     7b4:	0020      	movs	r0, r4
     7b6:	3048      	adds	r0, #72	; 0x48
     7b8:	4b0c      	ldr	r3, [pc, #48]	; (7ec <task_led_pause+0x58>)
     7ba:	9300      	str	r3, [sp, #0]
     7bc:	2300      	movs	r3, #0
     7be:	4a0c      	ldr	r2, [pc, #48]	; (7f0 <task_led_pause+0x5c>)
     7c0:	4d0c      	ldr	r5, [pc, #48]	; (7f4 <task_led_pause+0x60>)
     7c2:	47a8      	blx	r5
     7c4:	0001      	movs	r1, r0
     7c6:	0020      	movs	r0, r4
     7c8:	3024      	adds	r0, #36	; 0x24
     7ca:	4b0b      	ldr	r3, [pc, #44]	; (7f8 <task_led_pause+0x64>)
     7cc:	4798      	blx	r3
}
     7ce:	e005      	b.n	7dc <task_led_pause+0x48>
    mu_sched_remove(&s_sched, &s_led_event);
     7d0:	4803      	ldr	r0, [pc, #12]	; (7e0 <task_led_pause+0x4c>)
     7d2:	0001      	movs	r1, r0
     7d4:	3148      	adds	r1, #72	; 0x48
     7d6:	3024      	adds	r0, #36	; 0x24
     7d8:	4b08      	ldr	r3, [pc, #32]	; (7fc <task_led_pause+0x68>)
     7da:	4798      	blx	r3
}
     7dc:	b003      	add	sp, #12
     7de:	bd30      	pop	{r4, r5, pc}
     7e0:	20000090 	.word	0x20000090
     7e4:	00000305 	.word	0x00000305
     7e8:	000004e5 	.word	0x000004e5
     7ec:	0000271c 	.word	0x0000271c
     7f0:	00000929 	.word	0x00000929
     7f4:	000001a9 	.word	0x000001a9
     7f8:	00000351 	.word	0x00000351
     7fc:	0000042d 	.word	0x0000042d

00000800 <task_monitor_pause>:
static void task_monitor_pause(bool pause) {
     800:	b530      	push	{r4, r5, lr}
     802:	b083      	sub	sp, #12
  if (pause) {
     804:	2800      	cmp	r0, #0
     806:	d119      	bne.n	83c <task_monitor_pause+0x3c>
  } else if (!mu_sched_has_event(&s_sched, &s_monitor_event)) {
     808:	4810      	ldr	r0, [pc, #64]	; (84c <task_monitor_pause+0x4c>)
     80a:	0001      	movs	r1, r0
     80c:	316c      	adds	r1, #108	; 0x6c
     80e:	3024      	adds	r0, #36	; 0x24
     810:	4b0f      	ldr	r3, [pc, #60]	; (850 <task_monitor_pause+0x50>)
     812:	4798      	blx	r3
     814:	2800      	cmp	r0, #0
     816:	d117      	bne.n	848 <task_monitor_pause+0x48>
    mu_time_t now = mu_time_now();
     818:	4b0e      	ldr	r3, [pc, #56]	; (854 <task_monitor_pause+0x54>)
     81a:	4798      	blx	r3
     81c:	0001      	movs	r1, r0
    mu_sched_add(&s_sched,
     81e:	4c0b      	ldr	r4, [pc, #44]	; (84c <task_monitor_pause+0x4c>)
     820:	0020      	movs	r0, r4
     822:	306c      	adds	r0, #108	; 0x6c
     824:	4b0c      	ldr	r3, [pc, #48]	; (858 <task_monitor_pause+0x58>)
     826:	9300      	str	r3, [sp, #0]
     828:	2300      	movs	r3, #0
     82a:	4a0c      	ldr	r2, [pc, #48]	; (85c <task_monitor_pause+0x5c>)
     82c:	4d0c      	ldr	r5, [pc, #48]	; (860 <task_monitor_pause+0x60>)
     82e:	47a8      	blx	r5
     830:	0001      	movs	r1, r0
     832:	0020      	movs	r0, r4
     834:	3024      	adds	r0, #36	; 0x24
     836:	4b0b      	ldr	r3, [pc, #44]	; (864 <task_monitor_pause+0x64>)
     838:	4798      	blx	r3
}
     83a:	e005      	b.n	848 <task_monitor_pause+0x48>
    mu_sched_remove(&s_sched, &s_monitor_event);
     83c:	4803      	ldr	r0, [pc, #12]	; (84c <task_monitor_pause+0x4c>)
     83e:	0001      	movs	r1, r0
     840:	316c      	adds	r1, #108	; 0x6c
     842:	3024      	adds	r0, #36	; 0x24
     844:	4b08      	ldr	r3, [pc, #32]	; (868 <task_monitor_pause+0x68>)
     846:	4798      	blx	r3
}
     848:	b003      	add	sp, #12
     84a:	bd30      	pop	{r4, r5, pc}
     84c:	20000090 	.word	0x20000090
     850:	00000305 	.word	0x00000305
     854:	000004e5 	.word	0x000004e5
     858:	00002720 	.word	0x00002720
     85c:	00000a99 	.word	0x00000a99
     860:	000001a9 	.word	0x000001a9
     864:	00000351 	.word	0x00000351
     868:	0000042d 	.word	0x0000042d

0000086c <task_console>:
static void task_console(void *self, void *arg) {
     86c:	b5f0      	push	{r4, r5, r6, r7, lr}
     86e:	b083      	sub	sp, #12
  return ringbuffer_num(&EDBG_COM.rx) != 0;
     870:	4e21      	ldr	r6, [pc, #132]	; (8f8 <task_console+0x8c>)
     872:	4f22      	ldr	r7, [pc, #136]	; (8fc <task_console+0x90>)
  while (ERR_TIMEOUT == io_read(&EDBG_COM.io, &tmp, 1)) {
     874:	4d22      	ldr	r5, [pc, #136]	; (900 <task_console+0x94>)
  while(char_is_available()) {
     876:	e00f      	b.n	898 <task_console+0x2c>
    switch (ch[0]) {
     878:	2b4d      	cmp	r3, #77	; 0x4d
     87a:	d139      	bne.n	8f0 <task_console+0x84>
      task_monitor_pause(true);
     87c:	2001      	movs	r0, #1
     87e:	4b21      	ldr	r3, [pc, #132]	; (904 <task_console+0x98>)
     880:	4798      	blx	r3
      str_write("- Monitor task suspended.\r\n");
     882:	4821      	ldr	r0, [pc, #132]	; (908 <task_console+0x9c>)
     884:	4b21      	ldr	r3, [pc, #132]	; (90c <task_console+0xa0>)
     886:	4798      	blx	r3
    char *str = "";
     888:	4821      	ldr	r0, [pc, #132]	; (910 <task_console+0xa4>)
      break;
     88a:	e003      	b.n	894 <task_console+0x28>
      task_led_pause(false);
     88c:	2000      	movs	r0, #0
     88e:	4b21      	ldr	r3, [pc, #132]	; (914 <task_console+0xa8>)
     890:	4798      	blx	r3
      str = ("- LED blink task active.\r\n");
     892:	4821      	ldr	r0, [pc, #132]	; (918 <task_console+0xac>)
    str_write(str);
     894:	4b1d      	ldr	r3, [pc, #116]	; (90c <task_console+0xa0>)
     896:	4798      	blx	r3
  return ringbuffer_num(&EDBG_COM.rx) != 0;
     898:	0030      	movs	r0, r6
     89a:	47b8      	blx	r7
  while(char_is_available()) {
     89c:	2800      	cmp	r0, #0
     89e:	d029      	beq.n	8f4 <task_console+0x88>
    char ch[2] = {0, 0};
     8a0:	ab01      	add	r3, sp, #4
     8a2:	2200      	movs	r2, #0
     8a4:	701a      	strb	r2, [r3, #0]
     8a6:	705a      	strb	r2, [r3, #1]
  while (ERR_TIMEOUT == io_read(&EDBG_COM.io, &tmp, 1)) {
     8a8:	4c1c      	ldr	r4, [pc, #112]	; (91c <task_console+0xb0>)
     8aa:	2201      	movs	r2, #1
     8ac:	466b      	mov	r3, sp
     8ae:	1cd9      	adds	r1, r3, #3
     8b0:	0028      	movs	r0, r5
     8b2:	47a0      	blx	r4
     8b4:	3008      	adds	r0, #8
     8b6:	d0f8      	beq.n	8aa <task_console+0x3e>
  return (char)tmp;
     8b8:	466b      	mov	r3, sp
     8ba:	3303      	adds	r3, #3
     8bc:	781b      	ldrb	r3, [r3, #0]
    ch[0] = char_read();
     8be:	aa01      	add	r2, sp, #4
     8c0:	7013      	strb	r3, [r2, #0]
    switch (ch[0]) {
     8c2:	2b61      	cmp	r3, #97	; 0x61
     8c4:	d0e2      	beq.n	88c <task_console+0x20>
     8c6:	d9d7      	bls.n	878 <task_console+0xc>
     8c8:	2b6d      	cmp	r3, #109	; 0x6d
     8ca:	d00c      	beq.n	8e6 <task_console+0x7a>
     8cc:	2b73      	cmp	r3, #115	; 0x73
     8ce:	d10f      	bne.n	8f0 <task_console+0x84>
      task_led_pause(true);
     8d0:	2001      	movs	r0, #1
     8d2:	4b10      	ldr	r3, [pc, #64]	; (914 <task_console+0xa8>)
     8d4:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     8d6:	2180      	movs	r1, #128	; 0x80
     8d8:	05c9      	lsls	r1, r1, #23
     8da:	2398      	movs	r3, #152	; 0x98
     8dc:	22c0      	movs	r2, #192	; 0xc0
     8de:	05d2      	lsls	r2, r2, #23
     8e0:	50d1      	str	r1, [r2, r3]
      str = ("- LED OFF and blink task suspended.\r\n");
     8e2:	480f      	ldr	r0, [pc, #60]	; (920 <task_console+0xb4>)
     8e4:	e7d6      	b.n	894 <task_console+0x28>
      task_monitor_pause(false);
     8e6:	2000      	movs	r0, #0
     8e8:	4b06      	ldr	r3, [pc, #24]	; (904 <task_console+0x98>)
     8ea:	4798      	blx	r3
      str = ("- Monitor task active.\r\n");
     8ec:	480d      	ldr	r0, [pc, #52]	; (924 <task_console+0xb8>)
      break;
     8ee:	e7d1      	b.n	894 <task_console+0x28>
      str = ch;
     8f0:	a801      	add	r0, sp, #4
     8f2:	e7cf      	b.n	894 <task_console+0x28>
}
     8f4:	b003      	add	sp, #12
     8f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     8f8:	2000020c 	.word	0x2000020c
     8fc:	000010cd 	.word	0x000010cd
     900:	200001d8 	.word	0x200001d8
     904:	00000801 	.word	0x00000801
     908:	00002788 	.word	0x00002788
     90c:	00000765 	.word	0x00000765
     910:	00002784 	.word	0x00002784
     914:	00000795 	.word	0x00000795
     918:	00002728 	.word	0x00002728
     91c:	00000c89 	.word	0x00000c89
     920:	00002744 	.word	0x00002744
     924:	0000276c 	.word	0x0000276c

00000928 <task_led>:
static void task_led(void *self, void *arg) {
     928:	b570      	push	{r4, r5, r6, lr}
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
     92a:	2180      	movs	r1, #128	; 0x80
     92c:	05c9      	lsls	r1, r1, #23
     92e:	239c      	movs	r3, #156	; 0x9c
     930:	22c0      	movs	r2, #192	; 0xc0
     932:	05d2      	lsls	r2, r2, #23
     934:	50d1      	str	r1, [r2, r3]
  s_led_event.time = mu_time_offset(s_led_event.time,
     936:	4c09      	ldr	r4, [pc, #36]	; (95c <task_led+0x34>)
     938:	6e65      	ldr	r5, [r4, #100]	; 0x64
     93a:	2000      	movs	r0, #0
     93c:	4908      	ldr	r1, [pc, #32]	; (960 <task_led+0x38>)
     93e:	4b09      	ldr	r3, [pc, #36]	; (964 <task_led+0x3c>)
     940:	4798      	blx	r3
     942:	0001      	movs	r1, r0
     944:	0028      	movs	r0, r5
     946:	4b08      	ldr	r3, [pc, #32]	; (968 <task_led+0x40>)
     948:	4798      	blx	r3
     94a:	6660      	str	r0, [r4, #100]	; 0x64
  mu_sched_add(&s_sched, &s_led_event);
     94c:	0021      	movs	r1, r4
     94e:	3148      	adds	r1, #72	; 0x48
     950:	0020      	movs	r0, r4
     952:	3024      	adds	r0, #36	; 0x24
     954:	4b05      	ldr	r3, [pc, #20]	; (96c <task_led+0x44>)
     956:	4798      	blx	r3
}
     958:	bd70      	pop	{r4, r5, r6, pc}
     95a:	46c0      	nop			; (mov r8, r8)
     95c:	20000090 	.word	0x20000090
     960:	3fe00000 	.word	0x3fe00000
     964:	0000051d 	.word	0x0000051d
     968:	000004f1 	.word	0x000004f1
     96c:	00000351 	.word	0x00000351

00000970 <print_event>:
static void print_event(mu_evt_t *evt, char *buf, int maxlen) {
     970:	b5f0      	push	{r4, r5, r6, r7, lr}
     972:	b087      	sub	sp, #28
     974:	9105      	str	r1, [sp, #20]
     976:	0016      	movs	r6, r2
  mu_task_t *task = &evt->task;
     978:	1d04      	adds	r4, r0, #4
  snprintf(buf, maxlen, "%10s: %d %f",
     97a:	0020      	movs	r0, r4
     97c:	4b0b      	ldr	r3, [pc, #44]	; (9ac <print_event+0x3c>)
     97e:	4798      	blx	r3
     980:	0007      	movs	r7, r0
     982:	0020      	movs	r0, r4
     984:	4b0a      	ldr	r3, [pc, #40]	; (9b0 <print_event+0x40>)
     986:	4798      	blx	r3
     988:	0005      	movs	r5, r0
           mu_task_runtime(task));
     98a:	0020      	movs	r0, r4
     98c:	4b09      	ldr	r3, [pc, #36]	; (9b4 <print_event+0x44>)
     98e:	4798      	blx	r3
  snprintf(buf, maxlen, "%10s: %d %f",
     990:	4b09      	ldr	r3, [pc, #36]	; (9b8 <print_event+0x48>)
     992:	4798      	blx	r3
     994:	9002      	str	r0, [sp, #8]
     996:	9103      	str	r1, [sp, #12]
     998:	9500      	str	r5, [sp, #0]
     99a:	003b      	movs	r3, r7
     99c:	4a07      	ldr	r2, [pc, #28]	; (9bc <print_event+0x4c>)
     99e:	0031      	movs	r1, r6
     9a0:	9805      	ldr	r0, [sp, #20]
     9a2:	4c07      	ldr	r4, [pc, #28]	; (9c0 <print_event+0x50>)
     9a4:	47a0      	blx	r4
}
     9a6:	b007      	add	sp, #28
     9a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     9aa:	46c0      	nop			; (mov r8, r8)
     9ac:	000004c5 	.word	0x000004c5
     9b0:	000004c9 	.word	0x000004c9
     9b4:	000004cd 	.word	0x000004cd
     9b8:	00001c2d 	.word	0x00001c2d
     9bc:	000027a4 	.word	0x000027a4
     9c0:	00001e69 	.word	0x00001e69

000009c4 <_os_show_statistics>:
static void _os_show_statistics(void) {
     9c4:	b5f0      	push	{r4, r5, r6, r7, lr}
     9c6:	b083      	sub	sp, #12
  sprintf(szList, "%c%s%c%s", 0x1B, "[1;1H", 0x1B, "[2J");
     9c8:	4c23      	ldr	r4, [pc, #140]	; (a58 <_os_show_statistics+0x94>)
     9ca:	3410      	adds	r4, #16
     9cc:	4b23      	ldr	r3, [pc, #140]	; (a5c <_os_show_statistics+0x98>)
     9ce:	9301      	str	r3, [sp, #4]
     9d0:	231b      	movs	r3, #27
     9d2:	9300      	str	r3, [sp, #0]
     9d4:	4b22      	ldr	r3, [pc, #136]	; (a60 <_os_show_statistics+0x9c>)
     9d6:	221b      	movs	r2, #27
     9d8:	4922      	ldr	r1, [pc, #136]	; (a64 <_os_show_statistics+0xa0>)
     9da:	0020      	movs	r0, r4
     9dc:	4f22      	ldr	r7, [pc, #136]	; (a68 <_os_show_statistics+0xa4>)
     9de:	47b8      	blx	r7
  str_write(szList);
     9e0:	0020      	movs	r0, r4
     9e2:	4e22      	ldr	r6, [pc, #136]	; (a6c <_os_show_statistics+0xa8>)
     9e4:	47b0      	blx	r6
          mu_sched_task_count(&s_sched) + 1);   // + 1 to account for current event
     9e6:	4d22      	ldr	r5, [pc, #136]	; (a70 <_os_show_statistics+0xac>)
     9e8:	3524      	adds	r5, #36	; 0x24
     9ea:	0028      	movs	r0, r5
     9ec:	4b21      	ldr	r3, [pc, #132]	; (a74 <_os_show_statistics+0xb0>)
     9ee:	4798      	blx	r3
  sprintf(szList,
     9f0:	1c42      	adds	r2, r0, #1
     9f2:	4921      	ldr	r1, [pc, #132]	; (a78 <_os_show_statistics+0xb4>)
     9f4:	0020      	movs	r0, r4
     9f6:	47b8      	blx	r7
  str_write("\r\n> Tasks\tState\tPri\tStack\tNum");
     9f8:	4820      	ldr	r0, [pc, #128]	; (a7c <_os_show_statistics+0xb8>)
     9fa:	47b0      	blx	r6
  str_write("\r\n***********************************");
     9fc:	4820      	ldr	r0, [pc, #128]	; (a80 <_os_show_statistics+0xbc>)
     9fe:	47b0      	blx	r6
  if ((evt = mu_sched_current_event(&s_sched)) != NULL) {
     a00:	0028      	movs	r0, r5
     a02:	4b20      	ldr	r3, [pc, #128]	; (a84 <_os_show_statistics+0xc0>)
     a04:	4798      	blx	r3
     a06:	1e05      	subs	r5, r0, #0
     a08:	d00b      	beq.n	a22 <_os_show_statistics+0x5e>
    str_write("\r\n");
     a0a:	481f      	ldr	r0, [pc, #124]	; (a88 <_os_show_statistics+0xc4>)
     a0c:	4e17      	ldr	r6, [pc, #92]	; (a6c <_os_show_statistics+0xa8>)
     a0e:	47b0      	blx	r6
    print_event(evt, szList, 128);
     a10:	4c11      	ldr	r4, [pc, #68]	; (a58 <_os_show_statistics+0x94>)
     a12:	3410      	adds	r4, #16
     a14:	2280      	movs	r2, #128	; 0x80
     a16:	0021      	movs	r1, r4
     a18:	0028      	movs	r0, r5
     a1a:	4b1c      	ldr	r3, [pc, #112]	; (a8c <_os_show_statistics+0xc8>)
     a1c:	4798      	blx	r3
    str_write(szList);
     a1e:	0020      	movs	r0, r4
     a20:	47b0      	blx	r6
  evt = mu_sched_get_events(&s_sched);
     a22:	4813      	ldr	r0, [pc, #76]	; (a70 <_os_show_statistics+0xac>)
     a24:	3024      	adds	r0, #36	; 0x24
     a26:	4b1a      	ldr	r3, [pc, #104]	; (a90 <_os_show_statistics+0xcc>)
     a28:	4798      	blx	r3
     a2a:	1e04      	subs	r4, r0, #0
  while(evt != NULL) {
     a2c:	d00f      	beq.n	a4e <_os_show_statistics+0x8a>
    str_write("\r\n");
     a2e:	4f16      	ldr	r7, [pc, #88]	; (a88 <_os_show_statistics+0xc4>)
     a30:	4e0e      	ldr	r6, [pc, #56]	; (a6c <_os_show_statistics+0xa8>)
	  print_event(evt, szList, 128);
     a32:	4d09      	ldr	r5, [pc, #36]	; (a58 <_os_show_statistics+0x94>)
     a34:	3510      	adds	r5, #16
    str_write("\r\n");
     a36:	0038      	movs	r0, r7
     a38:	47b0      	blx	r6
	  print_event(evt, szList, 128);
     a3a:	2280      	movs	r2, #128	; 0x80
     a3c:	0029      	movs	r1, r5
     a3e:	0020      	movs	r0, r4
     a40:	4b12      	ldr	r3, [pc, #72]	; (a8c <_os_show_statistics+0xc8>)
     a42:	4798      	blx	r3
	  str_write(szList);
     a44:	0028      	movs	r0, r5
     a46:	47b0      	blx	r6
	  evt = evt->next;
     a48:	6824      	ldr	r4, [r4, #0]
  while(evt != NULL) {
     a4a:	2c00      	cmp	r4, #0
     a4c:	d1f3      	bne.n	a36 <_os_show_statistics+0x72>
  str_write("\r\n--- Press a key:"
     a4e:	4811      	ldr	r0, [pc, #68]	; (a94 <_os_show_statistics+0xd0>)
     a50:	4b06      	ldr	r3, [pc, #24]	; (a6c <_os_show_statistics+0xa8>)
     a52:	4798      	blx	r3
}
     a54:	b003      	add	sp, #12
     a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a58:	20000110 	.word	0x20000110
     a5c:	000027c4 	.word	0x000027c4
     a60:	000027b0 	.word	0x000027b0
     a64:	000027b8 	.word	0x000027b8
     a68:	00001ecd 	.word	0x00001ecd
     a6c:	00000765 	.word	0x00000765
     a70:	20000090 	.word	0x20000090
     a74:	00000329 	.word	0x00000329
     a78:	000027c8 	.word	0x000027c8
     a7c:	000027e4 	.word	0x000027e4
     a80:	00002804 	.word	0x00002804
     a84:	0000034b 	.word	0x0000034b
     a88:	00002740 	.word	0x00002740
     a8c:	00000971 	.word	0x00000971
     a90:	0000033f 	.word	0x0000033f
     a94:	0000282c 	.word	0x0000282c

00000a98 <task_monitor>:
static void task_monitor(void *self, void *arg) {
     a98:	b570      	push	{r4, r5, r6, lr}
  _os_show_statistics();
     a9a:	4b0a      	ldr	r3, [pc, #40]	; (ac4 <task_monitor+0x2c>)
     a9c:	4798      	blx	r3
  s_monitor_event.time = mu_time_offset(s_monitor_event.time,
     a9e:	4c0a      	ldr	r4, [pc, #40]	; (ac8 <task_monitor+0x30>)
     aa0:	2588      	movs	r5, #136	; 0x88
     aa2:	5966      	ldr	r6, [r4, r5]
     aa4:	2000      	movs	r0, #0
     aa6:	4909      	ldr	r1, [pc, #36]	; (acc <task_monitor+0x34>)
     aa8:	4b09      	ldr	r3, [pc, #36]	; (ad0 <task_monitor+0x38>)
     aaa:	4798      	blx	r3
     aac:	0001      	movs	r1, r0
     aae:	0030      	movs	r0, r6
     ab0:	4b08      	ldr	r3, [pc, #32]	; (ad4 <task_monitor+0x3c>)
     ab2:	4798      	blx	r3
     ab4:	5160      	str	r0, [r4, r5]
  mu_sched_add(&s_sched, &s_monitor_event);
     ab6:	0021      	movs	r1, r4
     ab8:	316c      	adds	r1, #108	; 0x6c
     aba:	0020      	movs	r0, r4
     abc:	3024      	adds	r0, #36	; 0x24
     abe:	4b06      	ldr	r3, [pc, #24]	; (ad8 <task_monitor+0x40>)
     ac0:	4798      	blx	r3
}
     ac2:	bd70      	pop	{r4, r5, r6, pc}
     ac4:	000009c5 	.word	0x000009c5
     ac8:	20000090 	.word	0x20000090
     acc:	40140000 	.word	0x40140000
     ad0:	0000051d 	.word	0x0000051d
     ad4:	000004f1 	.word	0x000004f1
     ad8:	00000351 	.word	0x00000351

00000adc <main>:
int main(void) {
     adc:	b570      	push	{r4, r5, r6, lr}
  atmel_start_init();
     ade:	4b1d      	ldr	r3, [pc, #116]	; (b54 <main+0x78>)
     ae0:	4798      	blx	r3
  port_init();          // set up rtc, etc.
     ae2:	4b1d      	ldr	r3, [pc, #116]	; (b58 <main+0x7c>)
     ae4:	4798      	blx	r3
  mu_sched_init(&s_sched, s_isr_queue_pool, ISR_QUEUE_POOL_SIZE);
     ae6:	4d1d      	ldr	r5, [pc, #116]	; (b5c <main+0x80>)
     ae8:	002c      	movs	r4, r5
     aea:	3424      	adds	r4, #36	; 0x24
     aec:	2208      	movs	r2, #8
     aee:	491c      	ldr	r1, [pc, #112]	; (b60 <main+0x84>)
     af0:	3110      	adds	r1, #16
     af2:	0020      	movs	r0, r4
     af4:	4b1b      	ldr	r3, [pc, #108]	; (b64 <main+0x88>)
     af6:	4798      	blx	r3
  task_led_pause(false);
     af8:	2000      	movs	r0, #0
     afa:	4b1b      	ldr	r3, [pc, #108]	; (b68 <main+0x8c>)
     afc:	4798      	blx	r3
  task_monitor_pause(false);
     afe:	2000      	movs	r0, #0
     b00:	4b1a      	ldr	r3, [pc, #104]	; (b6c <main+0x90>)
     b02:	4798      	blx	r3
  mu_sched_add(&s_sched,
     b04:	4b1a      	ldr	r3, [pc, #104]	; (b70 <main+0x94>)
     b06:	2200      	movs	r2, #0
     b08:	491a      	ldr	r1, [pc, #104]	; (b74 <main+0x98>)
     b0a:	0028      	movs	r0, r5
     b0c:	4e1a      	ldr	r6, [pc, #104]	; (b78 <main+0x9c>)
     b0e:	47b0      	blx	r6
     b10:	0001      	movs	r1, r0
     b12:	0020      	movs	r0, r4
     b14:	4b19      	ldr	r3, [pc, #100]	; (b7c <main+0xa0>)
     b16:	4798      	blx	r3
  usart_async_register_callback(&EDBG_COM, USART_ASYNC_TXC_CB, serial_tx_cb);
     b18:	4c19      	ldr	r4, [pc, #100]	; (b80 <main+0xa4>)
     b1a:	4a1a      	ldr	r2, [pc, #104]	; (b84 <main+0xa8>)
     b1c:	2101      	movs	r1, #1
     b1e:	0020      	movs	r0, r4
     b20:	4e19      	ldr	r6, [pc, #100]	; (b88 <main+0xac>)
     b22:	47b0      	blx	r6
  usart_async_register_callback(&EDBG_COM, USART_ASYNC_RXC_CB, serial_rx_cb);
     b24:	4a19      	ldr	r2, [pc, #100]	; (b8c <main+0xb0>)
     b26:	2100      	movs	r1, #0
     b28:	0020      	movs	r0, r4
     b2a:	47b0      	blx	r6
  usart_async_register_callback(&EDBG_COM, USART_ASYNC_ERROR_CB, serial_err_cb);
     b2c:	4a18      	ldr	r2, [pc, #96]	; (b90 <main+0xb4>)
     b2e:	2102      	movs	r1, #2
     b30:	0020      	movs	r0, r4
     b32:	47b0      	blx	r6
  usart_async_get_io_descriptor(&EDBG_COM, &s_usart_io);
     b34:	0029      	movs	r1, r5
     b36:	3144      	adds	r1, #68	; 0x44
     b38:	0020      	movs	r0, r4
     b3a:	4b16      	ldr	r3, [pc, #88]	; (b94 <main+0xb8>)
     b3c:	4798      	blx	r3
  usart_async_enable(&EDBG_COM);
     b3e:	0020      	movs	r0, r4
     b40:	4b15      	ldr	r3, [pc, #84]	; (b98 <main+0xbc>)
     b42:	4798      	blx	r3
    mu_sched_step(&s_sched);
     b44:	4c05      	ldr	r4, [pc, #20]	; (b5c <main+0x80>)
     b46:	3424      	adds	r4, #36	; 0x24
     b48:	4e14      	ldr	r6, [pc, #80]	; (b9c <main+0xc0>)
    _os_show_statistics();
     b4a:	4d15      	ldr	r5, [pc, #84]	; (ba0 <main+0xc4>)
    mu_sched_step(&s_sched);
     b4c:	0020      	movs	r0, r4
     b4e:	47b0      	blx	r6
    _os_show_statistics();
     b50:	47a8      	blx	r5
     b52:	e7fb      	b.n	b4c <main+0x70>
     b54:	00000531 	.word	0x00000531
     b58:	00000115 	.word	0x00000115
     b5c:	20000090 	.word	0x20000090
     b60:	20000190 	.word	0x20000190
     b64:	000002dd 	.word	0x000002dd
     b68:	00000795 	.word	0x00000795
     b6c:	00000801 	.word	0x00000801
     b70:	000028cc 	.word	0x000028cc
     b74:	0000086d 	.word	0x0000086d
     b78:	00000189 	.word	0x00000189
     b7c:	00000351 	.word	0x00000351
     b80:	200001d8 	.word	0x200001d8
     b84:	00000745 	.word	0x00000745
     b88:	00000f71 	.word	0x00000f71
     b8c:	0000074d 	.word	0x0000074d
     b90:	00000749 	.word	0x00000749
     b94:	00000f45 	.word	0x00000f45
     b98:	00000f19 	.word	0x00000f19
     b9c:	000003b9 	.word	0x000003b9
     ba0:	000009c5 	.word	0x000009c5

00000ba4 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     ba4:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     ba8:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     baa:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     bac:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     bb0:	4770      	bx	lr

00000bb2 <atomic_leave_critical>:
     bb2:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     bb6:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     bb8:	f383 8810 	msr	PRIMASK, r3
}
     bbc:	4770      	bx	lr
	...

00000bc0 <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
     bc0:	b570      	push	{r4, r5, r6, lr}
     bc2:	0004      	movs	r4, r0
     bc4:	000d      	movs	r5, r1
	int32_t ret = 0;

	/* Sanity check arguments */
	ASSERT(calendar);
     bc6:	1e43      	subs	r3, r0, #1
     bc8:	4198      	sbcs	r0, r3
     bca:	b2c0      	uxtb	r0, r0
     bcc:	22e0      	movs	r2, #224	; 0xe0
     bce:	0052      	lsls	r2, r2, #1
     bd0:	4909      	ldr	r1, [pc, #36]	; (bf8 <calendar_init+0x38>)
     bd2:	4b0a      	ldr	r3, [pc, #40]	; (bfc <calendar_init+0x3c>)
     bd4:	4798      	blx	r3

	if (calendar->device.hw == hw) {
     bd6:	6823      	ldr	r3, [r4, #0]
     bd8:	42ab      	cmp	r3, r5
     bda:	d008      	beq.n	bee <calendar_init+0x2e>
		/* Already initialized with current configuration */
		return ERR_NONE;
	} else if (calendar->device.hw != NULL) {
     bdc:	2b00      	cmp	r3, #0
     bde:	d108      	bne.n	bf2 <calendar_init+0x32>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
	}
	calendar->device.hw = (void *)hw;
     be0:	6025      	str	r5, [r4, #0]
	ret                 = _calendar_init(&calendar->device);
     be2:	0020      	movs	r0, r4
     be4:	4b06      	ldr	r3, [pc, #24]	; (c00 <calendar_init+0x40>)
     be6:	4798      	blx	r3
	calendar->base_year = DEFAULT_BASE_YEAR;
     be8:	4b06      	ldr	r3, [pc, #24]	; (c04 <calendar_init+0x44>)
     bea:	6163      	str	r3, [r4, #20]

	return ret;
}
     bec:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_NONE;
     bee:	2000      	movs	r0, #0
     bf0:	e7fc      	b.n	bec <calendar_init+0x2c>
		return ERR_ALREADY_INITIALIZED;
     bf2:	2012      	movs	r0, #18
     bf4:	4240      	negs	r0, r0
     bf6:	e7f9      	b.n	bec <calendar_init+0x2c>
     bf8:	000028d4 	.word	0x000028d4
     bfc:	00000fe9 	.word	0x00000fe9
     c00:	000011c9 	.word	0x000011c9
     c04:	000007b2 	.word	0x000007b2

00000c08 <calendar_enable>:
}

/** \brief Enable the Calendar
 */
int32_t calendar_enable(struct calendar_descriptor *const calendar)
{
     c08:	b510      	push	{r4, lr}
     c0a:	0004      	movs	r4, r0
	/* Sanity check arguments */
	ASSERT(calendar);
     c0c:	1e43      	subs	r3, r0, #1
     c0e:	4198      	sbcs	r0, r3
     c10:	b2c0      	uxtb	r0, r0
     c12:	22e6      	movs	r2, #230	; 0xe6
     c14:	32ff      	adds	r2, #255	; 0xff
     c16:	4904      	ldr	r1, [pc, #16]	; (c28 <calendar_enable+0x20>)
     c18:	4b04      	ldr	r3, [pc, #16]	; (c2c <calendar_enable+0x24>)
     c1a:	4798      	blx	r3

	_calendar_enable(&calendar->device);
     c1c:	0020      	movs	r0, r4
     c1e:	4b04      	ldr	r3, [pc, #16]	; (c30 <calendar_enable+0x28>)
     c20:	4798      	blx	r3

	return ERR_NONE;
}
     c22:	2000      	movs	r0, #0
     c24:	bd10      	pop	{r4, pc}
     c26:	46c0      	nop			; (mov r8, r8)
     c28:	000028d4 	.word	0x000028d4
     c2c:	00000fe9 	.word	0x00000fe9
     c30:	00001251 	.word	0x00001251

00000c34 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     c34:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     c36:	4b04      	ldr	r3, [pc, #16]	; (c48 <delay_ms+0x14>)
     c38:	681c      	ldr	r4, [r3, #0]
     c3a:	4b04      	ldr	r3, [pc, #16]	; (c4c <delay_ms+0x18>)
     c3c:	4798      	blx	r3
     c3e:	0001      	movs	r1, r0
     c40:	0020      	movs	r0, r4
     c42:	4b03      	ldr	r3, [pc, #12]	; (c50 <delay_ms+0x1c>)
     c44:	4798      	blx	r3
}
     c46:	bd10      	pop	{r4, pc}
     c48:	200001c0 	.word	0x200001c0
     c4c:	00001115 	.word	0x00001115
     c50:	00001135 	.word	0x00001135

00000c54 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     c54:	b570      	push	{r4, r5, r6, lr}
     c56:	0006      	movs	r6, r0
     c58:	000c      	movs	r4, r1
     c5a:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
     c5c:	2800      	cmp	r0, #0
     c5e:	d00d      	beq.n	c7c <io_write+0x28>
     c60:	0008      	movs	r0, r1
     c62:	1e43      	subs	r3, r0, #1
     c64:	4198      	sbcs	r0, r3
     c66:	b2c0      	uxtb	r0, r0
     c68:	2234      	movs	r2, #52	; 0x34
     c6a:	4905      	ldr	r1, [pc, #20]	; (c80 <io_write+0x2c>)
     c6c:	4b05      	ldr	r3, [pc, #20]	; (c84 <io_write+0x30>)
     c6e:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     c70:	6833      	ldr	r3, [r6, #0]
     c72:	002a      	movs	r2, r5
     c74:	0021      	movs	r1, r4
     c76:	0030      	movs	r0, r6
     c78:	4798      	blx	r3
}
     c7a:	bd70      	pop	{r4, r5, r6, pc}
     c7c:	2000      	movs	r0, #0
     c7e:	e7f3      	b.n	c68 <io_write+0x14>
     c80:	000028f0 	.word	0x000028f0
     c84:	00000fe9 	.word	0x00000fe9

00000c88 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     c88:	b570      	push	{r4, r5, r6, lr}
     c8a:	0006      	movs	r6, r0
     c8c:	000c      	movs	r4, r1
     c8e:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
     c90:	2800      	cmp	r0, #0
     c92:	d00d      	beq.n	cb0 <io_read+0x28>
     c94:	0008      	movs	r0, r1
     c96:	1e43      	subs	r3, r0, #1
     c98:	4198      	sbcs	r0, r3
     c9a:	b2c0      	uxtb	r0, r0
     c9c:	223d      	movs	r2, #61	; 0x3d
     c9e:	4905      	ldr	r1, [pc, #20]	; (cb4 <io_read+0x2c>)
     ca0:	4b05      	ldr	r3, [pc, #20]	; (cb8 <io_read+0x30>)
     ca2:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     ca4:	6873      	ldr	r3, [r6, #4]
     ca6:	002a      	movs	r2, r5
     ca8:	0021      	movs	r1, r4
     caa:	0030      	movs	r0, r6
     cac:	4798      	blx	r3
}
     cae:	bd70      	pop	{r4, r5, r6, pc}
     cb0:	2000      	movs	r0, #0
     cb2:	e7f3      	b.n	c9c <io_read+0x14>
     cb4:	000028f0 	.word	0x000028f0
     cb8:	00000fe9 	.word	0x00000fe9

00000cbc <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
     cbc:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     cbe:	3808      	subs	r0, #8

	descr->stat = 0;
     cc0:	2300      	movs	r3, #0
     cc2:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.tx_done) {
     cc4:	6a43      	ldr	r3, [r0, #36]	; 0x24
     cc6:	2b00      	cmp	r3, #0
     cc8:	d000      	beq.n	ccc <usart_transmission_complete+0x10>
		descr->usart_cb.tx_done(descr);
     cca:	4798      	blx	r3
	}
}
     ccc:	bd10      	pop	{r4, pc}

00000cce <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
     cce:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     cd0:	3808      	subs	r0, #8

	descr->stat = 0;
     cd2:	2300      	movs	r3, #0
     cd4:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.error) {
     cd6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
     cd8:	2b00      	cmp	r3, #0
     cda:	d000      	beq.n	cde <usart_error+0x10>
		descr->usart_cb.error(descr);
     cdc:	4798      	blx	r3
	}
}
     cde:	bd10      	pop	{r4, pc}

00000ce0 <usart_fill_rx_buffer>:
{
     ce0:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     ce2:	0004      	movs	r4, r0
	ringbuffer_put(&descr->rx, data);
     ce4:	302c      	adds	r0, #44	; 0x2c
     ce6:	4b04      	ldr	r3, [pc, #16]	; (cf8 <usart_fill_rx_buffer+0x18>)
     ce8:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
     cea:	6a23      	ldr	r3, [r4, #32]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     cec:	3c08      	subs	r4, #8
	if (descr->usart_cb.rx_done) {
     cee:	2b00      	cmp	r3, #0
     cf0:	d001      	beq.n	cf6 <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
     cf2:	0020      	movs	r0, r4
     cf4:	4798      	blx	r3
}
     cf6:	bd10      	pop	{r4, pc}
     cf8:	0000108d 	.word	0x0000108d

00000cfc <usart_async_write>:
{
     cfc:	b570      	push	{r4, r5, r6, lr}
     cfe:	0004      	movs	r4, r0
     d00:	000e      	movs	r6, r1
     d02:	0015      	movs	r5, r2
	ASSERT(descr && buf && length);
     d04:	2800      	cmp	r0, #0
     d06:	d01d      	beq.n	d44 <usart_async_write+0x48>
     d08:	2900      	cmp	r1, #0
     d0a:	d01d      	beq.n	d48 <usart_async_write+0x4c>
     d0c:	0010      	movs	r0, r2
     d0e:	1e43      	subs	r3, r0, #1
     d10:	4198      	sbcs	r0, r3
     d12:	223c      	movs	r2, #60	; 0x3c
     d14:	32ff      	adds	r2, #255	; 0xff
     d16:	490f      	ldr	r1, [pc, #60]	; (d54 <usart_async_write+0x58>)
     d18:	4b0f      	ldr	r3, [pc, #60]	; (d58 <usart_async_write+0x5c>)
     d1a:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
     d1c:	2344      	movs	r3, #68	; 0x44
     d1e:	5ae2      	ldrh	r2, [r4, r3]
     d20:	3308      	adds	r3, #8
     d22:	5ae3      	ldrh	r3, [r4, r3]
     d24:	429a      	cmp	r2, r3
     d26:	d111      	bne.n	d4c <usart_async_write+0x50>
	descr->tx_buffer        = (uint8_t *)buf;
     d28:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
     d2a:	234c      	movs	r3, #76	; 0x4c
     d2c:	52e5      	strh	r5, [r4, r3]
	descr->tx_por           = 0;
     d2e:	2200      	movs	r2, #0
     d30:	3b08      	subs	r3, #8
     d32:	52e2      	strh	r2, [r4, r3]
	descr->stat             = USART_ASYNC_STATUS_BUSY;
     d34:	3b43      	subs	r3, #67	; 0x43
     d36:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
     d38:	0020      	movs	r0, r4
     d3a:	3008      	adds	r0, #8
     d3c:	4b07      	ldr	r3, [pc, #28]	; (d5c <usart_async_write+0x60>)
     d3e:	4798      	blx	r3
	return (int32_t)length;
     d40:	0028      	movs	r0, r5
}
     d42:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
     d44:	2000      	movs	r0, #0
     d46:	e7e4      	b.n	d12 <usart_async_write+0x16>
     d48:	2000      	movs	r0, #0
     d4a:	e7e2      	b.n	d12 <usart_async_write+0x16>
		return ERR_NO_RESOURCE;
     d4c:	201c      	movs	r0, #28
     d4e:	4240      	negs	r0, r0
     d50:	e7f7      	b.n	d42 <usart_async_write+0x46>
     d52:	46c0      	nop			; (mov r8, r8)
     d54:	00002904 	.word	0x00002904
     d58:	00000fe9 	.word	0x00000fe9
     d5c:	000013e1 	.word	0x000013e1

00000d60 <usart_process_byte_sent>:
{
     d60:	b570      	push	{r4, r5, r6, lr}
     d62:	0004      	movs	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
     d64:	0001      	movs	r1, r0
     d66:	3908      	subs	r1, #8
     d68:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
     d6a:	224c      	movs	r2, #76	; 0x4c
     d6c:	5a8a      	ldrh	r2, [r1, r2]
     d6e:	429a      	cmp	r2, r3
     d70:	d00c      	beq.n	d8c <usart_process_byte_sent+0x2c>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
     d72:	000a      	movs	r2, r1
     d74:	6c89      	ldr	r1, [r1, #72]	; 0x48
     d76:	1c5d      	adds	r5, r3, #1
     d78:	2044      	movs	r0, #68	; 0x44
     d7a:	5215      	strh	r5, [r2, r0]
     d7c:	5cc9      	ldrb	r1, [r1, r3]
     d7e:	0020      	movs	r0, r4
     d80:	4b04      	ldr	r3, [pc, #16]	; (d94 <usart_process_byte_sent+0x34>)
     d82:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
     d84:	0020      	movs	r0, r4
     d86:	4b04      	ldr	r3, [pc, #16]	; (d98 <usart_process_byte_sent+0x38>)
     d88:	4798      	blx	r3
}
     d8a:	bd70      	pop	{r4, r5, r6, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
     d8c:	4b03      	ldr	r3, [pc, #12]	; (d9c <usart_process_byte_sent+0x3c>)
     d8e:	4798      	blx	r3
}
     d90:	e7fb      	b.n	d8a <usart_process_byte_sent+0x2a>
     d92:	46c0      	nop			; (mov r8, r8)
     d94:	000013d9 	.word	0x000013d9
     d98:	000013e1 	.word	0x000013e1
     d9c:	000013e9 	.word	0x000013e9

00000da0 <usart_async_read>:
{
     da0:	b5f0      	push	{r4, r5, r6, r7, lr}
     da2:	46ce      	mov	lr, r9
     da4:	4647      	mov	r7, r8
     da6:	b580      	push	{r7, lr}
     da8:	b085      	sub	sp, #20
     daa:	0005      	movs	r5, r0
     dac:	000e      	movs	r6, r1
     dae:	0017      	movs	r7, r2
	ASSERT(descr && buf && length);
     db0:	2800      	cmp	r0, #0
     db2:	d015      	beq.n	de0 <usart_async_read+0x40>
     db4:	2900      	cmp	r1, #0
     db6:	d013      	beq.n	de0 <usart_async_read+0x40>
     db8:	2a00      	cmp	r2, #0
     dba:	d12a      	bne.n	e12 <usart_async_read+0x72>
     dbc:	22ac      	movs	r2, #172	; 0xac
     dbe:	0052      	lsls	r2, r2, #1
     dc0:	4929      	ldr	r1, [pc, #164]	; (e68 <usart_async_read+0xc8>)
     dc2:	2000      	movs	r0, #0
     dc4:	4b29      	ldr	r3, [pc, #164]	; (e6c <usart_async_read+0xcc>)
     dc6:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
     dc8:	a803      	add	r0, sp, #12
     dca:	4b29      	ldr	r3, [pc, #164]	; (e70 <usart_async_read+0xd0>)
     dcc:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
     dce:	0028      	movs	r0, r5
     dd0:	3034      	adds	r0, #52	; 0x34
     dd2:	4b28      	ldr	r3, [pc, #160]	; (e74 <usart_async_read+0xd4>)
     dd4:	4798      	blx	r3
	CRITICAL_SECTION_LEAVE()
     dd6:	a803      	add	r0, sp, #12
     dd8:	4b27      	ldr	r3, [pc, #156]	; (e78 <usart_async_read+0xd8>)
     dda:	4798      	blx	r3
	uint16_t                       was_read = 0;
     ddc:	2500      	movs	r5, #0
	return (int32_t)was_read;
     dde:	e03c      	b.n	e5a <usart_async_read+0xba>
	ASSERT(descr && buf && length);
     de0:	22ac      	movs	r2, #172	; 0xac
     de2:	0052      	lsls	r2, r2, #1
     de4:	4920      	ldr	r1, [pc, #128]	; (e68 <usart_async_read+0xc8>)
     de6:	2000      	movs	r0, #0
     de8:	4b20      	ldr	r3, [pc, #128]	; (e6c <usart_async_read+0xcc>)
     dea:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
     dec:	a803      	add	r0, sp, #12
     dee:	4b20      	ldr	r3, [pc, #128]	; (e70 <usart_async_read+0xd0>)
     df0:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
     df2:	3534      	adds	r5, #52	; 0x34
     df4:	0028      	movs	r0, r5
     df6:	9501      	str	r5, [sp, #4]
     df8:	4b1e      	ldr	r3, [pc, #120]	; (e74 <usart_async_read+0xd4>)
     dfa:	4798      	blx	r3
     dfc:	4680      	mov	r8, r0
	CRITICAL_SECTION_LEAVE()
     dfe:	a803      	add	r0, sp, #12
     e00:	4b1d      	ldr	r3, [pc, #116]	; (e78 <usart_async_read+0xd8>)
     e02:	4798      	blx	r3
	uint16_t                       was_read = 0;
     e04:	2500      	movs	r5, #0
	while ((was_read < num) && (was_read < length)) {
     e06:	4643      	mov	r3, r8
     e08:	2b00      	cmp	r3, #0
     e0a:	d026      	beq.n	e5a <usart_async_read+0xba>
     e0c:	2f00      	cmp	r7, #0
     e0e:	d116      	bne.n	e3e <usart_async_read+0x9e>
     e10:	e023      	b.n	e5a <usart_async_read+0xba>
	ASSERT(descr && buf && length);
     e12:	22ac      	movs	r2, #172	; 0xac
     e14:	0052      	lsls	r2, r2, #1
     e16:	4914      	ldr	r1, [pc, #80]	; (e68 <usart_async_read+0xc8>)
     e18:	2001      	movs	r0, #1
     e1a:	4b14      	ldr	r3, [pc, #80]	; (e6c <usart_async_read+0xcc>)
     e1c:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
     e1e:	a803      	add	r0, sp, #12
     e20:	4b13      	ldr	r3, [pc, #76]	; (e70 <usart_async_read+0xd0>)
     e22:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
     e24:	3534      	adds	r5, #52	; 0x34
     e26:	0028      	movs	r0, r5
     e28:	9501      	str	r5, [sp, #4]
     e2a:	4b12      	ldr	r3, [pc, #72]	; (e74 <usart_async_read+0xd4>)
     e2c:	4798      	blx	r3
     e2e:	4680      	mov	r8, r0
	CRITICAL_SECTION_LEAVE()
     e30:	a803      	add	r0, sp, #12
     e32:	4b11      	ldr	r3, [pc, #68]	; (e78 <usart_async_read+0xd8>)
     e34:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
     e36:	4643      	mov	r3, r8
	uint16_t                       was_read = 0;
     e38:	2500      	movs	r5, #0
	while ((was_read < num) && (was_read < length)) {
     e3a:	2b00      	cmp	r3, #0
     e3c:	d00d      	beq.n	e5a <usart_async_read+0xba>
{
     e3e:	2400      	movs	r4, #0
		ringbuffer_get(&descr->rx, &buf[was_read++]);
     e40:	4b0e      	ldr	r3, [pc, #56]	; (e7c <usart_async_read+0xdc>)
     e42:	4699      	mov	r9, r3
     e44:	1c65      	adds	r5, r4, #1
     e46:	b2ad      	uxth	r5, r5
     e48:	1931      	adds	r1, r6, r4
     e4a:	9801      	ldr	r0, [sp, #4]
     e4c:	47c8      	blx	r9
     e4e:	3401      	adds	r4, #1
	while ((was_read < num) && (was_read < length)) {
     e50:	4544      	cmp	r4, r8
     e52:	d202      	bcs.n	e5a <usart_async_read+0xba>
     e54:	b2a3      	uxth	r3, r4
     e56:	429f      	cmp	r7, r3
     e58:	d8f4      	bhi.n	e44 <usart_async_read+0xa4>
}
     e5a:	0028      	movs	r0, r5
     e5c:	b005      	add	sp, #20
     e5e:	bc0c      	pop	{r2, r3}
     e60:	4690      	mov	r8, r2
     e62:	4699      	mov	r9, r3
     e64:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e66:	46c0      	nop			; (mov r8, r8)
     e68:	00002904 	.word	0x00002904
     e6c:	00000fe9 	.word	0x00000fe9
     e70:	00000ba5 	.word	0x00000ba5
     e74:	000010cd 	.word	0x000010cd
     e78:	00000bb3 	.word	0x00000bb3
     e7c:	00001045 	.word	0x00001045

00000e80 <usart_async_init>:
{
     e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     e82:	0004      	movs	r4, r0
     e84:	000d      	movs	r5, r1
     e86:	0016      	movs	r6, r2
     e88:	001f      	movs	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
     e8a:	2800      	cmp	r0, #0
     e8c:	d026      	beq.n	edc <usart_async_init+0x5c>
     e8e:	2900      	cmp	r1, #0
     e90:	d026      	beq.n	ee0 <usart_async_init+0x60>
     e92:	2a00      	cmp	r2, #0
     e94:	d026      	beq.n	ee4 <usart_async_init+0x64>
     e96:	0018      	movs	r0, r3
     e98:	1e43      	subs	r3, r0, #1
     e9a:	4198      	sbcs	r0, r3
     e9c:	223a      	movs	r2, #58	; 0x3a
     e9e:	4914      	ldr	r1, [pc, #80]	; (ef0 <usart_async_init+0x70>)
     ea0:	4b14      	ldr	r3, [pc, #80]	; (ef4 <usart_async_init+0x74>)
     ea2:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
     ea4:	0020      	movs	r0, r4
     ea6:	3034      	adds	r0, #52	; 0x34
     ea8:	003a      	movs	r2, r7
     eaa:	0031      	movs	r1, r6
     eac:	4b12      	ldr	r3, [pc, #72]	; (ef8 <usart_async_init+0x78>)
     eae:	4798      	blx	r3
     eb0:	2800      	cmp	r0, #0
     eb2:	d119      	bne.n	ee8 <usart_async_init+0x68>
	init_status = _usart_async_init(&descr->device, hw);
     eb4:	0020      	movs	r0, r4
     eb6:	3008      	adds	r0, #8
     eb8:	0029      	movs	r1, r5
     eba:	4b10      	ldr	r3, [pc, #64]	; (efc <usart_async_init+0x7c>)
     ebc:	4798      	blx	r3
	if (init_status) {
     ebe:	2800      	cmp	r0, #0
     ec0:	d10b      	bne.n	eda <usart_async_init+0x5a>
	descr->io.read  = usart_async_read;
     ec2:	4b0f      	ldr	r3, [pc, #60]	; (f00 <usart_async_init+0x80>)
     ec4:	6063      	str	r3, [r4, #4]
	descr->io.write = usart_async_write;
     ec6:	4b0f      	ldr	r3, [pc, #60]	; (f04 <usart_async_init+0x84>)
     ec8:	6023      	str	r3, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
     eca:	4b0f      	ldr	r3, [pc, #60]	; (f08 <usart_async_init+0x88>)
     ecc:	60a3      	str	r3, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
     ece:	4b0f      	ldr	r3, [pc, #60]	; (f0c <usart_async_init+0x8c>)
     ed0:	60e3      	str	r3, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
     ed2:	4b0f      	ldr	r3, [pc, #60]	; (f10 <usart_async_init+0x90>)
     ed4:	6123      	str	r3, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
     ed6:	4b0f      	ldr	r3, [pc, #60]	; (f14 <usart_async_init+0x94>)
     ed8:	6163      	str	r3, [r4, #20]
}
     eda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
     edc:	2000      	movs	r0, #0
     ede:	e7dd      	b.n	e9c <usart_async_init+0x1c>
     ee0:	2000      	movs	r0, #0
     ee2:	e7db      	b.n	e9c <usart_async_init+0x1c>
     ee4:	2000      	movs	r0, #0
     ee6:	e7d9      	b.n	e9c <usart_async_init+0x1c>
		return ERR_INVALID_ARG;
     ee8:	200d      	movs	r0, #13
     eea:	4240      	negs	r0, r0
     eec:	e7f5      	b.n	eda <usart_async_init+0x5a>
     eee:	46c0      	nop			; (mov r8, r8)
     ef0:	00002904 	.word	0x00002904
     ef4:	00000fe9 	.word	0x00000fe9
     ef8:	00000ff1 	.word	0x00000ff1
     efc:	00001349 	.word	0x00001349
     f00:	00000da1 	.word	0x00000da1
     f04:	00000cfd 	.word	0x00000cfd
     f08:	00000d61 	.word	0x00000d61
     f0c:	00000ce1 	.word	0x00000ce1
     f10:	00000cbd 	.word	0x00000cbd
     f14:	00000ccf 	.word	0x00000ccf

00000f18 <usart_async_enable>:
{
     f18:	b510      	push	{r4, lr}
     f1a:	0004      	movs	r4, r0
	ASSERT(descr);
     f1c:	1e43      	subs	r3, r0, #1
     f1e:	4198      	sbcs	r0, r3
     f20:	b2c0      	uxtb	r0, r0
     f22:	2261      	movs	r2, #97	; 0x61
     f24:	4904      	ldr	r1, [pc, #16]	; (f38 <usart_async_enable+0x20>)
     f26:	4b05      	ldr	r3, [pc, #20]	; (f3c <usart_async_enable+0x24>)
     f28:	4798      	blx	r3
	_usart_async_enable(&descr->device);
     f2a:	0020      	movs	r0, r4
     f2c:	3008      	adds	r0, #8
     f2e:	4b04      	ldr	r3, [pc, #16]	; (f40 <usart_async_enable+0x28>)
     f30:	4798      	blx	r3
}
     f32:	2000      	movs	r0, #0
     f34:	bd10      	pop	{r4, pc}
     f36:	46c0      	nop			; (mov r8, r8)
     f38:	00002904 	.word	0x00002904
     f3c:	00000fe9 	.word	0x00000fe9
     f40:	000013c5 	.word	0x000013c5

00000f44 <usart_async_get_io_descriptor>:
{
     f44:	b570      	push	{r4, r5, r6, lr}
     f46:	0004      	movs	r4, r0
     f48:	000d      	movs	r5, r1
	ASSERT(descr && io);
     f4a:	2800      	cmp	r0, #0
     f4c:	d00a      	beq.n	f64 <usart_async_get_io_descriptor+0x20>
     f4e:	0008      	movs	r0, r1
     f50:	1e43      	subs	r3, r0, #1
     f52:	4198      	sbcs	r0, r3
     f54:	b2c0      	uxtb	r0, r0
     f56:	2277      	movs	r2, #119	; 0x77
     f58:	4903      	ldr	r1, [pc, #12]	; (f68 <usart_async_get_io_descriptor+0x24>)
     f5a:	4b04      	ldr	r3, [pc, #16]	; (f6c <usart_async_get_io_descriptor+0x28>)
     f5c:	4798      	blx	r3
	*io = &descr->io;
     f5e:	602c      	str	r4, [r5, #0]
}
     f60:	2000      	movs	r0, #0
     f62:	bd70      	pop	{r4, r5, r6, pc}
     f64:	2000      	movs	r0, #0
     f66:	e7f6      	b.n	f56 <usart_async_get_io_descriptor+0x12>
     f68:	00002904 	.word	0x00002904
     f6c:	00000fe9 	.word	0x00000fe9

00000f70 <usart_async_register_callback>:
{
     f70:	b570      	push	{r4, r5, r6, lr}
     f72:	0005      	movs	r5, r0
     f74:	000e      	movs	r6, r1
     f76:	0014      	movs	r4, r2
	ASSERT(descr);
     f78:	1e43      	subs	r3, r0, #1
     f7a:	4198      	sbcs	r0, r3
     f7c:	b2c0      	uxtb	r0, r0
     f7e:	2283      	movs	r2, #131	; 0x83
     f80:	4916      	ldr	r1, [pc, #88]	; (fdc <usart_async_register_callback+0x6c>)
     f82:	4b17      	ldr	r3, [pc, #92]	; (fe0 <usart_async_register_callback+0x70>)
     f84:	4798      	blx	r3
	switch (type) {
     f86:	2e01      	cmp	r6, #1
     f88:	d011      	beq.n	fae <usart_async_register_callback+0x3e>
     f8a:	2e00      	cmp	r6, #0
     f8c:	d004      	beq.n	f98 <usart_async_register_callback+0x28>
     f8e:	2e02      	cmp	r6, #2
     f90:	d018      	beq.n	fc4 <usart_async_register_callback+0x54>
		return ERR_INVALID_ARG;
     f92:	200d      	movs	r0, #13
     f94:	4240      	negs	r0, r0
     f96:	e009      	b.n	fac <usart_async_register_callback+0x3c>
		descr->usart_cb.rx_done = cb;
     f98:	62ac      	str	r4, [r5, #40]	; 0x28
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_RX_DONE, NULL != cb);
     f9a:	1e62      	subs	r2, r4, #1
     f9c:	4194      	sbcs	r4, r2
     f9e:	b2e2      	uxtb	r2, r4
     fa0:	0028      	movs	r0, r5
     fa2:	3008      	adds	r0, #8
     fa4:	2101      	movs	r1, #1
     fa6:	4b0f      	ldr	r3, [pc, #60]	; (fe4 <usart_async_register_callback+0x74>)
     fa8:	4798      	blx	r3
	return ERR_NONE;
     faa:	2000      	movs	r0, #0
}
     fac:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.tx_done = cb;
     fae:	626c      	str	r4, [r5, #36]	; 0x24
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_TX_DONE, NULL != cb);
     fb0:	1e62      	subs	r2, r4, #1
     fb2:	4194      	sbcs	r4, r2
     fb4:	b2e2      	uxtb	r2, r4
     fb6:	0028      	movs	r0, r5
     fb8:	3008      	adds	r0, #8
     fba:	2102      	movs	r1, #2
     fbc:	4b09      	ldr	r3, [pc, #36]	; (fe4 <usart_async_register_callback+0x74>)
     fbe:	4798      	blx	r3
	return ERR_NONE;
     fc0:	2000      	movs	r0, #0
		break;
     fc2:	e7f3      	b.n	fac <usart_async_register_callback+0x3c>
		descr->usart_cb.error = cb;
     fc4:	62ec      	str	r4, [r5, #44]	; 0x2c
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
     fc6:	1e62      	subs	r2, r4, #1
     fc8:	4194      	sbcs	r4, r2
     fca:	b2e2      	uxtb	r2, r4
     fcc:	0028      	movs	r0, r5
     fce:	3008      	adds	r0, #8
     fd0:	2103      	movs	r1, #3
     fd2:	4b04      	ldr	r3, [pc, #16]	; (fe4 <usart_async_register_callback+0x74>)
     fd4:	4798      	blx	r3
	return ERR_NONE;
     fd6:	2000      	movs	r0, #0
		break;
     fd8:	e7e8      	b.n	fac <usart_async_register_callback+0x3c>
     fda:	46c0      	nop			; (mov r8, r8)
     fdc:	00002904 	.word	0x00002904
     fe0:	00000fe9 	.word	0x00000fe9
     fe4:	000013f1 	.word	0x000013f1

00000fe8 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     fe8:	2800      	cmp	r0, #0
     fea:	d100      	bne.n	fee <assert+0x6>
		__asm("BKPT #0");
     fec:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     fee:	4770      	bx	lr

00000ff0 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
     ff0:	b570      	push	{r4, r5, r6, lr}
     ff2:	0004      	movs	r4, r0
     ff4:	000e      	movs	r6, r1
     ff6:	0015      	movs	r5, r2
	ASSERT(rb && buf && size);
     ff8:	2800      	cmp	r0, #0
     ffa:	d00b      	beq.n	1014 <ringbuffer_init+0x24>
     ffc:	2900      	cmp	r1, #0
     ffe:	d018      	beq.n	1032 <ringbuffer_init+0x42>
    1000:	2001      	movs	r0, #1
    1002:	2a00      	cmp	r2, #0
    1004:	d107      	bne.n	1016 <ringbuffer_init+0x26>
    1006:	2228      	movs	r2, #40	; 0x28
    1008:	490c      	ldr	r1, [pc, #48]	; (103c <ringbuffer_init+0x4c>)
    100a:	2000      	movs	r0, #0
    100c:	4b0c      	ldr	r3, [pc, #48]	; (1040 <ringbuffer_init+0x50>)
    100e:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    1010:	1e6b      	subs	r3, r5, #1
    1012:	e007      	b.n	1024 <ringbuffer_init+0x34>
	ASSERT(rb && buf && size);
    1014:	2000      	movs	r0, #0
    1016:	2228      	movs	r2, #40	; 0x28
    1018:	4908      	ldr	r1, [pc, #32]	; (103c <ringbuffer_init+0x4c>)
    101a:	4b09      	ldr	r3, [pc, #36]	; (1040 <ringbuffer_init+0x50>)
    101c:	4798      	blx	r3
	if ((size & (size - 1)) != 0) {
    101e:	1e6b      	subs	r3, r5, #1
    1020:	422b      	tst	r3, r5
    1022:	d108      	bne.n	1036 <ringbuffer_init+0x46>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    1024:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
    1026:	2300      	movs	r3, #0
    1028:	60a3      	str	r3, [r4, #8]
	rb->write_index = rb->read_index;
    102a:	60e3      	str	r3, [r4, #12]
	rb->buf         = (uint8_t *)buf;
    102c:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    102e:	2000      	movs	r0, #0
}
    1030:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    1032:	2000      	movs	r0, #0
    1034:	e7ef      	b.n	1016 <ringbuffer_init+0x26>
		return ERR_INVALID_ARG;
    1036:	200d      	movs	r0, #13
    1038:	4240      	negs	r0, r0
    103a:	e7f9      	b.n	1030 <ringbuffer_init+0x40>
    103c:	00002924 	.word	0x00002924
    1040:	00000fe9 	.word	0x00000fe9

00001044 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    1044:	b570      	push	{r4, r5, r6, lr}
    1046:	0004      	movs	r4, r0
    1048:	000d      	movs	r5, r1
	ASSERT(rb && data);
    104a:	2800      	cmp	r0, #0
    104c:	d015      	beq.n	107a <ringbuffer_get+0x36>
    104e:	0008      	movs	r0, r1
    1050:	1e43      	subs	r3, r0, #1
    1052:	4198      	sbcs	r0, r3
    1054:	b2c0      	uxtb	r0, r0
    1056:	2240      	movs	r2, #64	; 0x40
    1058:	490a      	ldr	r1, [pc, #40]	; (1084 <ringbuffer_get+0x40>)
    105a:	4b0b      	ldr	r3, [pc, #44]	; (1088 <ringbuffer_get+0x44>)
    105c:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    105e:	68a3      	ldr	r3, [r4, #8]
    1060:	68e2      	ldr	r2, [r4, #12]
    1062:	429a      	cmp	r2, r3
    1064:	d00b      	beq.n	107e <ringbuffer_get+0x3a>
		*data = rb->buf[rb->read_index & rb->size];
    1066:	6862      	ldr	r2, [r4, #4]
    1068:	4013      	ands	r3, r2
    106a:	6822      	ldr	r2, [r4, #0]
    106c:	5cd3      	ldrb	r3, [r2, r3]
    106e:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
    1070:	68a3      	ldr	r3, [r4, #8]
    1072:	3301      	adds	r3, #1
    1074:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
    1076:	2000      	movs	r0, #0
	}

	return ERR_NOT_FOUND;
}
    1078:	bd70      	pop	{r4, r5, r6, pc}
    107a:	2000      	movs	r0, #0
    107c:	e7eb      	b.n	1056 <ringbuffer_get+0x12>
	return ERR_NOT_FOUND;
    107e:	200a      	movs	r0, #10
    1080:	4240      	negs	r0, r0
    1082:	e7f9      	b.n	1078 <ringbuffer_get+0x34>
    1084:	00002924 	.word	0x00002924
    1088:	00000fe9 	.word	0x00000fe9

0000108c <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    108c:	b570      	push	{r4, r5, r6, lr}
    108e:	0004      	movs	r4, r0
    1090:	000d      	movs	r5, r1
	ASSERT(rb);
    1092:	1e43      	subs	r3, r0, #1
    1094:	4198      	sbcs	r0, r3
    1096:	b2c0      	uxtb	r0, r0
    1098:	2251      	movs	r2, #81	; 0x51
    109a:	490a      	ldr	r1, [pc, #40]	; (10c4 <ringbuffer_put+0x38>)
    109c:	4b0a      	ldr	r3, [pc, #40]	; (10c8 <ringbuffer_put+0x3c>)
    109e:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    10a0:	6863      	ldr	r3, [r4, #4]
    10a2:	68e2      	ldr	r2, [r4, #12]
    10a4:	4013      	ands	r3, r2
    10a6:	6822      	ldr	r2, [r4, #0]
    10a8:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    10aa:	68e3      	ldr	r3, [r4, #12]
    10ac:	6861      	ldr	r1, [r4, #4]
    10ae:	68a2      	ldr	r2, [r4, #8]
    10b0:	1a9a      	subs	r2, r3, r2
    10b2:	428a      	cmp	r2, r1
    10b4:	d901      	bls.n	10ba <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
    10b6:	1a59      	subs	r1, r3, r1
    10b8:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
    10ba:	3301      	adds	r3, #1
    10bc:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    10be:	2000      	movs	r0, #0
    10c0:	bd70      	pop	{r4, r5, r6, pc}
    10c2:	46c0      	nop			; (mov r8, r8)
    10c4:	00002924 	.word	0x00002924
    10c8:	00000fe9 	.word	0x00000fe9

000010cc <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    10cc:	b510      	push	{r4, lr}
    10ce:	0004      	movs	r4, r0
	ASSERT(rb);
    10d0:	1e43      	subs	r3, r0, #1
    10d2:	4198      	sbcs	r0, r3
    10d4:	b2c0      	uxtb	r0, r0
    10d6:	2267      	movs	r2, #103	; 0x67
    10d8:	4903      	ldr	r1, [pc, #12]	; (10e8 <ringbuffer_num+0x1c>)
    10da:	4b04      	ldr	r3, [pc, #16]	; (10ec <ringbuffer_num+0x20>)
    10dc:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    10de:	68e0      	ldr	r0, [r4, #12]
    10e0:	68a3      	ldr	r3, [r4, #8]
    10e2:	1ac0      	subs	r0, r0, r3
}
    10e4:	bd10      	pop	{r4, pc}
    10e6:	46c0      	nop			; (mov r8, r8)
    10e8:	00002924 	.word	0x00002924
    10ec:	00000fe9 	.word	0x00000fe9

000010f0 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    10f0:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    10f2:	4a06      	ldr	r2, [pc, #24]	; (110c <_sbrk+0x1c>)
    10f4:	6812      	ldr	r2, [r2, #0]
    10f6:	2a00      	cmp	r2, #0
    10f8:	d004      	beq.n	1104 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    10fa:	4a04      	ldr	r2, [pc, #16]	; (110c <_sbrk+0x1c>)
    10fc:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    10fe:	18c3      	adds	r3, r0, r3
    1100:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
    1102:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    1104:	4902      	ldr	r1, [pc, #8]	; (1110 <_sbrk+0x20>)
    1106:	4a01      	ldr	r2, [pc, #4]	; (110c <_sbrk+0x1c>)
    1108:	6011      	str	r1, [r2, #0]
    110a:	e7f6      	b.n	10fa <_sbrk+0xa>
    110c:	200001c4 	.word	0x200001c4
    1110:	20002248 	.word	0x20002248

00001114 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    1114:	b510      	push	{r4, lr}
    1116:	0003      	movs	r3, r0
		return (ms * (freq / 10000) + 2) / 3 * 10;
    1118:	2064      	movs	r0, #100	; 0x64
    111a:	4358      	muls	r0, r3
    111c:	3002      	adds	r0, #2
    111e:	2103      	movs	r1, #3
    1120:	4b03      	ldr	r3, [pc, #12]	; (1130 <_get_cycles_for_ms+0x1c>)
    1122:	4798      	blx	r3
    1124:	0003      	movs	r3, r0
    1126:	0080      	lsls	r0, r0, #2
    1128:	18c0      	adds	r0, r0, r3
    112a:	0040      	lsls	r0, r0, #1
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    112c:	bd10      	pop	{r4, pc}
    112e:	46c0      	nop			; (mov r8, r8)
    1130:	00001529 	.word	0x00001529

00001134 <_delay_cycles>:
{
#ifndef _UNIT_TEST_
	(void)hw;
	(void)cycles;
#if defined __GNUC__
	__asm(".syntax unified\n"
    1134:	3901      	subs	r1, #1
    1136:	d8fd      	bhi.n	1134 <_delay_cycles>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#endif
#endif
}
    1138:	4770      	bx	lr
	...

0000113c <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    113c:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
    113e:	4b06      	ldr	r3, [pc, #24]	; (1158 <_init_chip+0x1c>)
    1140:	685a      	ldr	r2, [r3, #4]
    1142:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
    1144:	4b05      	ldr	r3, [pc, #20]	; (115c <_init_chip+0x20>)
    1146:	4798      	blx	r3
	_sysctrl_init_sources();
    1148:	4b05      	ldr	r3, [pc, #20]	; (1160 <_init_chip+0x24>)
    114a:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_sysctrl_init_referenced_generators();
    114c:	4b05      	ldr	r3, [pc, #20]	; (1164 <_init_chip+0x28>)
    114e:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    1150:	20ff      	movs	r0, #255	; 0xff
    1152:	4b05      	ldr	r3, [pc, #20]	; (1168 <_init_chip+0x2c>)
    1154:	4798      	blx	r3
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
    1156:	bd10      	pop	{r4, pc}
    1158:	41004000 	.word	0x41004000
    115c:	000011a9 	.word	0x000011a9
    1160:	000014d1 	.word	0x000014d1
    1164:	00001519 	.word	0x00001519
    1168:	0000116d 	.word	0x0000116d

0000116c <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    116c:	07c3      	lsls	r3, r0, #31
    116e:	d50a      	bpl.n	1186 <_gclk_init_generators_by_fref+0x1a>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
    1170:	4b0b      	ldr	r3, [pc, #44]	; (11a0 <_gclk_init_generators_by_fref+0x34>)
    1172:	2280      	movs	r2, #128	; 0x80
    1174:	0052      	lsls	r2, r2, #1
    1176:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    1178:	2283      	movs	r2, #131	; 0x83
    117a:	0252      	lsls	r2, r2, #9
    117c:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    117e:	001a      	movs	r2, r3
    1180:	7853      	ldrb	r3, [r2, #1]
    1182:	09db      	lsrs	r3, r3, #7
    1184:	d1fc      	bne.n	1180 <_gclk_init_generators_by_fref+0x14>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SRC | GCLK_GENCTRL_ID(2));
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    1186:	0703      	lsls	r3, r0, #28
    1188:	d509      	bpl.n	119e <_gclk_init_generators_by_fref+0x32>
	((Gclk *)hw)->GENDIV.reg = data;
    118a:	4b05      	ldr	r3, [pc, #20]	; (11a0 <_gclk_init_generators_by_fref+0x34>)
    118c:	2204      	movs	r2, #4
    118e:	32ff      	adds	r2, #255	; 0xff
    1190:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
    1192:	4a04      	ldr	r2, [pc, #16]	; (11a4 <_gclk_init_generators_by_fref+0x38>)
    1194:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    1196:	001a      	movs	r2, r3
    1198:	7853      	ldrb	r3, [r2, #1]
    119a:	09db      	lsrs	r3, r3, #7
    119c:	d1fc      	bne.n	1198 <_gclk_init_generators_by_fref+0x2c>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
    119e:	4770      	bx	lr
    11a0:	40000c00 	.word	0x40000c00
    11a4:	00010303 	.word	0x00010303

000011a8 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
    11a8:	4b06      	ldr	r3, [pc, #24]	; (11c4 <_pm_init+0x1c>)
    11aa:	7a1a      	ldrb	r2, [r3, #8]
    11ac:	b2d2      	uxtb	r2, r2
    11ae:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
    11b0:	7a5a      	ldrb	r2, [r3, #9]
    11b2:	b2d2      	uxtb	r2, r2
    11b4:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
    11b6:	7a9a      	ldrb	r2, [r3, #10]
    11b8:	b2d2      	uxtb	r2, r2
    11ba:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
    11bc:	7ada      	ldrb	r2, [r3, #11]
    11be:	b2d2      	uxtb	r2, r2
    11c0:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
    11c2:	4770      	bx	lr
    11c4:	40000400 	.word	0x40000400

000011c8 <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    11c8:	b510      	push	{r4, lr}
    11ca:	1e04      	subs	r4, r0, #0
	uint16_t register_value;

	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    11cc:	d038      	beq.n	1240 <_calendar_init+0x78>
    11ce:	6800      	ldr	r0, [r0, #0]
    11d0:	1e43      	subs	r3, r0, #1
    11d2:	4198      	sbcs	r0, r3
    11d4:	b2c0      	uxtb	r0, r0
    11d6:	2278      	movs	r2, #120	; 0x78
    11d8:	491a      	ldr	r1, [pc, #104]	; (1244 <_calendar_init+0x7c>)
    11da:	4b1b      	ldr	r3, [pc, #108]	; (1248 <_calendar_init+0x80>)
    11dc:	4798      	blx	r3

	_rtc_dev = dev;
    11de:	4b1b      	ldr	r3, [pc, #108]	; (124c <_calendar_init+0x84>)
    11e0:	601c      	str	r4, [r3, #0]

	hri_rtcmode0_wait_for_sync(dev->hw);
    11e2:	6822      	ldr	r2, [r4, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    11e4:	7a93      	ldrb	r3, [r2, #10]
    11e6:	09db      	lsrs	r3, r3, #7
    11e8:	d1fc      	bne.n	11e4 <_calendar_init+0x1c>
    11ea:	7a93      	ldrb	r3, [r2, #10]
    11ec:	09db      	lsrs	r3, r3, #7
    11ee:	d1fc      	bne.n	11ea <_calendar_init+0x22>
	tmp = ((Rtc *)hw)->MODE0.CTRL.reg;
    11f0:	8813      	ldrh	r3, [r2, #0]
	if (hri_rtcmode0_get_CTRL_ENABLE_bit(dev->hw)) {
    11f2:	079b      	lsls	r3, r3, #30
    11f4:	d50a      	bpl.n	120c <_calendar_init+0x44>
	((Rtc *)hw)->MODE0.CTRL.reg &= ~RTC_MODE0_CTRL_ENABLE;
    11f6:	8813      	ldrh	r3, [r2, #0]
    11f8:	2102      	movs	r1, #2
    11fa:	438b      	bics	r3, r1
    11fc:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    11fe:	7a93      	ldrb	r3, [r2, #10]
    1200:	09db      	lsrs	r3, r3, #7
    1202:	d1fc      	bne.n	11fe <_calendar_init+0x36>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRL_ENABLE_bit(dev->hw);
		hri_rtcmode0_wait_for_sync(dev->hw);
    1204:	6822      	ldr	r2, [r4, #0]
    1206:	7a93      	ldrb	r3, [r2, #10]
    1208:	09db      	lsrs	r3, r3, #7
    120a:	d1fc      	bne.n	1206 <_calendar_init+0x3e>
#endif
	}
	hri_rtcmode0_set_CTRL_SWRST_bit(dev->hw);
    120c:	6822      	ldr	r2, [r4, #0]
	((Rtc *)hw)->MODE0.CTRL.reg |= RTC_MODE0_CTRL_SWRST;
    120e:	8813      	ldrh	r3, [r2, #0]
    1210:	2101      	movs	r1, #1
    1212:	430b      	orrs	r3, r1
    1214:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    1216:	7a93      	ldrb	r3, [r2, #10]
    1218:	09db      	lsrs	r3, r3, #7
    121a:	d1fc      	bne.n	1216 <_calendar_init+0x4e>
	hri_rtcmode0_wait_for_sync(dev->hw);
    121c:	6822      	ldr	r2, [r4, #0]
    121e:	7a93      	ldrb	r3, [r2, #10]
    1220:	09db      	lsrs	r3, r3, #7
    1222:	d1fc      	bne.n	121e <_calendar_init+0x56>
	((Rtc *)hw)->MODE0.CTRL.reg = data;
    1224:	23a0      	movs	r3, #160	; 0xa0
    1226:	011b      	lsls	r3, r3, #4
    1228:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    122a:	7a93      	ldrb	r3, [r2, #10]
    122c:	09db      	lsrs	r3, r3, #7
    122e:	d1fc      	bne.n	122a <_calendar_init+0x62>
	register_value &= (~RTC_MODE0_CTRL_MATCHCLR);

	hri_rtcmode0_write_CTRL_reg(dev->hw, register_value);

	/* set continuously clock read update mode */
	hri_rtcmode0_set_READREQ_RCONT_bit(dev->hw);
    1230:	6822      	ldr	r2, [r4, #0]
	((Rtc *)hw)->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
    1232:	8853      	ldrh	r3, [r2, #2]
    1234:	2180      	movs	r1, #128	; 0x80
    1236:	01c9      	lsls	r1, r1, #7
    1238:	430b      	orrs	r3, r1
    123a:	8053      	strh	r3, [r2, #2]
	        | (CONF_RTC_PEREO6 << RTC_MODE0_EVCTRL_PEREO6_Pos) | (CONF_RTC_PEREO7 << RTC_MODE0_EVCTRL_PEREO7_Pos)
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	return ERR_NONE;
}
    123c:	2000      	movs	r0, #0
    123e:	bd10      	pop	{r4, pc}
    1240:	2000      	movs	r0, #0
    1242:	e7c8      	b.n	11d6 <_calendar_init+0xe>
    1244:	00002948 	.word	0x00002948
    1248:	00000fe9 	.word	0x00000fe9
    124c:	200001c8 	.word	0x200001c8

00001250 <_calendar_enable>:

/**
 * \brief Enable the RTC module
 */
int32_t _calendar_enable(struct calendar_dev *const dev)
{
    1250:	b510      	push	{r4, lr}
    1252:	1e04      	subs	r4, r0, #0
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    1254:	d011      	beq.n	127a <_calendar_enable+0x2a>
    1256:	6800      	ldr	r0, [r0, #0]
    1258:	1e43      	subs	r3, r0, #1
    125a:	4198      	sbcs	r0, r3
    125c:	b2c0      	uxtb	r0, r0
    125e:	22aa      	movs	r2, #170	; 0xaa
    1260:	4907      	ldr	r1, [pc, #28]	; (1280 <_calendar_enable+0x30>)
    1262:	4b08      	ldr	r3, [pc, #32]	; (1284 <_calendar_enable+0x34>)
    1264:	4798      	blx	r3

	/* Enable rtc */
	hri_rtcmode0_set_CTRL_ENABLE_bit(dev->hw);
    1266:	6822      	ldr	r2, [r4, #0]
	((Rtc *)hw)->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE;
    1268:	8813      	ldrh	r3, [r2, #0]
    126a:	2102      	movs	r1, #2
    126c:	430b      	orrs	r3, r1
    126e:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    1270:	7a93      	ldrb	r3, [r2, #10]
    1272:	09db      	lsrs	r3, r3, #7
    1274:	d1fc      	bne.n	1270 <_calendar_enable+0x20>

	return ERR_NONE;
}
    1276:	2000      	movs	r0, #0
    1278:	bd10      	pop	{r4, pc}
    127a:	2000      	movs	r0, #0
    127c:	e7ef      	b.n	125e <_calendar_enable+0xe>
    127e:	46c0      	nop			; (mov r8, r8)
    1280:	00002948 	.word	0x00002948
    1284:	00000fe9 	.word	0x00000fe9

00001288 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    1288:	b510      	push	{r4, lr}
	_rtc_interrupt_handler(_rtc_dev);
    128a:	4b07      	ldr	r3, [pc, #28]	; (12a8 <RTC_Handler+0x20>)
    128c:	681c      	ldr	r4, [r3, #0]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    128e:	6823      	ldr	r3, [r4, #0]
    1290:	7a1b      	ldrb	r3, [r3, #8]
	if (interrupt_status & RTC_MODE0_INTFLAG_CMP0) {
    1292:	07db      	lsls	r3, r3, #31
    1294:	d400      	bmi.n	1298 <RTC_Handler+0x10>
}
    1296:	bd10      	pop	{r4, pc}
		dev->callback(dev);
    1298:	0020      	movs	r0, r4
    129a:	6863      	ldr	r3, [r4, #4]
    129c:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    129e:	6823      	ldr	r3, [r4, #0]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    12a0:	2201      	movs	r2, #1
    12a2:	721a      	strb	r2, [r3, #8]
}
    12a4:	e7f7      	b.n	1296 <RTC_Handler+0xe>
    12a6:	46c0      	nop			; (mov r8, r8)
    12a8:	200001c8 	.word	0x200001c8

000012ac <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
    12ac:	b510      	push	{r4, lr}
    12ae:	0004      	movs	r4, r0
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    12b0:	4b1f      	ldr	r3, [pc, #124]	; (1330 <_usart_init+0x84>)
    12b2:	18c3      	adds	r3, r0, r3
    12b4:	0a9b      	lsrs	r3, r3, #10
		if (_usarts[i].number == sercom_offset) {
    12b6:	b2db      	uxtb	r3, r3
    12b8:	2b03      	cmp	r3, #3
    12ba:	d004      	beq.n	12c6 <_usart_init+0x1a>
	ASSERT(false);
    12bc:	4a1d      	ldr	r2, [pc, #116]	; (1334 <_usart_init+0x88>)
    12be:	491e      	ldr	r1, [pc, #120]	; (1338 <_usart_init+0x8c>)
    12c0:	2000      	movs	r0, #0
    12c2:	4b1e      	ldr	r3, [pc, #120]	; (133c <_usart_init+0x90>)
    12c4:	4798      	blx	r3
	};
}

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    12c6:	69e3      	ldr	r3, [r4, #28]
	uint8_t i = _get_sercom_index(hw);

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    12c8:	07db      	lsls	r3, r3, #31
    12ca:	d418      	bmi.n	12fe <_usart_init+0x52>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    12cc:	2203      	movs	r2, #3
    12ce:	69e3      	ldr	r3, [r4, #28]
    12d0:	421a      	tst	r2, r3
    12d2:	d1fc      	bne.n	12ce <_usart_init+0x22>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    12d4:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    12d6:	079b      	lsls	r3, r3, #30
    12d8:	d50b      	bpl.n	12f2 <_usart_init+0x46>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    12da:	6823      	ldr	r3, [r4, #0]
    12dc:	2202      	movs	r2, #2
    12de:	4393      	bics	r3, r2
    12e0:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    12e2:	3201      	adds	r2, #1
    12e4:	69e3      	ldr	r3, [r4, #28]
    12e6:	421a      	tst	r2, r3
    12e8:	d1fc      	bne.n	12e4 <_usart_init+0x38>
    12ea:	2202      	movs	r2, #2
    12ec:	69e3      	ldr	r3, [r4, #28]
    12ee:	421a      	tst	r2, r3
    12f0:	d1fc      	bne.n	12ec <_usart_init+0x40>
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    12f2:	2305      	movs	r3, #5
    12f4:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    12f6:	2203      	movs	r2, #3
    12f8:	69e3      	ldr	r3, [r4, #28]
    12fa:	421a      	tst	r2, r3
    12fc:	d1fc      	bne.n	12f8 <_usart_init+0x4c>
    12fe:	2201      	movs	r2, #1
    1300:	69e3      	ldr	r3, [r4, #28]
    1302:	421a      	tst	r2, r3
    1304:	d1fc      	bne.n	1300 <_usart_init+0x54>
	((Sercom *)hw)->USART.CTRLA.reg = data;
    1306:	4b0e      	ldr	r3, [pc, #56]	; (1340 <_usart_init+0x94>)
    1308:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    130a:	2203      	movs	r2, #3
    130c:	69e3      	ldr	r3, [r4, #28]
    130e:	421a      	tst	r2, r3
    1310:	d1fc      	bne.n	130c <_usart_init+0x60>
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    1312:	23c0      	movs	r3, #192	; 0xc0
    1314:	029b      	lsls	r3, r3, #10
    1316:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1318:	2207      	movs	r2, #7
    131a:	69e3      	ldr	r3, [r4, #28]
    131c:	421a      	tst	r2, r3
    131e:	d1fc      	bne.n	131a <_usart_init+0x6e>
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
    1320:	4b08      	ldr	r3, [pc, #32]	; (1344 <_usart_init+0x98>)
    1322:	81a3      	strh	r3, [r4, #12]
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    1324:	2300      	movs	r3, #0
    1326:	73a3      	strb	r3, [r4, #14]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    1328:	2230      	movs	r2, #48	; 0x30
    132a:	54a3      	strb	r3, [r4, r2]

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);

	return ERR_NONE;
}
    132c:	2000      	movs	r0, #0
    132e:	bd10      	pop	{r4, pc}
    1330:	bdfff800 	.word	0xbdfff800
    1334:	0000025e 	.word	0x0000025e
    1338:	00002960 	.word	0x00002960
    133c:	00000fe9 	.word	0x00000fe9
    1340:	40100004 	.word	0x40100004
    1344:	ffffd8ad 	.word	0xffffd8ad

00001348 <_usart_async_init>:
{
    1348:	b570      	push	{r4, r5, r6, lr}
    134a:	0005      	movs	r5, r0
    134c:	000c      	movs	r4, r1
	ASSERT(device);
    134e:	1e43      	subs	r3, r0, #1
    1350:	4198      	sbcs	r0, r3
    1352:	b2c0      	uxtb	r0, r0
    1354:	22c4      	movs	r2, #196	; 0xc4
    1356:	4914      	ldr	r1, [pc, #80]	; (13a8 <_usart_async_init+0x60>)
    1358:	4b14      	ldr	r3, [pc, #80]	; (13ac <_usart_async_init+0x64>)
    135a:	4798      	blx	r3
	init_status = _usart_init(hw);
    135c:	0020      	movs	r0, r4
    135e:	4b14      	ldr	r3, [pc, #80]	; (13b0 <_usart_async_init+0x68>)
    1360:	4798      	blx	r3
	if (init_status) {
    1362:	2800      	cmp	r0, #0
    1364:	d000      	beq.n	1368 <_usart_async_init+0x20>
}
    1366:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
    1368:	61ac      	str	r4, [r5, #24]
	if (hw == SERCOM3) {
    136a:	4b12      	ldr	r3, [pc, #72]	; (13b4 <_usart_async_init+0x6c>)
    136c:	429c      	cmp	r4, r3
    136e:	d017      	beq.n	13a0 <_usart_async_init+0x58>
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    1370:	4b11      	ldr	r3, [pc, #68]	; (13b8 <_usart_async_init+0x70>)
    1372:	469c      	mov	ip, r3
    1374:	4464      	add	r4, ip
    1376:	0aa4      	lsrs	r4, r4, #10
/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
    1378:	3409      	adds	r4, #9
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    137a:	b2e3      	uxtb	r3, r4
    137c:	0622      	lsls	r2, r4, #24
    137e:	d4f2      	bmi.n	1366 <_usart_async_init+0x1e>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1380:	221f      	movs	r2, #31
    1382:	401a      	ands	r2, r3
    1384:	2301      	movs	r3, #1
    1386:	4093      	lsls	r3, r2
    1388:	4a0c      	ldr	r2, [pc, #48]	; (13bc <_usart_async_init+0x74>)
    138a:	2180      	movs	r1, #128	; 0x80
    138c:	5053      	str	r3, [r2, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    138e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1392:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1396:	3101      	adds	r1, #1
    1398:	31ff      	adds	r1, #255	; 0xff
    139a:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    139c:	6013      	str	r3, [r2, #0]
    139e:	e7e2      	b.n	1366 <_usart_async_init+0x1e>
		_sercom3_dev = (struct _usart_async_device *)dev;
    13a0:	4b07      	ldr	r3, [pc, #28]	; (13c0 <_usart_async_init+0x78>)
    13a2:	601d      	str	r5, [r3, #0]
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
    13a4:	230c      	movs	r3, #12
    13a6:	e7eb      	b.n	1380 <_usart_async_init+0x38>
    13a8:	00002960 	.word	0x00002960
    13ac:	00000fe9 	.word	0x00000fe9
    13b0:	000012ad 	.word	0x000012ad
    13b4:	42001400 	.word	0x42001400
    13b8:	bdfff800 	.word	0xbdfff800
    13bc:	e000e100 	.word	0xe000e100
    13c0:	200001cc 	.word	0x200001cc

000013c4 <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    13c4:	6982      	ldr	r2, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    13c6:	6813      	ldr	r3, [r2, #0]
    13c8:	2102      	movs	r1, #2
    13ca:	430b      	orrs	r3, r1
    13cc:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    13ce:	3101      	adds	r1, #1
    13d0:	69d3      	ldr	r3, [r2, #28]
    13d2:	4219      	tst	r1, r3
    13d4:	d1fc      	bne.n	13d0 <_usart_async_enable+0xc>
}
    13d6:	4770      	bx	lr

000013d8 <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    13d8:	6983      	ldr	r3, [r0, #24]
    13da:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
    13dc:	8519      	strh	r1, [r3, #40]	; 0x28
}
    13de:	4770      	bx	lr

000013e0 <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    13e0:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    13e2:	2201      	movs	r2, #1
    13e4:	759a      	strb	r2, [r3, #22]
}
    13e6:	4770      	bx	lr

000013e8 <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    13e8:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    13ea:	2202      	movs	r2, #2
    13ec:	759a      	strb	r2, [r3, #22]
}
    13ee:	4770      	bx	lr

000013f0 <_usart_async_set_irq_state>:
{
    13f0:	b570      	push	{r4, r5, r6, lr}
    13f2:	0004      	movs	r4, r0
    13f4:	000d      	movs	r5, r1
    13f6:	0016      	movs	r6, r2
	ASSERT(device);
    13f8:	1e43      	subs	r3, r0, #1
    13fa:	4198      	sbcs	r0, r3
    13fc:	b2c0      	uxtb	r0, r0
    13fe:	4a16      	ldr	r2, [pc, #88]	; (1458 <_usart_async_set_irq_state+0x68>)
    1400:	4916      	ldr	r1, [pc, #88]	; (145c <_usart_async_set_irq_state+0x6c>)
    1402:	4b17      	ldr	r3, [pc, #92]	; (1460 <_usart_async_set_irq_state+0x70>)
    1404:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
    1406:	2302      	movs	r3, #2
    1408:	002a      	movs	r2, r5
    140a:	439a      	bics	r2, r3
    140c:	d10e      	bne.n	142c <_usart_async_set_irq_state+0x3c>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
    140e:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
    1410:	2e00      	cmp	r6, #0
    1412:	d105      	bne.n	1420 <_usart_async_set_irq_state+0x30>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    1414:	2201      	movs	r2, #1
    1416:	751a      	strb	r2, [r3, #20]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    1418:	69a3      	ldr	r3, [r4, #24]
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    141a:	3201      	adds	r2, #1
    141c:	751a      	strb	r2, [r3, #20]
}
    141e:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    1420:	2201      	movs	r2, #1
    1422:	759a      	strb	r2, [r3, #22]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    1424:	69a3      	ldr	r3, [r4, #24]
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    1426:	3201      	adds	r2, #1
    1428:	759a      	strb	r2, [r3, #22]
    142a:	e7f8      	b.n	141e <_usart_async_set_irq_state+0x2e>
	} else if (USART_ASYNC_RX_DONE == type) {
    142c:	2d01      	cmp	r5, #1
    142e:	d007      	beq.n	1440 <_usart_async_set_irq_state+0x50>
	} else if (USART_ASYNC_ERROR == type) {
    1430:	2d03      	cmp	r5, #3
    1432:	d1f4      	bne.n	141e <_usart_async_set_irq_state+0x2e>
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
    1434:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
    1436:	2e00      	cmp	r6, #0
    1438:	d00b      	beq.n	1452 <_usart_async_set_irq_state+0x62>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
    143a:	2280      	movs	r2, #128	; 0x80
    143c:	759a      	strb	r2, [r3, #22]
}
    143e:	e7ee      	b.n	141e <_usart_async_set_irq_state+0x2e>
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
    1440:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
    1442:	2e00      	cmp	r6, #0
    1444:	d102      	bne.n	144c <_usart_async_set_irq_state+0x5c>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
    1446:	2204      	movs	r2, #4
    1448:	751a      	strb	r2, [r3, #20]
    144a:	e7e8      	b.n	141e <_usart_async_set_irq_state+0x2e>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    144c:	2204      	movs	r2, #4
    144e:	759a      	strb	r2, [r3, #22]
    1450:	e7e5      	b.n	141e <_usart_async_set_irq_state+0x2e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
    1452:	2280      	movs	r2, #128	; 0x80
    1454:	751a      	strb	r2, [r3, #20]
    1456:	e7e2      	b.n	141e <_usart_async_set_irq_state+0x2e>
    1458:	0000021e 	.word	0x0000021e
    145c:	00002960 	.word	0x00002960
    1460:	00000fe9 	.word	0x00000fe9

00001464 <SERCOM3_Handler>:

	return NULL;
}

void SERCOM3_Handler(void)
{
    1464:	b510      	push	{r4, lr}
	_sercom_usart_interrupt_handler(_sercom3_dev);
    1466:	4b19      	ldr	r3, [pc, #100]	; (14cc <SERCOM3_Handler+0x68>)
    1468:	6818      	ldr	r0, [r3, #0]
	void *hw = device->hw;
    146a:	6984      	ldr	r4, [r0, #24]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    146c:	7e23      	ldrb	r3, [r4, #24]
	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    146e:	07db      	lsls	r3, r3, #31
    1470:	d502      	bpl.n	1478 <SERCOM3_Handler+0x14>
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    1472:	7da3      	ldrb	r3, [r4, #22]
    1474:	07db      	lsls	r3, r3, #31
    1476:	d40f      	bmi.n	1498 <SERCOM3_Handler+0x34>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    1478:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    147a:	079b      	lsls	r3, r3, #30
    147c:	d502      	bpl.n	1484 <SERCOM3_Handler+0x20>
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    147e:	7da3      	ldrb	r3, [r4, #22]
    1480:	079b      	lsls	r3, r3, #30
    1482:	d40e      	bmi.n	14a2 <SERCOM3_Handler+0x3e>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    1484:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    1486:	075b      	lsls	r3, r3, #29
    1488:	d515      	bpl.n	14b6 <SERCOM3_Handler+0x52>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
    148a:	8b62      	ldrh	r2, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
    148c:	2337      	movs	r3, #55	; 0x37
    148e:	421a      	tst	r2, r3
    1490:	d00c      	beq.n	14ac <SERCOM3_Handler+0x48>
	((Sercom *)hw)->USART.STATUS.reg = mask;
    1492:	3308      	adds	r3, #8
    1494:	8363      	strh	r3, [r4, #26]
}
    1496:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    1498:	2301      	movs	r3, #1
    149a:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
    149c:	6803      	ldr	r3, [r0, #0]
    149e:	4798      	blx	r3
    14a0:	e7f9      	b.n	1496 <SERCOM3_Handler+0x32>
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    14a2:	2302      	movs	r3, #2
    14a4:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
    14a6:	6883      	ldr	r3, [r0, #8]
    14a8:	4798      	blx	r3
    14aa:	e7f4      	b.n	1496 <SERCOM3_Handler+0x32>
	return ((Sercom *)hw)->USART.DATA.reg;
    14ac:	8d21      	ldrh	r1, [r4, #40]	; 0x28
		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    14ae:	b2c9      	uxtb	r1, r1
    14b0:	6843      	ldr	r3, [r0, #4]
    14b2:	4798      	blx	r3
    14b4:	e7ef      	b.n	1496 <SERCOM3_Handler+0x32>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    14b6:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    14b8:	09db      	lsrs	r3, r3, #7
    14ba:	d0ec      	beq.n	1496 <SERCOM3_Handler+0x32>
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    14bc:	2380      	movs	r3, #128	; 0x80
    14be:	7623      	strb	r3, [r4, #24]
		device->usart_cb.error_cb(device);
    14c0:	68c3      	ldr	r3, [r0, #12]
    14c2:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
    14c4:	8b63      	ldrh	r3, [r4, #26]
    14c6:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
    14c8:	8363      	strh	r3, [r4, #26]
}
    14ca:	e7e4      	b.n	1496 <SERCOM3_Handler+0x32>
    14cc:	200001cc 	.word	0x200001cc

000014d0 <_sysctrl_init_sources>:
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    14d0:	4b0e      	ldr	r3, [pc, #56]	; (150c <_sysctrl_init_sources+0x3c>)
    14d2:	6a1a      	ldr	r2, [r3, #32]
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    14d4:	6a19      	ldr	r1, [r3, #32]
	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
    14d6:	480e      	ldr	r0, [pc, #56]	; (1510 <_sysctrl_init_sources+0x40>)
    14d8:	4002      	ands	r2, r0
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    14da:	0f89      	lsrs	r1, r1, #30
    14dc:	0789      	lsls	r1, r1, #30
	hri_sysctrl_write_OSC8M_reg(hw,
    14de:	480d      	ldr	r0, [pc, #52]	; (1514 <_sysctrl_init_sources+0x44>)
    14e0:	4301      	orrs	r1, r0
    14e2:	430a      	orrs	r2, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
    14e4:	621a      	str	r2, [r3, #32]
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    14e6:	699a      	ldr	r2, [r3, #24]
    14e8:	2102      	movs	r1, #2
    14ea:	430a      	orrs	r2, r1
    14ec:	619a      	str	r2, [r3, #24]
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
    14ee:	7f1a      	ldrb	r2, [r3, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
    14f0:	311d      	adds	r1, #29
    14f2:	400a      	ands	r2, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
    14f4:	771a      	strb	r2, [r3, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    14f6:	0019      	movs	r1, r3
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    14f8:	2208      	movs	r2, #8
    14fa:	68cb      	ldr	r3, [r1, #12]
    14fc:	421a      	tst	r2, r3
    14fe:	d0fc      	beq.n	14fa <_sysctrl_init_sources+0x2a>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
    1500:	4a02      	ldr	r2, [pc, #8]	; (150c <_sysctrl_init_sources+0x3c>)
    1502:	6a13      	ldr	r3, [r2, #32]
    1504:	2180      	movs	r1, #128	; 0x80
    1506:	430b      	orrs	r3, r1
    1508:	6213      	str	r3, [r2, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
    150a:	4770      	bx	lr
    150c:	40000800 	.word	0x40000800
    1510:	0fff0000 	.word	0x0fff0000
    1514:	00000302 	.word	0x00000302

00001518 <_sysctrl_init_referenced_generators>:
	((Sysctrl *)hw)->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
    1518:	4a02      	ldr	r2, [pc, #8]	; (1524 <_sysctrl_init_referenced_generators+0xc>)
    151a:	6993      	ldr	r3, [r2, #24]
    151c:	2102      	movs	r1, #2
    151e:	438b      	bics	r3, r1
    1520:	6193      	str	r3, [r2, #24]
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    1522:	4770      	bx	lr
    1524:	40000800 	.word	0x40000800

00001528 <__udivsi3>:
    1528:	2200      	movs	r2, #0
    152a:	0843      	lsrs	r3, r0, #1
    152c:	428b      	cmp	r3, r1
    152e:	d374      	bcc.n	161a <__udivsi3+0xf2>
    1530:	0903      	lsrs	r3, r0, #4
    1532:	428b      	cmp	r3, r1
    1534:	d35f      	bcc.n	15f6 <__udivsi3+0xce>
    1536:	0a03      	lsrs	r3, r0, #8
    1538:	428b      	cmp	r3, r1
    153a:	d344      	bcc.n	15c6 <__udivsi3+0x9e>
    153c:	0b03      	lsrs	r3, r0, #12
    153e:	428b      	cmp	r3, r1
    1540:	d328      	bcc.n	1594 <__udivsi3+0x6c>
    1542:	0c03      	lsrs	r3, r0, #16
    1544:	428b      	cmp	r3, r1
    1546:	d30d      	bcc.n	1564 <__udivsi3+0x3c>
    1548:	22ff      	movs	r2, #255	; 0xff
    154a:	0209      	lsls	r1, r1, #8
    154c:	ba12      	rev	r2, r2
    154e:	0c03      	lsrs	r3, r0, #16
    1550:	428b      	cmp	r3, r1
    1552:	d302      	bcc.n	155a <__udivsi3+0x32>
    1554:	1212      	asrs	r2, r2, #8
    1556:	0209      	lsls	r1, r1, #8
    1558:	d065      	beq.n	1626 <__udivsi3+0xfe>
    155a:	0b03      	lsrs	r3, r0, #12
    155c:	428b      	cmp	r3, r1
    155e:	d319      	bcc.n	1594 <__udivsi3+0x6c>
    1560:	e000      	b.n	1564 <__udivsi3+0x3c>
    1562:	0a09      	lsrs	r1, r1, #8
    1564:	0bc3      	lsrs	r3, r0, #15
    1566:	428b      	cmp	r3, r1
    1568:	d301      	bcc.n	156e <__udivsi3+0x46>
    156a:	03cb      	lsls	r3, r1, #15
    156c:	1ac0      	subs	r0, r0, r3
    156e:	4152      	adcs	r2, r2
    1570:	0b83      	lsrs	r3, r0, #14
    1572:	428b      	cmp	r3, r1
    1574:	d301      	bcc.n	157a <__udivsi3+0x52>
    1576:	038b      	lsls	r3, r1, #14
    1578:	1ac0      	subs	r0, r0, r3
    157a:	4152      	adcs	r2, r2
    157c:	0b43      	lsrs	r3, r0, #13
    157e:	428b      	cmp	r3, r1
    1580:	d301      	bcc.n	1586 <__udivsi3+0x5e>
    1582:	034b      	lsls	r3, r1, #13
    1584:	1ac0      	subs	r0, r0, r3
    1586:	4152      	adcs	r2, r2
    1588:	0b03      	lsrs	r3, r0, #12
    158a:	428b      	cmp	r3, r1
    158c:	d301      	bcc.n	1592 <__udivsi3+0x6a>
    158e:	030b      	lsls	r3, r1, #12
    1590:	1ac0      	subs	r0, r0, r3
    1592:	4152      	adcs	r2, r2
    1594:	0ac3      	lsrs	r3, r0, #11
    1596:	428b      	cmp	r3, r1
    1598:	d301      	bcc.n	159e <__udivsi3+0x76>
    159a:	02cb      	lsls	r3, r1, #11
    159c:	1ac0      	subs	r0, r0, r3
    159e:	4152      	adcs	r2, r2
    15a0:	0a83      	lsrs	r3, r0, #10
    15a2:	428b      	cmp	r3, r1
    15a4:	d301      	bcc.n	15aa <__udivsi3+0x82>
    15a6:	028b      	lsls	r3, r1, #10
    15a8:	1ac0      	subs	r0, r0, r3
    15aa:	4152      	adcs	r2, r2
    15ac:	0a43      	lsrs	r3, r0, #9
    15ae:	428b      	cmp	r3, r1
    15b0:	d301      	bcc.n	15b6 <__udivsi3+0x8e>
    15b2:	024b      	lsls	r3, r1, #9
    15b4:	1ac0      	subs	r0, r0, r3
    15b6:	4152      	adcs	r2, r2
    15b8:	0a03      	lsrs	r3, r0, #8
    15ba:	428b      	cmp	r3, r1
    15bc:	d301      	bcc.n	15c2 <__udivsi3+0x9a>
    15be:	020b      	lsls	r3, r1, #8
    15c0:	1ac0      	subs	r0, r0, r3
    15c2:	4152      	adcs	r2, r2
    15c4:	d2cd      	bcs.n	1562 <__udivsi3+0x3a>
    15c6:	09c3      	lsrs	r3, r0, #7
    15c8:	428b      	cmp	r3, r1
    15ca:	d301      	bcc.n	15d0 <__udivsi3+0xa8>
    15cc:	01cb      	lsls	r3, r1, #7
    15ce:	1ac0      	subs	r0, r0, r3
    15d0:	4152      	adcs	r2, r2
    15d2:	0983      	lsrs	r3, r0, #6
    15d4:	428b      	cmp	r3, r1
    15d6:	d301      	bcc.n	15dc <__udivsi3+0xb4>
    15d8:	018b      	lsls	r3, r1, #6
    15da:	1ac0      	subs	r0, r0, r3
    15dc:	4152      	adcs	r2, r2
    15de:	0943      	lsrs	r3, r0, #5
    15e0:	428b      	cmp	r3, r1
    15e2:	d301      	bcc.n	15e8 <__udivsi3+0xc0>
    15e4:	014b      	lsls	r3, r1, #5
    15e6:	1ac0      	subs	r0, r0, r3
    15e8:	4152      	adcs	r2, r2
    15ea:	0903      	lsrs	r3, r0, #4
    15ec:	428b      	cmp	r3, r1
    15ee:	d301      	bcc.n	15f4 <__udivsi3+0xcc>
    15f0:	010b      	lsls	r3, r1, #4
    15f2:	1ac0      	subs	r0, r0, r3
    15f4:	4152      	adcs	r2, r2
    15f6:	08c3      	lsrs	r3, r0, #3
    15f8:	428b      	cmp	r3, r1
    15fa:	d301      	bcc.n	1600 <__udivsi3+0xd8>
    15fc:	00cb      	lsls	r3, r1, #3
    15fe:	1ac0      	subs	r0, r0, r3
    1600:	4152      	adcs	r2, r2
    1602:	0883      	lsrs	r3, r0, #2
    1604:	428b      	cmp	r3, r1
    1606:	d301      	bcc.n	160c <__udivsi3+0xe4>
    1608:	008b      	lsls	r3, r1, #2
    160a:	1ac0      	subs	r0, r0, r3
    160c:	4152      	adcs	r2, r2
    160e:	0843      	lsrs	r3, r0, #1
    1610:	428b      	cmp	r3, r1
    1612:	d301      	bcc.n	1618 <__udivsi3+0xf0>
    1614:	004b      	lsls	r3, r1, #1
    1616:	1ac0      	subs	r0, r0, r3
    1618:	4152      	adcs	r2, r2
    161a:	1a41      	subs	r1, r0, r1
    161c:	d200      	bcs.n	1620 <__udivsi3+0xf8>
    161e:	4601      	mov	r1, r0
    1620:	4152      	adcs	r2, r2
    1622:	4610      	mov	r0, r2
    1624:	4770      	bx	lr
    1626:	e7ff      	b.n	1628 <__udivsi3+0x100>
    1628:	b501      	push	{r0, lr}
    162a:	2000      	movs	r0, #0
    162c:	f000 f806 	bl	163c <__aeabi_idiv0>
    1630:	bd02      	pop	{r1, pc}
    1632:	46c0      	nop			; (mov r8, r8)

00001634 <__aeabi_uidivmod>:
    1634:	2900      	cmp	r1, #0
    1636:	d0f7      	beq.n	1628 <__udivsi3+0x100>
    1638:	e776      	b.n	1528 <__udivsi3>
    163a:	4770      	bx	lr

0000163c <__aeabi_idiv0>:
    163c:	4770      	bx	lr
    163e:	46c0      	nop			; (mov r8, r8)

00001640 <__aeabi_dmul>:
    1640:	b5f0      	push	{r4, r5, r6, r7, lr}
    1642:	4657      	mov	r7, sl
    1644:	4645      	mov	r5, r8
    1646:	46de      	mov	lr, fp
    1648:	464e      	mov	r6, r9
    164a:	b5e0      	push	{r5, r6, r7, lr}
    164c:	030c      	lsls	r4, r1, #12
    164e:	4698      	mov	r8, r3
    1650:	004e      	lsls	r6, r1, #1
    1652:	0b23      	lsrs	r3, r4, #12
    1654:	b087      	sub	sp, #28
    1656:	0007      	movs	r7, r0
    1658:	4692      	mov	sl, r2
    165a:	469b      	mov	fp, r3
    165c:	0d76      	lsrs	r6, r6, #21
    165e:	0fcd      	lsrs	r5, r1, #31
    1660:	2e00      	cmp	r6, #0
    1662:	d06b      	beq.n	173c <__aeabi_dmul+0xfc>
    1664:	4b6d      	ldr	r3, [pc, #436]	; (181c <__aeabi_dmul+0x1dc>)
    1666:	429e      	cmp	r6, r3
    1668:	d035      	beq.n	16d6 <__aeabi_dmul+0x96>
    166a:	2480      	movs	r4, #128	; 0x80
    166c:	465b      	mov	r3, fp
    166e:	0f42      	lsrs	r2, r0, #29
    1670:	0424      	lsls	r4, r4, #16
    1672:	00db      	lsls	r3, r3, #3
    1674:	4314      	orrs	r4, r2
    1676:	431c      	orrs	r4, r3
    1678:	00c3      	lsls	r3, r0, #3
    167a:	4699      	mov	r9, r3
    167c:	4b68      	ldr	r3, [pc, #416]	; (1820 <__aeabi_dmul+0x1e0>)
    167e:	46a3      	mov	fp, r4
    1680:	469c      	mov	ip, r3
    1682:	2300      	movs	r3, #0
    1684:	2700      	movs	r7, #0
    1686:	4466      	add	r6, ip
    1688:	9302      	str	r3, [sp, #8]
    168a:	4643      	mov	r3, r8
    168c:	031c      	lsls	r4, r3, #12
    168e:	005a      	lsls	r2, r3, #1
    1690:	0fdb      	lsrs	r3, r3, #31
    1692:	4650      	mov	r0, sl
    1694:	0b24      	lsrs	r4, r4, #12
    1696:	0d52      	lsrs	r2, r2, #21
    1698:	4698      	mov	r8, r3
    169a:	d100      	bne.n	169e <__aeabi_dmul+0x5e>
    169c:	e076      	b.n	178c <__aeabi_dmul+0x14c>
    169e:	4b5f      	ldr	r3, [pc, #380]	; (181c <__aeabi_dmul+0x1dc>)
    16a0:	429a      	cmp	r2, r3
    16a2:	d06d      	beq.n	1780 <__aeabi_dmul+0x140>
    16a4:	2380      	movs	r3, #128	; 0x80
    16a6:	0f41      	lsrs	r1, r0, #29
    16a8:	041b      	lsls	r3, r3, #16
    16aa:	430b      	orrs	r3, r1
    16ac:	495c      	ldr	r1, [pc, #368]	; (1820 <__aeabi_dmul+0x1e0>)
    16ae:	00e4      	lsls	r4, r4, #3
    16b0:	468c      	mov	ip, r1
    16b2:	431c      	orrs	r4, r3
    16b4:	00c3      	lsls	r3, r0, #3
    16b6:	2000      	movs	r0, #0
    16b8:	4462      	add	r2, ip
    16ba:	4641      	mov	r1, r8
    16bc:	18b6      	adds	r6, r6, r2
    16be:	4069      	eors	r1, r5
    16c0:	1c72      	adds	r2, r6, #1
    16c2:	9101      	str	r1, [sp, #4]
    16c4:	4694      	mov	ip, r2
    16c6:	4307      	orrs	r7, r0
    16c8:	2f0f      	cmp	r7, #15
    16ca:	d900      	bls.n	16ce <__aeabi_dmul+0x8e>
    16cc:	e0b0      	b.n	1830 <__aeabi_dmul+0x1f0>
    16ce:	4a55      	ldr	r2, [pc, #340]	; (1824 <__aeabi_dmul+0x1e4>)
    16d0:	00bf      	lsls	r7, r7, #2
    16d2:	59d2      	ldr	r2, [r2, r7]
    16d4:	4697      	mov	pc, r2
    16d6:	465b      	mov	r3, fp
    16d8:	4303      	orrs	r3, r0
    16da:	4699      	mov	r9, r3
    16dc:	d000      	beq.n	16e0 <__aeabi_dmul+0xa0>
    16de:	e087      	b.n	17f0 <__aeabi_dmul+0x1b0>
    16e0:	2300      	movs	r3, #0
    16e2:	469b      	mov	fp, r3
    16e4:	3302      	adds	r3, #2
    16e6:	2708      	movs	r7, #8
    16e8:	9302      	str	r3, [sp, #8]
    16ea:	e7ce      	b.n	168a <__aeabi_dmul+0x4a>
    16ec:	4642      	mov	r2, r8
    16ee:	9201      	str	r2, [sp, #4]
    16f0:	2802      	cmp	r0, #2
    16f2:	d067      	beq.n	17c4 <__aeabi_dmul+0x184>
    16f4:	2803      	cmp	r0, #3
    16f6:	d100      	bne.n	16fa <__aeabi_dmul+0xba>
    16f8:	e20e      	b.n	1b18 <__aeabi_dmul+0x4d8>
    16fa:	2801      	cmp	r0, #1
    16fc:	d000      	beq.n	1700 <__aeabi_dmul+0xc0>
    16fe:	e162      	b.n	19c6 <__aeabi_dmul+0x386>
    1700:	2300      	movs	r3, #0
    1702:	2400      	movs	r4, #0
    1704:	2200      	movs	r2, #0
    1706:	4699      	mov	r9, r3
    1708:	9901      	ldr	r1, [sp, #4]
    170a:	4001      	ands	r1, r0
    170c:	b2cd      	uxtb	r5, r1
    170e:	2100      	movs	r1, #0
    1710:	0312      	lsls	r2, r2, #12
    1712:	0d0b      	lsrs	r3, r1, #20
    1714:	0b12      	lsrs	r2, r2, #12
    1716:	051b      	lsls	r3, r3, #20
    1718:	4313      	orrs	r3, r2
    171a:	4a43      	ldr	r2, [pc, #268]	; (1828 <__aeabi_dmul+0x1e8>)
    171c:	0524      	lsls	r4, r4, #20
    171e:	4013      	ands	r3, r2
    1720:	431c      	orrs	r4, r3
    1722:	0064      	lsls	r4, r4, #1
    1724:	07ed      	lsls	r5, r5, #31
    1726:	0864      	lsrs	r4, r4, #1
    1728:	432c      	orrs	r4, r5
    172a:	4648      	mov	r0, r9
    172c:	0021      	movs	r1, r4
    172e:	b007      	add	sp, #28
    1730:	bc3c      	pop	{r2, r3, r4, r5}
    1732:	4690      	mov	r8, r2
    1734:	4699      	mov	r9, r3
    1736:	46a2      	mov	sl, r4
    1738:	46ab      	mov	fp, r5
    173a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    173c:	4303      	orrs	r3, r0
    173e:	4699      	mov	r9, r3
    1740:	d04f      	beq.n	17e2 <__aeabi_dmul+0x1a2>
    1742:	465b      	mov	r3, fp
    1744:	2b00      	cmp	r3, #0
    1746:	d100      	bne.n	174a <__aeabi_dmul+0x10a>
    1748:	e189      	b.n	1a5e <__aeabi_dmul+0x41e>
    174a:	4658      	mov	r0, fp
    174c:	f000 fb4a 	bl	1de4 <__clzsi2>
    1750:	0003      	movs	r3, r0
    1752:	3b0b      	subs	r3, #11
    1754:	2b1c      	cmp	r3, #28
    1756:	dd00      	ble.n	175a <__aeabi_dmul+0x11a>
    1758:	e17a      	b.n	1a50 <__aeabi_dmul+0x410>
    175a:	221d      	movs	r2, #29
    175c:	1ad3      	subs	r3, r2, r3
    175e:	003a      	movs	r2, r7
    1760:	0001      	movs	r1, r0
    1762:	465c      	mov	r4, fp
    1764:	40da      	lsrs	r2, r3
    1766:	3908      	subs	r1, #8
    1768:	408c      	lsls	r4, r1
    176a:	0013      	movs	r3, r2
    176c:	408f      	lsls	r7, r1
    176e:	4323      	orrs	r3, r4
    1770:	469b      	mov	fp, r3
    1772:	46b9      	mov	r9, r7
    1774:	2300      	movs	r3, #0
    1776:	4e2d      	ldr	r6, [pc, #180]	; (182c <__aeabi_dmul+0x1ec>)
    1778:	2700      	movs	r7, #0
    177a:	1a36      	subs	r6, r6, r0
    177c:	9302      	str	r3, [sp, #8]
    177e:	e784      	b.n	168a <__aeabi_dmul+0x4a>
    1780:	4653      	mov	r3, sl
    1782:	4323      	orrs	r3, r4
    1784:	d12a      	bne.n	17dc <__aeabi_dmul+0x19c>
    1786:	2400      	movs	r4, #0
    1788:	2002      	movs	r0, #2
    178a:	e796      	b.n	16ba <__aeabi_dmul+0x7a>
    178c:	4653      	mov	r3, sl
    178e:	4323      	orrs	r3, r4
    1790:	d020      	beq.n	17d4 <__aeabi_dmul+0x194>
    1792:	2c00      	cmp	r4, #0
    1794:	d100      	bne.n	1798 <__aeabi_dmul+0x158>
    1796:	e157      	b.n	1a48 <__aeabi_dmul+0x408>
    1798:	0020      	movs	r0, r4
    179a:	f000 fb23 	bl	1de4 <__clzsi2>
    179e:	0003      	movs	r3, r0
    17a0:	3b0b      	subs	r3, #11
    17a2:	2b1c      	cmp	r3, #28
    17a4:	dd00      	ble.n	17a8 <__aeabi_dmul+0x168>
    17a6:	e149      	b.n	1a3c <__aeabi_dmul+0x3fc>
    17a8:	211d      	movs	r1, #29
    17aa:	1acb      	subs	r3, r1, r3
    17ac:	4651      	mov	r1, sl
    17ae:	0002      	movs	r2, r0
    17b0:	40d9      	lsrs	r1, r3
    17b2:	4653      	mov	r3, sl
    17b4:	3a08      	subs	r2, #8
    17b6:	4094      	lsls	r4, r2
    17b8:	4093      	lsls	r3, r2
    17ba:	430c      	orrs	r4, r1
    17bc:	4a1b      	ldr	r2, [pc, #108]	; (182c <__aeabi_dmul+0x1ec>)
    17be:	1a12      	subs	r2, r2, r0
    17c0:	2000      	movs	r0, #0
    17c2:	e77a      	b.n	16ba <__aeabi_dmul+0x7a>
    17c4:	2501      	movs	r5, #1
    17c6:	9b01      	ldr	r3, [sp, #4]
    17c8:	4c14      	ldr	r4, [pc, #80]	; (181c <__aeabi_dmul+0x1dc>)
    17ca:	401d      	ands	r5, r3
    17cc:	2300      	movs	r3, #0
    17ce:	2200      	movs	r2, #0
    17d0:	4699      	mov	r9, r3
    17d2:	e79c      	b.n	170e <__aeabi_dmul+0xce>
    17d4:	2400      	movs	r4, #0
    17d6:	2200      	movs	r2, #0
    17d8:	2001      	movs	r0, #1
    17da:	e76e      	b.n	16ba <__aeabi_dmul+0x7a>
    17dc:	4653      	mov	r3, sl
    17de:	2003      	movs	r0, #3
    17e0:	e76b      	b.n	16ba <__aeabi_dmul+0x7a>
    17e2:	2300      	movs	r3, #0
    17e4:	469b      	mov	fp, r3
    17e6:	3301      	adds	r3, #1
    17e8:	2704      	movs	r7, #4
    17ea:	2600      	movs	r6, #0
    17ec:	9302      	str	r3, [sp, #8]
    17ee:	e74c      	b.n	168a <__aeabi_dmul+0x4a>
    17f0:	2303      	movs	r3, #3
    17f2:	4681      	mov	r9, r0
    17f4:	270c      	movs	r7, #12
    17f6:	9302      	str	r3, [sp, #8]
    17f8:	e747      	b.n	168a <__aeabi_dmul+0x4a>
    17fa:	2280      	movs	r2, #128	; 0x80
    17fc:	2300      	movs	r3, #0
    17fe:	2500      	movs	r5, #0
    1800:	0312      	lsls	r2, r2, #12
    1802:	4699      	mov	r9, r3
    1804:	4c05      	ldr	r4, [pc, #20]	; (181c <__aeabi_dmul+0x1dc>)
    1806:	e782      	b.n	170e <__aeabi_dmul+0xce>
    1808:	465c      	mov	r4, fp
    180a:	464b      	mov	r3, r9
    180c:	9802      	ldr	r0, [sp, #8]
    180e:	e76f      	b.n	16f0 <__aeabi_dmul+0xb0>
    1810:	465c      	mov	r4, fp
    1812:	464b      	mov	r3, r9
    1814:	9501      	str	r5, [sp, #4]
    1816:	9802      	ldr	r0, [sp, #8]
    1818:	e76a      	b.n	16f0 <__aeabi_dmul+0xb0>
    181a:	46c0      	nop			; (mov r8, r8)
    181c:	000007ff 	.word	0x000007ff
    1820:	fffffc01 	.word	0xfffffc01
    1824:	0000297c 	.word	0x0000297c
    1828:	800fffff 	.word	0x800fffff
    182c:	fffffc0d 	.word	0xfffffc0d
    1830:	464a      	mov	r2, r9
    1832:	4649      	mov	r1, r9
    1834:	0c17      	lsrs	r7, r2, #16
    1836:	0c1a      	lsrs	r2, r3, #16
    1838:	041b      	lsls	r3, r3, #16
    183a:	0c1b      	lsrs	r3, r3, #16
    183c:	0408      	lsls	r0, r1, #16
    183e:	0019      	movs	r1, r3
    1840:	0c00      	lsrs	r0, r0, #16
    1842:	4341      	muls	r1, r0
    1844:	0015      	movs	r5, r2
    1846:	4688      	mov	r8, r1
    1848:	0019      	movs	r1, r3
    184a:	437d      	muls	r5, r7
    184c:	4379      	muls	r1, r7
    184e:	9503      	str	r5, [sp, #12]
    1850:	4689      	mov	r9, r1
    1852:	0029      	movs	r1, r5
    1854:	0015      	movs	r5, r2
    1856:	4345      	muls	r5, r0
    1858:	444d      	add	r5, r9
    185a:	9502      	str	r5, [sp, #8]
    185c:	4645      	mov	r5, r8
    185e:	0c2d      	lsrs	r5, r5, #16
    1860:	46aa      	mov	sl, r5
    1862:	9d02      	ldr	r5, [sp, #8]
    1864:	4455      	add	r5, sl
    1866:	45a9      	cmp	r9, r5
    1868:	d906      	bls.n	1878 <__aeabi_dmul+0x238>
    186a:	468a      	mov	sl, r1
    186c:	2180      	movs	r1, #128	; 0x80
    186e:	0249      	lsls	r1, r1, #9
    1870:	4689      	mov	r9, r1
    1872:	44ca      	add	sl, r9
    1874:	4651      	mov	r1, sl
    1876:	9103      	str	r1, [sp, #12]
    1878:	0c29      	lsrs	r1, r5, #16
    187a:	9104      	str	r1, [sp, #16]
    187c:	4641      	mov	r1, r8
    187e:	0409      	lsls	r1, r1, #16
    1880:	042d      	lsls	r5, r5, #16
    1882:	0c09      	lsrs	r1, r1, #16
    1884:	4688      	mov	r8, r1
    1886:	0029      	movs	r1, r5
    1888:	0c25      	lsrs	r5, r4, #16
    188a:	0424      	lsls	r4, r4, #16
    188c:	4441      	add	r1, r8
    188e:	0c24      	lsrs	r4, r4, #16
    1890:	9105      	str	r1, [sp, #20]
    1892:	0021      	movs	r1, r4
    1894:	4341      	muls	r1, r0
    1896:	4688      	mov	r8, r1
    1898:	0021      	movs	r1, r4
    189a:	4379      	muls	r1, r7
    189c:	468a      	mov	sl, r1
    189e:	4368      	muls	r0, r5
    18a0:	4641      	mov	r1, r8
    18a2:	4450      	add	r0, sl
    18a4:	4681      	mov	r9, r0
    18a6:	0c08      	lsrs	r0, r1, #16
    18a8:	4448      	add	r0, r9
    18aa:	436f      	muls	r7, r5
    18ac:	4582      	cmp	sl, r0
    18ae:	d903      	bls.n	18b8 <__aeabi_dmul+0x278>
    18b0:	2180      	movs	r1, #128	; 0x80
    18b2:	0249      	lsls	r1, r1, #9
    18b4:	4689      	mov	r9, r1
    18b6:	444f      	add	r7, r9
    18b8:	0c01      	lsrs	r1, r0, #16
    18ba:	4689      	mov	r9, r1
    18bc:	0039      	movs	r1, r7
    18be:	4449      	add	r1, r9
    18c0:	9102      	str	r1, [sp, #8]
    18c2:	4641      	mov	r1, r8
    18c4:	040f      	lsls	r7, r1, #16
    18c6:	9904      	ldr	r1, [sp, #16]
    18c8:	0c3f      	lsrs	r7, r7, #16
    18ca:	4688      	mov	r8, r1
    18cc:	0400      	lsls	r0, r0, #16
    18ce:	19c0      	adds	r0, r0, r7
    18d0:	4480      	add	r8, r0
    18d2:	4641      	mov	r1, r8
    18d4:	9104      	str	r1, [sp, #16]
    18d6:	4659      	mov	r1, fp
    18d8:	0c0f      	lsrs	r7, r1, #16
    18da:	0409      	lsls	r1, r1, #16
    18dc:	0c09      	lsrs	r1, r1, #16
    18de:	4688      	mov	r8, r1
    18e0:	4359      	muls	r1, r3
    18e2:	468a      	mov	sl, r1
    18e4:	0039      	movs	r1, r7
    18e6:	4351      	muls	r1, r2
    18e8:	4689      	mov	r9, r1
    18ea:	4641      	mov	r1, r8
    18ec:	434a      	muls	r2, r1
    18ee:	4651      	mov	r1, sl
    18f0:	0c09      	lsrs	r1, r1, #16
    18f2:	468b      	mov	fp, r1
    18f4:	437b      	muls	r3, r7
    18f6:	18d2      	adds	r2, r2, r3
    18f8:	445a      	add	r2, fp
    18fa:	4293      	cmp	r3, r2
    18fc:	d903      	bls.n	1906 <__aeabi_dmul+0x2c6>
    18fe:	2380      	movs	r3, #128	; 0x80
    1900:	025b      	lsls	r3, r3, #9
    1902:	469b      	mov	fp, r3
    1904:	44d9      	add	r9, fp
    1906:	4651      	mov	r1, sl
    1908:	0409      	lsls	r1, r1, #16
    190a:	0c09      	lsrs	r1, r1, #16
    190c:	468a      	mov	sl, r1
    190e:	4641      	mov	r1, r8
    1910:	4361      	muls	r1, r4
    1912:	437c      	muls	r4, r7
    1914:	0c13      	lsrs	r3, r2, #16
    1916:	0412      	lsls	r2, r2, #16
    1918:	444b      	add	r3, r9
    191a:	4452      	add	r2, sl
    191c:	46a1      	mov	r9, r4
    191e:	468a      	mov	sl, r1
    1920:	003c      	movs	r4, r7
    1922:	4641      	mov	r1, r8
    1924:	436c      	muls	r4, r5
    1926:	434d      	muls	r5, r1
    1928:	4651      	mov	r1, sl
    192a:	444d      	add	r5, r9
    192c:	0c0f      	lsrs	r7, r1, #16
    192e:	197d      	adds	r5, r7, r5
    1930:	45a9      	cmp	r9, r5
    1932:	d903      	bls.n	193c <__aeabi_dmul+0x2fc>
    1934:	2180      	movs	r1, #128	; 0x80
    1936:	0249      	lsls	r1, r1, #9
    1938:	4688      	mov	r8, r1
    193a:	4444      	add	r4, r8
    193c:	9f04      	ldr	r7, [sp, #16]
    193e:	9903      	ldr	r1, [sp, #12]
    1940:	46b8      	mov	r8, r7
    1942:	4441      	add	r1, r8
    1944:	468b      	mov	fp, r1
    1946:	4583      	cmp	fp, r0
    1948:	4180      	sbcs	r0, r0
    194a:	4241      	negs	r1, r0
    194c:	4688      	mov	r8, r1
    194e:	4651      	mov	r1, sl
    1950:	0408      	lsls	r0, r1, #16
    1952:	042f      	lsls	r7, r5, #16
    1954:	0c00      	lsrs	r0, r0, #16
    1956:	183f      	adds	r7, r7, r0
    1958:	4658      	mov	r0, fp
    195a:	9902      	ldr	r1, [sp, #8]
    195c:	1810      	adds	r0, r2, r0
    195e:	4689      	mov	r9, r1
    1960:	4290      	cmp	r0, r2
    1962:	4192      	sbcs	r2, r2
    1964:	444f      	add	r7, r9
    1966:	46ba      	mov	sl, r7
    1968:	4252      	negs	r2, r2
    196a:	4699      	mov	r9, r3
    196c:	4693      	mov	fp, r2
    196e:	44c2      	add	sl, r8
    1970:	44d1      	add	r9, sl
    1972:	44cb      	add	fp, r9
    1974:	428f      	cmp	r7, r1
    1976:	41bf      	sbcs	r7, r7
    1978:	45c2      	cmp	sl, r8
    197a:	4189      	sbcs	r1, r1
    197c:	4599      	cmp	r9, r3
    197e:	419b      	sbcs	r3, r3
    1980:	4593      	cmp	fp, r2
    1982:	4192      	sbcs	r2, r2
    1984:	427f      	negs	r7, r7
    1986:	4249      	negs	r1, r1
    1988:	0c2d      	lsrs	r5, r5, #16
    198a:	4252      	negs	r2, r2
    198c:	430f      	orrs	r7, r1
    198e:	425b      	negs	r3, r3
    1990:	4313      	orrs	r3, r2
    1992:	197f      	adds	r7, r7, r5
    1994:	18ff      	adds	r7, r7, r3
    1996:	465b      	mov	r3, fp
    1998:	193c      	adds	r4, r7, r4
    199a:	0ddb      	lsrs	r3, r3, #23
    199c:	9a05      	ldr	r2, [sp, #20]
    199e:	0264      	lsls	r4, r4, #9
    19a0:	431c      	orrs	r4, r3
    19a2:	0243      	lsls	r3, r0, #9
    19a4:	4313      	orrs	r3, r2
    19a6:	1e5d      	subs	r5, r3, #1
    19a8:	41ab      	sbcs	r3, r5
    19aa:	465a      	mov	r2, fp
    19ac:	0dc0      	lsrs	r0, r0, #23
    19ae:	4303      	orrs	r3, r0
    19b0:	0252      	lsls	r2, r2, #9
    19b2:	4313      	orrs	r3, r2
    19b4:	01e2      	lsls	r2, r4, #7
    19b6:	d556      	bpl.n	1a66 <__aeabi_dmul+0x426>
    19b8:	2001      	movs	r0, #1
    19ba:	085a      	lsrs	r2, r3, #1
    19bc:	4003      	ands	r3, r0
    19be:	4313      	orrs	r3, r2
    19c0:	07e2      	lsls	r2, r4, #31
    19c2:	4313      	orrs	r3, r2
    19c4:	0864      	lsrs	r4, r4, #1
    19c6:	485a      	ldr	r0, [pc, #360]	; (1b30 <__aeabi_dmul+0x4f0>)
    19c8:	4460      	add	r0, ip
    19ca:	2800      	cmp	r0, #0
    19cc:	dd4d      	ble.n	1a6a <__aeabi_dmul+0x42a>
    19ce:	075a      	lsls	r2, r3, #29
    19d0:	d009      	beq.n	19e6 <__aeabi_dmul+0x3a6>
    19d2:	220f      	movs	r2, #15
    19d4:	401a      	ands	r2, r3
    19d6:	2a04      	cmp	r2, #4
    19d8:	d005      	beq.n	19e6 <__aeabi_dmul+0x3a6>
    19da:	1d1a      	adds	r2, r3, #4
    19dc:	429a      	cmp	r2, r3
    19de:	419b      	sbcs	r3, r3
    19e0:	425b      	negs	r3, r3
    19e2:	18e4      	adds	r4, r4, r3
    19e4:	0013      	movs	r3, r2
    19e6:	01e2      	lsls	r2, r4, #7
    19e8:	d504      	bpl.n	19f4 <__aeabi_dmul+0x3b4>
    19ea:	2080      	movs	r0, #128	; 0x80
    19ec:	4a51      	ldr	r2, [pc, #324]	; (1b34 <__aeabi_dmul+0x4f4>)
    19ee:	00c0      	lsls	r0, r0, #3
    19f0:	4014      	ands	r4, r2
    19f2:	4460      	add	r0, ip
    19f4:	4a50      	ldr	r2, [pc, #320]	; (1b38 <__aeabi_dmul+0x4f8>)
    19f6:	4290      	cmp	r0, r2
    19f8:	dd00      	ble.n	19fc <__aeabi_dmul+0x3bc>
    19fa:	e6e3      	b.n	17c4 <__aeabi_dmul+0x184>
    19fc:	2501      	movs	r5, #1
    19fe:	08db      	lsrs	r3, r3, #3
    1a00:	0762      	lsls	r2, r4, #29
    1a02:	431a      	orrs	r2, r3
    1a04:	0264      	lsls	r4, r4, #9
    1a06:	9b01      	ldr	r3, [sp, #4]
    1a08:	4691      	mov	r9, r2
    1a0a:	0b22      	lsrs	r2, r4, #12
    1a0c:	0544      	lsls	r4, r0, #21
    1a0e:	0d64      	lsrs	r4, r4, #21
    1a10:	401d      	ands	r5, r3
    1a12:	e67c      	b.n	170e <__aeabi_dmul+0xce>
    1a14:	2280      	movs	r2, #128	; 0x80
    1a16:	4659      	mov	r1, fp
    1a18:	0312      	lsls	r2, r2, #12
    1a1a:	4211      	tst	r1, r2
    1a1c:	d008      	beq.n	1a30 <__aeabi_dmul+0x3f0>
    1a1e:	4214      	tst	r4, r2
    1a20:	d106      	bne.n	1a30 <__aeabi_dmul+0x3f0>
    1a22:	4322      	orrs	r2, r4
    1a24:	0312      	lsls	r2, r2, #12
    1a26:	0b12      	lsrs	r2, r2, #12
    1a28:	4645      	mov	r5, r8
    1a2a:	4699      	mov	r9, r3
    1a2c:	4c43      	ldr	r4, [pc, #268]	; (1b3c <__aeabi_dmul+0x4fc>)
    1a2e:	e66e      	b.n	170e <__aeabi_dmul+0xce>
    1a30:	465b      	mov	r3, fp
    1a32:	431a      	orrs	r2, r3
    1a34:	0312      	lsls	r2, r2, #12
    1a36:	0b12      	lsrs	r2, r2, #12
    1a38:	4c40      	ldr	r4, [pc, #256]	; (1b3c <__aeabi_dmul+0x4fc>)
    1a3a:	e668      	b.n	170e <__aeabi_dmul+0xce>
    1a3c:	0003      	movs	r3, r0
    1a3e:	4654      	mov	r4, sl
    1a40:	3b28      	subs	r3, #40	; 0x28
    1a42:	409c      	lsls	r4, r3
    1a44:	2300      	movs	r3, #0
    1a46:	e6b9      	b.n	17bc <__aeabi_dmul+0x17c>
    1a48:	f000 f9cc 	bl	1de4 <__clzsi2>
    1a4c:	3020      	adds	r0, #32
    1a4e:	e6a6      	b.n	179e <__aeabi_dmul+0x15e>
    1a50:	0003      	movs	r3, r0
    1a52:	3b28      	subs	r3, #40	; 0x28
    1a54:	409f      	lsls	r7, r3
    1a56:	2300      	movs	r3, #0
    1a58:	46bb      	mov	fp, r7
    1a5a:	4699      	mov	r9, r3
    1a5c:	e68a      	b.n	1774 <__aeabi_dmul+0x134>
    1a5e:	f000 f9c1 	bl	1de4 <__clzsi2>
    1a62:	3020      	adds	r0, #32
    1a64:	e674      	b.n	1750 <__aeabi_dmul+0x110>
    1a66:	46b4      	mov	ip, r6
    1a68:	e7ad      	b.n	19c6 <__aeabi_dmul+0x386>
    1a6a:	2501      	movs	r5, #1
    1a6c:	1a2a      	subs	r2, r5, r0
    1a6e:	2a38      	cmp	r2, #56	; 0x38
    1a70:	dd06      	ble.n	1a80 <__aeabi_dmul+0x440>
    1a72:	9b01      	ldr	r3, [sp, #4]
    1a74:	2400      	movs	r4, #0
    1a76:	401d      	ands	r5, r3
    1a78:	2300      	movs	r3, #0
    1a7a:	2200      	movs	r2, #0
    1a7c:	4699      	mov	r9, r3
    1a7e:	e646      	b.n	170e <__aeabi_dmul+0xce>
    1a80:	2a1f      	cmp	r2, #31
    1a82:	dc21      	bgt.n	1ac8 <__aeabi_dmul+0x488>
    1a84:	2520      	movs	r5, #32
    1a86:	0020      	movs	r0, r4
    1a88:	1aad      	subs	r5, r5, r2
    1a8a:	001e      	movs	r6, r3
    1a8c:	40ab      	lsls	r3, r5
    1a8e:	40a8      	lsls	r0, r5
    1a90:	40d6      	lsrs	r6, r2
    1a92:	1e5d      	subs	r5, r3, #1
    1a94:	41ab      	sbcs	r3, r5
    1a96:	4330      	orrs	r0, r6
    1a98:	4318      	orrs	r0, r3
    1a9a:	40d4      	lsrs	r4, r2
    1a9c:	0743      	lsls	r3, r0, #29
    1a9e:	d009      	beq.n	1ab4 <__aeabi_dmul+0x474>
    1aa0:	230f      	movs	r3, #15
    1aa2:	4003      	ands	r3, r0
    1aa4:	2b04      	cmp	r3, #4
    1aa6:	d005      	beq.n	1ab4 <__aeabi_dmul+0x474>
    1aa8:	0003      	movs	r3, r0
    1aaa:	1d18      	adds	r0, r3, #4
    1aac:	4298      	cmp	r0, r3
    1aae:	419b      	sbcs	r3, r3
    1ab0:	425b      	negs	r3, r3
    1ab2:	18e4      	adds	r4, r4, r3
    1ab4:	0223      	lsls	r3, r4, #8
    1ab6:	d521      	bpl.n	1afc <__aeabi_dmul+0x4bc>
    1ab8:	2501      	movs	r5, #1
    1aba:	9b01      	ldr	r3, [sp, #4]
    1abc:	2401      	movs	r4, #1
    1abe:	401d      	ands	r5, r3
    1ac0:	2300      	movs	r3, #0
    1ac2:	2200      	movs	r2, #0
    1ac4:	4699      	mov	r9, r3
    1ac6:	e622      	b.n	170e <__aeabi_dmul+0xce>
    1ac8:	251f      	movs	r5, #31
    1aca:	0021      	movs	r1, r4
    1acc:	426d      	negs	r5, r5
    1ace:	1a28      	subs	r0, r5, r0
    1ad0:	40c1      	lsrs	r1, r0
    1ad2:	0008      	movs	r0, r1
    1ad4:	2a20      	cmp	r2, #32
    1ad6:	d01d      	beq.n	1b14 <__aeabi_dmul+0x4d4>
    1ad8:	355f      	adds	r5, #95	; 0x5f
    1ada:	1aaa      	subs	r2, r5, r2
    1adc:	4094      	lsls	r4, r2
    1ade:	4323      	orrs	r3, r4
    1ae0:	1e5c      	subs	r4, r3, #1
    1ae2:	41a3      	sbcs	r3, r4
    1ae4:	2507      	movs	r5, #7
    1ae6:	4303      	orrs	r3, r0
    1ae8:	401d      	ands	r5, r3
    1aea:	2200      	movs	r2, #0
    1aec:	2d00      	cmp	r5, #0
    1aee:	d009      	beq.n	1b04 <__aeabi_dmul+0x4c4>
    1af0:	220f      	movs	r2, #15
    1af2:	2400      	movs	r4, #0
    1af4:	401a      	ands	r2, r3
    1af6:	0018      	movs	r0, r3
    1af8:	2a04      	cmp	r2, #4
    1afa:	d1d6      	bne.n	1aaa <__aeabi_dmul+0x46a>
    1afc:	0003      	movs	r3, r0
    1afe:	0765      	lsls	r5, r4, #29
    1b00:	0264      	lsls	r4, r4, #9
    1b02:	0b22      	lsrs	r2, r4, #12
    1b04:	08db      	lsrs	r3, r3, #3
    1b06:	432b      	orrs	r3, r5
    1b08:	2501      	movs	r5, #1
    1b0a:	4699      	mov	r9, r3
    1b0c:	9b01      	ldr	r3, [sp, #4]
    1b0e:	2400      	movs	r4, #0
    1b10:	401d      	ands	r5, r3
    1b12:	e5fc      	b.n	170e <__aeabi_dmul+0xce>
    1b14:	2400      	movs	r4, #0
    1b16:	e7e2      	b.n	1ade <__aeabi_dmul+0x49e>
    1b18:	2280      	movs	r2, #128	; 0x80
    1b1a:	2501      	movs	r5, #1
    1b1c:	0312      	lsls	r2, r2, #12
    1b1e:	4322      	orrs	r2, r4
    1b20:	9901      	ldr	r1, [sp, #4]
    1b22:	0312      	lsls	r2, r2, #12
    1b24:	0b12      	lsrs	r2, r2, #12
    1b26:	400d      	ands	r5, r1
    1b28:	4699      	mov	r9, r3
    1b2a:	4c04      	ldr	r4, [pc, #16]	; (1b3c <__aeabi_dmul+0x4fc>)
    1b2c:	e5ef      	b.n	170e <__aeabi_dmul+0xce>
    1b2e:	46c0      	nop			; (mov r8, r8)
    1b30:	000003ff 	.word	0x000003ff
    1b34:	feffffff 	.word	0xfeffffff
    1b38:	000007fe 	.word	0x000007fe
    1b3c:	000007ff 	.word	0x000007ff

00001b40 <__aeabi_d2iz>:
    1b40:	b530      	push	{r4, r5, lr}
    1b42:	4d13      	ldr	r5, [pc, #76]	; (1b90 <__aeabi_d2iz+0x50>)
    1b44:	030a      	lsls	r2, r1, #12
    1b46:	004b      	lsls	r3, r1, #1
    1b48:	0b12      	lsrs	r2, r2, #12
    1b4a:	0d5b      	lsrs	r3, r3, #21
    1b4c:	0fc9      	lsrs	r1, r1, #31
    1b4e:	2400      	movs	r4, #0
    1b50:	42ab      	cmp	r3, r5
    1b52:	dd10      	ble.n	1b76 <__aeabi_d2iz+0x36>
    1b54:	4c0f      	ldr	r4, [pc, #60]	; (1b94 <__aeabi_d2iz+0x54>)
    1b56:	42a3      	cmp	r3, r4
    1b58:	dc0f      	bgt.n	1b7a <__aeabi_d2iz+0x3a>
    1b5a:	2480      	movs	r4, #128	; 0x80
    1b5c:	4d0e      	ldr	r5, [pc, #56]	; (1b98 <__aeabi_d2iz+0x58>)
    1b5e:	0364      	lsls	r4, r4, #13
    1b60:	4322      	orrs	r2, r4
    1b62:	1aed      	subs	r5, r5, r3
    1b64:	2d1f      	cmp	r5, #31
    1b66:	dd0b      	ble.n	1b80 <__aeabi_d2iz+0x40>
    1b68:	480c      	ldr	r0, [pc, #48]	; (1b9c <__aeabi_d2iz+0x5c>)
    1b6a:	1ac3      	subs	r3, r0, r3
    1b6c:	40da      	lsrs	r2, r3
    1b6e:	4254      	negs	r4, r2
    1b70:	2900      	cmp	r1, #0
    1b72:	d100      	bne.n	1b76 <__aeabi_d2iz+0x36>
    1b74:	0014      	movs	r4, r2
    1b76:	0020      	movs	r0, r4
    1b78:	bd30      	pop	{r4, r5, pc}
    1b7a:	4b09      	ldr	r3, [pc, #36]	; (1ba0 <__aeabi_d2iz+0x60>)
    1b7c:	18cc      	adds	r4, r1, r3
    1b7e:	e7fa      	b.n	1b76 <__aeabi_d2iz+0x36>
    1b80:	4c08      	ldr	r4, [pc, #32]	; (1ba4 <__aeabi_d2iz+0x64>)
    1b82:	40e8      	lsrs	r0, r5
    1b84:	46a4      	mov	ip, r4
    1b86:	4463      	add	r3, ip
    1b88:	409a      	lsls	r2, r3
    1b8a:	4302      	orrs	r2, r0
    1b8c:	e7ef      	b.n	1b6e <__aeabi_d2iz+0x2e>
    1b8e:	46c0      	nop			; (mov r8, r8)
    1b90:	000003fe 	.word	0x000003fe
    1b94:	0000041d 	.word	0x0000041d
    1b98:	00000433 	.word	0x00000433
    1b9c:	00000413 	.word	0x00000413
    1ba0:	7fffffff 	.word	0x7fffffff
    1ba4:	fffffbed 	.word	0xfffffbed

00001ba8 <__aeabi_i2d>:
    1ba8:	b570      	push	{r4, r5, r6, lr}
    1baa:	2800      	cmp	r0, #0
    1bac:	d030      	beq.n	1c10 <__aeabi_i2d+0x68>
    1bae:	17c3      	asrs	r3, r0, #31
    1bb0:	18c4      	adds	r4, r0, r3
    1bb2:	405c      	eors	r4, r3
    1bb4:	0fc5      	lsrs	r5, r0, #31
    1bb6:	0020      	movs	r0, r4
    1bb8:	f000 f914 	bl	1de4 <__clzsi2>
    1bbc:	4b17      	ldr	r3, [pc, #92]	; (1c1c <__aeabi_i2d+0x74>)
    1bbe:	4a18      	ldr	r2, [pc, #96]	; (1c20 <__aeabi_i2d+0x78>)
    1bc0:	1a1b      	subs	r3, r3, r0
    1bc2:	1ad2      	subs	r2, r2, r3
    1bc4:	2a1f      	cmp	r2, #31
    1bc6:	dd18      	ble.n	1bfa <__aeabi_i2d+0x52>
    1bc8:	4a16      	ldr	r2, [pc, #88]	; (1c24 <__aeabi_i2d+0x7c>)
    1bca:	1ad2      	subs	r2, r2, r3
    1bcc:	4094      	lsls	r4, r2
    1bce:	2200      	movs	r2, #0
    1bd0:	0324      	lsls	r4, r4, #12
    1bd2:	055b      	lsls	r3, r3, #21
    1bd4:	0b24      	lsrs	r4, r4, #12
    1bd6:	0d5b      	lsrs	r3, r3, #21
    1bd8:	2100      	movs	r1, #0
    1bda:	0010      	movs	r0, r2
    1bdc:	0324      	lsls	r4, r4, #12
    1bde:	0d0a      	lsrs	r2, r1, #20
    1be0:	0b24      	lsrs	r4, r4, #12
    1be2:	0512      	lsls	r2, r2, #20
    1be4:	4322      	orrs	r2, r4
    1be6:	4c10      	ldr	r4, [pc, #64]	; (1c28 <__aeabi_i2d+0x80>)
    1be8:	051b      	lsls	r3, r3, #20
    1bea:	4022      	ands	r2, r4
    1bec:	4313      	orrs	r3, r2
    1bee:	005b      	lsls	r3, r3, #1
    1bf0:	07ed      	lsls	r5, r5, #31
    1bf2:	085b      	lsrs	r3, r3, #1
    1bf4:	432b      	orrs	r3, r5
    1bf6:	0019      	movs	r1, r3
    1bf8:	bd70      	pop	{r4, r5, r6, pc}
    1bfa:	0021      	movs	r1, r4
    1bfc:	4091      	lsls	r1, r2
    1bfe:	000a      	movs	r2, r1
    1c00:	210b      	movs	r1, #11
    1c02:	1a08      	subs	r0, r1, r0
    1c04:	40c4      	lsrs	r4, r0
    1c06:	055b      	lsls	r3, r3, #21
    1c08:	0324      	lsls	r4, r4, #12
    1c0a:	0b24      	lsrs	r4, r4, #12
    1c0c:	0d5b      	lsrs	r3, r3, #21
    1c0e:	e7e3      	b.n	1bd8 <__aeabi_i2d+0x30>
    1c10:	2500      	movs	r5, #0
    1c12:	2300      	movs	r3, #0
    1c14:	2400      	movs	r4, #0
    1c16:	2200      	movs	r2, #0
    1c18:	e7de      	b.n	1bd8 <__aeabi_i2d+0x30>
    1c1a:	46c0      	nop			; (mov r8, r8)
    1c1c:	0000041e 	.word	0x0000041e
    1c20:	00000433 	.word	0x00000433
    1c24:	00000413 	.word	0x00000413
    1c28:	800fffff 	.word	0x800fffff

00001c2c <__aeabi_f2d>:
    1c2c:	0041      	lsls	r1, r0, #1
    1c2e:	0e09      	lsrs	r1, r1, #24
    1c30:	1c4b      	adds	r3, r1, #1
    1c32:	b570      	push	{r4, r5, r6, lr}
    1c34:	b2db      	uxtb	r3, r3
    1c36:	0246      	lsls	r6, r0, #9
    1c38:	0a75      	lsrs	r5, r6, #9
    1c3a:	0fc4      	lsrs	r4, r0, #31
    1c3c:	2b01      	cmp	r3, #1
    1c3e:	dd14      	ble.n	1c6a <__aeabi_f2d+0x3e>
    1c40:	23e0      	movs	r3, #224	; 0xe0
    1c42:	009b      	lsls	r3, r3, #2
    1c44:	076d      	lsls	r5, r5, #29
    1c46:	0b36      	lsrs	r6, r6, #12
    1c48:	18cb      	adds	r3, r1, r3
    1c4a:	2100      	movs	r1, #0
    1c4c:	0d0a      	lsrs	r2, r1, #20
    1c4e:	0028      	movs	r0, r5
    1c50:	0512      	lsls	r2, r2, #20
    1c52:	4d1c      	ldr	r5, [pc, #112]	; (1cc4 <__aeabi_f2d+0x98>)
    1c54:	4332      	orrs	r2, r6
    1c56:	055b      	lsls	r3, r3, #21
    1c58:	402a      	ands	r2, r5
    1c5a:	085b      	lsrs	r3, r3, #1
    1c5c:	4313      	orrs	r3, r2
    1c5e:	005b      	lsls	r3, r3, #1
    1c60:	07e4      	lsls	r4, r4, #31
    1c62:	085b      	lsrs	r3, r3, #1
    1c64:	4323      	orrs	r3, r4
    1c66:	0019      	movs	r1, r3
    1c68:	bd70      	pop	{r4, r5, r6, pc}
    1c6a:	2900      	cmp	r1, #0
    1c6c:	d114      	bne.n	1c98 <__aeabi_f2d+0x6c>
    1c6e:	2d00      	cmp	r5, #0
    1c70:	d01e      	beq.n	1cb0 <__aeabi_f2d+0x84>
    1c72:	0028      	movs	r0, r5
    1c74:	f000 f8b6 	bl	1de4 <__clzsi2>
    1c78:	280a      	cmp	r0, #10
    1c7a:	dc1c      	bgt.n	1cb6 <__aeabi_f2d+0x8a>
    1c7c:	230b      	movs	r3, #11
    1c7e:	002a      	movs	r2, r5
    1c80:	1a1b      	subs	r3, r3, r0
    1c82:	40da      	lsrs	r2, r3
    1c84:	0003      	movs	r3, r0
    1c86:	3315      	adds	r3, #21
    1c88:	409d      	lsls	r5, r3
    1c8a:	4b0f      	ldr	r3, [pc, #60]	; (1cc8 <__aeabi_f2d+0x9c>)
    1c8c:	0312      	lsls	r2, r2, #12
    1c8e:	1a1b      	subs	r3, r3, r0
    1c90:	055b      	lsls	r3, r3, #21
    1c92:	0b16      	lsrs	r6, r2, #12
    1c94:	0d5b      	lsrs	r3, r3, #21
    1c96:	e7d8      	b.n	1c4a <__aeabi_f2d+0x1e>
    1c98:	2d00      	cmp	r5, #0
    1c9a:	d006      	beq.n	1caa <__aeabi_f2d+0x7e>
    1c9c:	0b32      	lsrs	r2, r6, #12
    1c9e:	2680      	movs	r6, #128	; 0x80
    1ca0:	0336      	lsls	r6, r6, #12
    1ca2:	076d      	lsls	r5, r5, #29
    1ca4:	4316      	orrs	r6, r2
    1ca6:	4b09      	ldr	r3, [pc, #36]	; (1ccc <__aeabi_f2d+0xa0>)
    1ca8:	e7cf      	b.n	1c4a <__aeabi_f2d+0x1e>
    1caa:	4b08      	ldr	r3, [pc, #32]	; (1ccc <__aeabi_f2d+0xa0>)
    1cac:	2600      	movs	r6, #0
    1cae:	e7cc      	b.n	1c4a <__aeabi_f2d+0x1e>
    1cb0:	2300      	movs	r3, #0
    1cb2:	2600      	movs	r6, #0
    1cb4:	e7c9      	b.n	1c4a <__aeabi_f2d+0x1e>
    1cb6:	0003      	movs	r3, r0
    1cb8:	002a      	movs	r2, r5
    1cba:	3b0b      	subs	r3, #11
    1cbc:	409a      	lsls	r2, r3
    1cbe:	2500      	movs	r5, #0
    1cc0:	e7e3      	b.n	1c8a <__aeabi_f2d+0x5e>
    1cc2:	46c0      	nop			; (mov r8, r8)
    1cc4:	800fffff 	.word	0x800fffff
    1cc8:	00000389 	.word	0x00000389
    1ccc:	000007ff 	.word	0x000007ff

00001cd0 <__aeabi_d2f>:
    1cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1cd2:	004c      	lsls	r4, r1, #1
    1cd4:	0d64      	lsrs	r4, r4, #21
    1cd6:	030b      	lsls	r3, r1, #12
    1cd8:	1c62      	adds	r2, r4, #1
    1cda:	0f45      	lsrs	r5, r0, #29
    1cdc:	0a5b      	lsrs	r3, r3, #9
    1cde:	0552      	lsls	r2, r2, #21
    1ce0:	432b      	orrs	r3, r5
    1ce2:	0fc9      	lsrs	r1, r1, #31
    1ce4:	00c5      	lsls	r5, r0, #3
    1ce6:	0d52      	lsrs	r2, r2, #21
    1ce8:	2a01      	cmp	r2, #1
    1cea:	dd28      	ble.n	1d3e <__aeabi_d2f+0x6e>
    1cec:	4a3a      	ldr	r2, [pc, #232]	; (1dd8 <__aeabi_d2f+0x108>)
    1cee:	18a6      	adds	r6, r4, r2
    1cf0:	2efe      	cmp	r6, #254	; 0xfe
    1cf2:	dc1b      	bgt.n	1d2c <__aeabi_d2f+0x5c>
    1cf4:	2e00      	cmp	r6, #0
    1cf6:	dd3e      	ble.n	1d76 <__aeabi_d2f+0xa6>
    1cf8:	0180      	lsls	r0, r0, #6
    1cfa:	0002      	movs	r2, r0
    1cfc:	1e50      	subs	r0, r2, #1
    1cfe:	4182      	sbcs	r2, r0
    1d00:	0f6d      	lsrs	r5, r5, #29
    1d02:	432a      	orrs	r2, r5
    1d04:	00db      	lsls	r3, r3, #3
    1d06:	4313      	orrs	r3, r2
    1d08:	075a      	lsls	r2, r3, #29
    1d0a:	d004      	beq.n	1d16 <__aeabi_d2f+0x46>
    1d0c:	220f      	movs	r2, #15
    1d0e:	401a      	ands	r2, r3
    1d10:	2a04      	cmp	r2, #4
    1d12:	d000      	beq.n	1d16 <__aeabi_d2f+0x46>
    1d14:	3304      	adds	r3, #4
    1d16:	2280      	movs	r2, #128	; 0x80
    1d18:	04d2      	lsls	r2, r2, #19
    1d1a:	401a      	ands	r2, r3
    1d1c:	d05a      	beq.n	1dd4 <__aeabi_d2f+0x104>
    1d1e:	3601      	adds	r6, #1
    1d20:	2eff      	cmp	r6, #255	; 0xff
    1d22:	d003      	beq.n	1d2c <__aeabi_d2f+0x5c>
    1d24:	019b      	lsls	r3, r3, #6
    1d26:	0a5b      	lsrs	r3, r3, #9
    1d28:	b2f4      	uxtb	r4, r6
    1d2a:	e001      	b.n	1d30 <__aeabi_d2f+0x60>
    1d2c:	24ff      	movs	r4, #255	; 0xff
    1d2e:	2300      	movs	r3, #0
    1d30:	0258      	lsls	r0, r3, #9
    1d32:	05e4      	lsls	r4, r4, #23
    1d34:	0a40      	lsrs	r0, r0, #9
    1d36:	07c9      	lsls	r1, r1, #31
    1d38:	4320      	orrs	r0, r4
    1d3a:	4308      	orrs	r0, r1
    1d3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d3e:	2c00      	cmp	r4, #0
    1d40:	d007      	beq.n	1d52 <__aeabi_d2f+0x82>
    1d42:	431d      	orrs	r5, r3
    1d44:	d0f2      	beq.n	1d2c <__aeabi_d2f+0x5c>
    1d46:	2080      	movs	r0, #128	; 0x80
    1d48:	00db      	lsls	r3, r3, #3
    1d4a:	0480      	lsls	r0, r0, #18
    1d4c:	4303      	orrs	r3, r0
    1d4e:	26ff      	movs	r6, #255	; 0xff
    1d50:	e7da      	b.n	1d08 <__aeabi_d2f+0x38>
    1d52:	432b      	orrs	r3, r5
    1d54:	d003      	beq.n	1d5e <__aeabi_d2f+0x8e>
    1d56:	2305      	movs	r3, #5
    1d58:	08db      	lsrs	r3, r3, #3
    1d5a:	2cff      	cmp	r4, #255	; 0xff
    1d5c:	d003      	beq.n	1d66 <__aeabi_d2f+0x96>
    1d5e:	025b      	lsls	r3, r3, #9
    1d60:	0a5b      	lsrs	r3, r3, #9
    1d62:	b2e4      	uxtb	r4, r4
    1d64:	e7e4      	b.n	1d30 <__aeabi_d2f+0x60>
    1d66:	2b00      	cmp	r3, #0
    1d68:	d032      	beq.n	1dd0 <__aeabi_d2f+0x100>
    1d6a:	2080      	movs	r0, #128	; 0x80
    1d6c:	03c0      	lsls	r0, r0, #15
    1d6e:	4303      	orrs	r3, r0
    1d70:	025b      	lsls	r3, r3, #9
    1d72:	0a5b      	lsrs	r3, r3, #9
    1d74:	e7dc      	b.n	1d30 <__aeabi_d2f+0x60>
    1d76:	0032      	movs	r2, r6
    1d78:	3217      	adds	r2, #23
    1d7a:	db14      	blt.n	1da6 <__aeabi_d2f+0xd6>
    1d7c:	2280      	movs	r2, #128	; 0x80
    1d7e:	271e      	movs	r7, #30
    1d80:	0412      	lsls	r2, r2, #16
    1d82:	4313      	orrs	r3, r2
    1d84:	1bbf      	subs	r7, r7, r6
    1d86:	2f1f      	cmp	r7, #31
    1d88:	dc0f      	bgt.n	1daa <__aeabi_d2f+0xda>
    1d8a:	4a14      	ldr	r2, [pc, #80]	; (1ddc <__aeabi_d2f+0x10c>)
    1d8c:	4694      	mov	ip, r2
    1d8e:	4464      	add	r4, ip
    1d90:	002a      	movs	r2, r5
    1d92:	40a5      	lsls	r5, r4
    1d94:	002e      	movs	r6, r5
    1d96:	40a3      	lsls	r3, r4
    1d98:	1e75      	subs	r5, r6, #1
    1d9a:	41ae      	sbcs	r6, r5
    1d9c:	40fa      	lsrs	r2, r7
    1d9e:	4333      	orrs	r3, r6
    1da0:	4313      	orrs	r3, r2
    1da2:	2600      	movs	r6, #0
    1da4:	e7b0      	b.n	1d08 <__aeabi_d2f+0x38>
    1da6:	2400      	movs	r4, #0
    1da8:	e7d5      	b.n	1d56 <__aeabi_d2f+0x86>
    1daa:	2202      	movs	r2, #2
    1dac:	4252      	negs	r2, r2
    1dae:	1b96      	subs	r6, r2, r6
    1db0:	001a      	movs	r2, r3
    1db2:	40f2      	lsrs	r2, r6
    1db4:	2f20      	cmp	r7, #32
    1db6:	d009      	beq.n	1dcc <__aeabi_d2f+0xfc>
    1db8:	4809      	ldr	r0, [pc, #36]	; (1de0 <__aeabi_d2f+0x110>)
    1dba:	4684      	mov	ip, r0
    1dbc:	4464      	add	r4, ip
    1dbe:	40a3      	lsls	r3, r4
    1dc0:	432b      	orrs	r3, r5
    1dc2:	1e5d      	subs	r5, r3, #1
    1dc4:	41ab      	sbcs	r3, r5
    1dc6:	2600      	movs	r6, #0
    1dc8:	4313      	orrs	r3, r2
    1dca:	e79d      	b.n	1d08 <__aeabi_d2f+0x38>
    1dcc:	2300      	movs	r3, #0
    1dce:	e7f7      	b.n	1dc0 <__aeabi_d2f+0xf0>
    1dd0:	2300      	movs	r3, #0
    1dd2:	e7ad      	b.n	1d30 <__aeabi_d2f+0x60>
    1dd4:	0034      	movs	r4, r6
    1dd6:	e7bf      	b.n	1d58 <__aeabi_d2f+0x88>
    1dd8:	fffffc80 	.word	0xfffffc80
    1ddc:	fffffc82 	.word	0xfffffc82
    1de0:	fffffca2 	.word	0xfffffca2

00001de4 <__clzsi2>:
    1de4:	211c      	movs	r1, #28
    1de6:	2301      	movs	r3, #1
    1de8:	041b      	lsls	r3, r3, #16
    1dea:	4298      	cmp	r0, r3
    1dec:	d301      	bcc.n	1df2 <__clzsi2+0xe>
    1dee:	0c00      	lsrs	r0, r0, #16
    1df0:	3910      	subs	r1, #16
    1df2:	0a1b      	lsrs	r3, r3, #8
    1df4:	4298      	cmp	r0, r3
    1df6:	d301      	bcc.n	1dfc <__clzsi2+0x18>
    1df8:	0a00      	lsrs	r0, r0, #8
    1dfa:	3908      	subs	r1, #8
    1dfc:	091b      	lsrs	r3, r3, #4
    1dfe:	4298      	cmp	r0, r3
    1e00:	d301      	bcc.n	1e06 <__clzsi2+0x22>
    1e02:	0900      	lsrs	r0, r0, #4
    1e04:	3904      	subs	r1, #4
    1e06:	a202      	add	r2, pc, #8	; (adr r2, 1e10 <__clzsi2+0x2c>)
    1e08:	5c10      	ldrb	r0, [r2, r0]
    1e0a:	1840      	adds	r0, r0, r1
    1e0c:	4770      	bx	lr
    1e0e:	46c0      	nop			; (mov r8, r8)
    1e10:	02020304 	.word	0x02020304
    1e14:	01010101 	.word	0x01010101
	...

00001e20 <__libc_init_array>:
    1e20:	b570      	push	{r4, r5, r6, lr}
    1e22:	2600      	movs	r6, #0
    1e24:	4d0c      	ldr	r5, [pc, #48]	; (1e58 <__libc_init_array+0x38>)
    1e26:	4c0d      	ldr	r4, [pc, #52]	; (1e5c <__libc_init_array+0x3c>)
    1e28:	1b64      	subs	r4, r4, r5
    1e2a:	10a4      	asrs	r4, r4, #2
    1e2c:	42a6      	cmp	r6, r4
    1e2e:	d109      	bne.n	1e44 <__libc_init_array+0x24>
    1e30:	2600      	movs	r6, #0
    1e32:	f000 fe0d 	bl	2a50 <_init>
    1e36:	4d0a      	ldr	r5, [pc, #40]	; (1e60 <__libc_init_array+0x40>)
    1e38:	4c0a      	ldr	r4, [pc, #40]	; (1e64 <__libc_init_array+0x44>)
    1e3a:	1b64      	subs	r4, r4, r5
    1e3c:	10a4      	asrs	r4, r4, #2
    1e3e:	42a6      	cmp	r6, r4
    1e40:	d105      	bne.n	1e4e <__libc_init_array+0x2e>
    1e42:	bd70      	pop	{r4, r5, r6, pc}
    1e44:	00b3      	lsls	r3, r6, #2
    1e46:	58eb      	ldr	r3, [r5, r3]
    1e48:	4798      	blx	r3
    1e4a:	3601      	adds	r6, #1
    1e4c:	e7ee      	b.n	1e2c <__libc_init_array+0xc>
    1e4e:	00b3      	lsls	r3, r6, #2
    1e50:	58eb      	ldr	r3, [r5, r3]
    1e52:	4798      	blx	r3
    1e54:	3601      	adds	r6, #1
    1e56:	e7f2      	b.n	1e3e <__libc_init_array+0x1e>
    1e58:	00002a5c 	.word	0x00002a5c
    1e5c:	00002a5c 	.word	0x00002a5c
    1e60:	00002a5c 	.word	0x00002a5c
    1e64:	00002a60 	.word	0x00002a60

00001e68 <sniprintf>:
    1e68:	b40c      	push	{r2, r3}
    1e6a:	b530      	push	{r4, r5, lr}
    1e6c:	4b16      	ldr	r3, [pc, #88]	; (1ec8 <sniprintf+0x60>)
    1e6e:	b09d      	sub	sp, #116	; 0x74
    1e70:	1e0c      	subs	r4, r1, #0
    1e72:	681d      	ldr	r5, [r3, #0]
    1e74:	da08      	bge.n	1e88 <sniprintf+0x20>
    1e76:	238b      	movs	r3, #139	; 0x8b
    1e78:	2001      	movs	r0, #1
    1e7a:	602b      	str	r3, [r5, #0]
    1e7c:	4240      	negs	r0, r0
    1e7e:	b01d      	add	sp, #116	; 0x74
    1e80:	bc30      	pop	{r4, r5}
    1e82:	bc08      	pop	{r3}
    1e84:	b002      	add	sp, #8
    1e86:	4718      	bx	r3
    1e88:	2382      	movs	r3, #130	; 0x82
    1e8a:	a902      	add	r1, sp, #8
    1e8c:	009b      	lsls	r3, r3, #2
    1e8e:	818b      	strh	r3, [r1, #12]
    1e90:	2300      	movs	r3, #0
    1e92:	9002      	str	r0, [sp, #8]
    1e94:	6108      	str	r0, [r1, #16]
    1e96:	429c      	cmp	r4, r3
    1e98:	d000      	beq.n	1e9c <sniprintf+0x34>
    1e9a:	1e63      	subs	r3, r4, #1
    1e9c:	608b      	str	r3, [r1, #8]
    1e9e:	614b      	str	r3, [r1, #20]
    1ea0:	2301      	movs	r3, #1
    1ea2:	425b      	negs	r3, r3
    1ea4:	81cb      	strh	r3, [r1, #14]
    1ea6:	9a20      	ldr	r2, [sp, #128]	; 0x80
    1ea8:	ab21      	add	r3, sp, #132	; 0x84
    1eaa:	0028      	movs	r0, r5
    1eac:	9301      	str	r3, [sp, #4]
    1eae:	f000 f8f7 	bl	20a0 <_svfiprintf_r>
    1eb2:	1c43      	adds	r3, r0, #1
    1eb4:	da01      	bge.n	1eba <sniprintf+0x52>
    1eb6:	238b      	movs	r3, #139	; 0x8b
    1eb8:	602b      	str	r3, [r5, #0]
    1eba:	2c00      	cmp	r4, #0
    1ebc:	d0df      	beq.n	1e7e <sniprintf+0x16>
    1ebe:	2300      	movs	r3, #0
    1ec0:	9a02      	ldr	r2, [sp, #8]
    1ec2:	7013      	strb	r3, [r2, #0]
    1ec4:	e7db      	b.n	1e7e <sniprintf+0x16>
    1ec6:	46c0      	nop			; (mov r8, r8)
    1ec8:	20000000 	.word	0x20000000

00001ecc <siprintf>:
    1ecc:	b40e      	push	{r1, r2, r3}
    1ece:	b510      	push	{r4, lr}
    1ed0:	b09d      	sub	sp, #116	; 0x74
    1ed2:	a902      	add	r1, sp, #8
    1ed4:	9002      	str	r0, [sp, #8]
    1ed6:	6108      	str	r0, [r1, #16]
    1ed8:	480b      	ldr	r0, [pc, #44]	; (1f08 <siprintf+0x3c>)
    1eda:	2482      	movs	r4, #130	; 0x82
    1edc:	6088      	str	r0, [r1, #8]
    1ede:	6148      	str	r0, [r1, #20]
    1ee0:	2001      	movs	r0, #1
    1ee2:	4240      	negs	r0, r0
    1ee4:	ab1f      	add	r3, sp, #124	; 0x7c
    1ee6:	81c8      	strh	r0, [r1, #14]
    1ee8:	4808      	ldr	r0, [pc, #32]	; (1f0c <siprintf+0x40>)
    1eea:	cb04      	ldmia	r3!, {r2}
    1eec:	00a4      	lsls	r4, r4, #2
    1eee:	6800      	ldr	r0, [r0, #0]
    1ef0:	9301      	str	r3, [sp, #4]
    1ef2:	818c      	strh	r4, [r1, #12]
    1ef4:	f000 f8d4 	bl	20a0 <_svfiprintf_r>
    1ef8:	2300      	movs	r3, #0
    1efa:	9a02      	ldr	r2, [sp, #8]
    1efc:	7013      	strb	r3, [r2, #0]
    1efe:	b01d      	add	sp, #116	; 0x74
    1f00:	bc10      	pop	{r4}
    1f02:	bc08      	pop	{r3}
    1f04:	b003      	add	sp, #12
    1f06:	4718      	bx	r3
    1f08:	7fffffff 	.word	0x7fffffff
    1f0c:	20000000 	.word	0x20000000

00001f10 <strlen>:
    1f10:	2300      	movs	r3, #0
    1f12:	5cc2      	ldrb	r2, [r0, r3]
    1f14:	3301      	adds	r3, #1
    1f16:	2a00      	cmp	r2, #0
    1f18:	d1fb      	bne.n	1f12 <strlen+0x2>
    1f1a:	1e58      	subs	r0, r3, #1
    1f1c:	4770      	bx	lr
	...

00001f20 <_malloc_r>:
    1f20:	2303      	movs	r3, #3
    1f22:	b570      	push	{r4, r5, r6, lr}
    1f24:	1ccd      	adds	r5, r1, #3
    1f26:	439d      	bics	r5, r3
    1f28:	3508      	adds	r5, #8
    1f2a:	0006      	movs	r6, r0
    1f2c:	2d0c      	cmp	r5, #12
    1f2e:	d21e      	bcs.n	1f6e <_malloc_r+0x4e>
    1f30:	250c      	movs	r5, #12
    1f32:	42a9      	cmp	r1, r5
    1f34:	d81d      	bhi.n	1f72 <_malloc_r+0x52>
    1f36:	0030      	movs	r0, r6
    1f38:	f000 fb76 	bl	2628 <__malloc_lock>
    1f3c:	4a25      	ldr	r2, [pc, #148]	; (1fd4 <_malloc_r+0xb4>)
    1f3e:	6814      	ldr	r4, [r2, #0]
    1f40:	0021      	movs	r1, r4
    1f42:	2900      	cmp	r1, #0
    1f44:	d119      	bne.n	1f7a <_malloc_r+0x5a>
    1f46:	4c24      	ldr	r4, [pc, #144]	; (1fd8 <_malloc_r+0xb8>)
    1f48:	6823      	ldr	r3, [r4, #0]
    1f4a:	2b00      	cmp	r3, #0
    1f4c:	d103      	bne.n	1f56 <_malloc_r+0x36>
    1f4e:	0030      	movs	r0, r6
    1f50:	f000 fb32 	bl	25b8 <_sbrk_r>
    1f54:	6020      	str	r0, [r4, #0]
    1f56:	0029      	movs	r1, r5
    1f58:	0030      	movs	r0, r6
    1f5a:	f000 fb2d 	bl	25b8 <_sbrk_r>
    1f5e:	1c43      	adds	r3, r0, #1
    1f60:	d12c      	bne.n	1fbc <_malloc_r+0x9c>
    1f62:	230c      	movs	r3, #12
    1f64:	0030      	movs	r0, r6
    1f66:	6033      	str	r3, [r6, #0]
    1f68:	f000 fb5f 	bl	262a <__malloc_unlock>
    1f6c:	e003      	b.n	1f76 <_malloc_r+0x56>
    1f6e:	2d00      	cmp	r5, #0
    1f70:	dadf      	bge.n	1f32 <_malloc_r+0x12>
    1f72:	230c      	movs	r3, #12
    1f74:	6033      	str	r3, [r6, #0]
    1f76:	2000      	movs	r0, #0
    1f78:	bd70      	pop	{r4, r5, r6, pc}
    1f7a:	680b      	ldr	r3, [r1, #0]
    1f7c:	1b5b      	subs	r3, r3, r5
    1f7e:	d41a      	bmi.n	1fb6 <_malloc_r+0x96>
    1f80:	2b0b      	cmp	r3, #11
    1f82:	d903      	bls.n	1f8c <_malloc_r+0x6c>
    1f84:	600b      	str	r3, [r1, #0]
    1f86:	18cc      	adds	r4, r1, r3
    1f88:	6025      	str	r5, [r4, #0]
    1f8a:	e003      	b.n	1f94 <_malloc_r+0x74>
    1f8c:	428c      	cmp	r4, r1
    1f8e:	d10e      	bne.n	1fae <_malloc_r+0x8e>
    1f90:	6863      	ldr	r3, [r4, #4]
    1f92:	6013      	str	r3, [r2, #0]
    1f94:	0030      	movs	r0, r6
    1f96:	f000 fb48 	bl	262a <__malloc_unlock>
    1f9a:	0020      	movs	r0, r4
    1f9c:	2207      	movs	r2, #7
    1f9e:	300b      	adds	r0, #11
    1fa0:	1d23      	adds	r3, r4, #4
    1fa2:	4390      	bics	r0, r2
    1fa4:	1ac3      	subs	r3, r0, r3
    1fa6:	d0e7      	beq.n	1f78 <_malloc_r+0x58>
    1fa8:	425a      	negs	r2, r3
    1faa:	50e2      	str	r2, [r4, r3]
    1fac:	e7e4      	b.n	1f78 <_malloc_r+0x58>
    1fae:	684b      	ldr	r3, [r1, #4]
    1fb0:	6063      	str	r3, [r4, #4]
    1fb2:	000c      	movs	r4, r1
    1fb4:	e7ee      	b.n	1f94 <_malloc_r+0x74>
    1fb6:	000c      	movs	r4, r1
    1fb8:	6849      	ldr	r1, [r1, #4]
    1fba:	e7c2      	b.n	1f42 <_malloc_r+0x22>
    1fbc:	2303      	movs	r3, #3
    1fbe:	1cc4      	adds	r4, r0, #3
    1fc0:	439c      	bics	r4, r3
    1fc2:	42a0      	cmp	r0, r4
    1fc4:	d0e0      	beq.n	1f88 <_malloc_r+0x68>
    1fc6:	1a21      	subs	r1, r4, r0
    1fc8:	0030      	movs	r0, r6
    1fca:	f000 faf5 	bl	25b8 <_sbrk_r>
    1fce:	1c43      	adds	r3, r0, #1
    1fd0:	d1da      	bne.n	1f88 <_malloc_r+0x68>
    1fd2:	e7c6      	b.n	1f62 <_malloc_r+0x42>
    1fd4:	200001d0 	.word	0x200001d0
    1fd8:	200001d4 	.word	0x200001d4

00001fdc <__ssputs_r>:
    1fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
    1fde:	688e      	ldr	r6, [r1, #8]
    1fe0:	b085      	sub	sp, #20
    1fe2:	0007      	movs	r7, r0
    1fe4:	000c      	movs	r4, r1
    1fe6:	9203      	str	r2, [sp, #12]
    1fe8:	9301      	str	r3, [sp, #4]
    1fea:	429e      	cmp	r6, r3
    1fec:	d839      	bhi.n	2062 <STACK_SIZE+0x62>
    1fee:	2390      	movs	r3, #144	; 0x90
    1ff0:	898a      	ldrh	r2, [r1, #12]
    1ff2:	00db      	lsls	r3, r3, #3
    1ff4:	421a      	tst	r2, r3
    1ff6:	d034      	beq.n	2062 <STACK_SIZE+0x62>
    1ff8:	2503      	movs	r5, #3
    1ffa:	6909      	ldr	r1, [r1, #16]
    1ffc:	6823      	ldr	r3, [r4, #0]
    1ffe:	1a5b      	subs	r3, r3, r1
    2000:	9302      	str	r3, [sp, #8]
    2002:	6963      	ldr	r3, [r4, #20]
    2004:	9802      	ldr	r0, [sp, #8]
    2006:	435d      	muls	r5, r3
    2008:	0feb      	lsrs	r3, r5, #31
    200a:	195d      	adds	r5, r3, r5
    200c:	9b01      	ldr	r3, [sp, #4]
    200e:	106d      	asrs	r5, r5, #1
    2010:	3301      	adds	r3, #1
    2012:	181b      	adds	r3, r3, r0
    2014:	42ab      	cmp	r3, r5
    2016:	d900      	bls.n	201a <STACK_SIZE+0x1a>
    2018:	001d      	movs	r5, r3
    201a:	0553      	lsls	r3, r2, #21
    201c:	d532      	bpl.n	2084 <STACK_SIZE+0x84>
    201e:	0029      	movs	r1, r5
    2020:	0038      	movs	r0, r7
    2022:	f7ff ff7d 	bl	1f20 <_malloc_r>
    2026:	1e06      	subs	r6, r0, #0
    2028:	d109      	bne.n	203e <STACK_SIZE+0x3e>
    202a:	230c      	movs	r3, #12
    202c:	603b      	str	r3, [r7, #0]
    202e:	2340      	movs	r3, #64	; 0x40
    2030:	2001      	movs	r0, #1
    2032:	89a2      	ldrh	r2, [r4, #12]
    2034:	4240      	negs	r0, r0
    2036:	4313      	orrs	r3, r2
    2038:	81a3      	strh	r3, [r4, #12]
    203a:	b005      	add	sp, #20
    203c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    203e:	9a02      	ldr	r2, [sp, #8]
    2040:	6921      	ldr	r1, [r4, #16]
    2042:	f000 fad6 	bl	25f2 <memcpy>
    2046:	89a3      	ldrh	r3, [r4, #12]
    2048:	4a14      	ldr	r2, [pc, #80]	; (209c <STACK_SIZE+0x9c>)
    204a:	401a      	ands	r2, r3
    204c:	2380      	movs	r3, #128	; 0x80
    204e:	4313      	orrs	r3, r2
    2050:	81a3      	strh	r3, [r4, #12]
    2052:	9b02      	ldr	r3, [sp, #8]
    2054:	6126      	str	r6, [r4, #16]
    2056:	18f6      	adds	r6, r6, r3
    2058:	6026      	str	r6, [r4, #0]
    205a:	6165      	str	r5, [r4, #20]
    205c:	9e01      	ldr	r6, [sp, #4]
    205e:	1aed      	subs	r5, r5, r3
    2060:	60a5      	str	r5, [r4, #8]
    2062:	9b01      	ldr	r3, [sp, #4]
    2064:	42b3      	cmp	r3, r6
    2066:	d200      	bcs.n	206a <STACK_SIZE+0x6a>
    2068:	001e      	movs	r6, r3
    206a:	0032      	movs	r2, r6
    206c:	9903      	ldr	r1, [sp, #12]
    206e:	6820      	ldr	r0, [r4, #0]
    2070:	f000 fac8 	bl	2604 <memmove>
    2074:	68a3      	ldr	r3, [r4, #8]
    2076:	2000      	movs	r0, #0
    2078:	1b9b      	subs	r3, r3, r6
    207a:	60a3      	str	r3, [r4, #8]
    207c:	6823      	ldr	r3, [r4, #0]
    207e:	199e      	adds	r6, r3, r6
    2080:	6026      	str	r6, [r4, #0]
    2082:	e7da      	b.n	203a <STACK_SIZE+0x3a>
    2084:	002a      	movs	r2, r5
    2086:	0038      	movs	r0, r7
    2088:	f000 fb1a 	bl	26c0 <_realloc_r>
    208c:	1e06      	subs	r6, r0, #0
    208e:	d1e0      	bne.n	2052 <STACK_SIZE+0x52>
    2090:	6921      	ldr	r1, [r4, #16]
    2092:	0038      	movs	r0, r7
    2094:	f000 faca 	bl	262c <_free_r>
    2098:	e7c7      	b.n	202a <STACK_SIZE+0x2a>
    209a:	46c0      	nop			; (mov r8, r8)
    209c:	fffffb7f 	.word	0xfffffb7f

000020a0 <_svfiprintf_r>:
    20a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    20a2:	b09f      	sub	sp, #124	; 0x7c
    20a4:	9002      	str	r0, [sp, #8]
    20a6:	9305      	str	r3, [sp, #20]
    20a8:	898b      	ldrh	r3, [r1, #12]
    20aa:	000f      	movs	r7, r1
    20ac:	0016      	movs	r6, r2
    20ae:	061b      	lsls	r3, r3, #24
    20b0:	d511      	bpl.n	20d6 <_svfiprintf_r+0x36>
    20b2:	690b      	ldr	r3, [r1, #16]
    20b4:	2b00      	cmp	r3, #0
    20b6:	d10e      	bne.n	20d6 <_svfiprintf_r+0x36>
    20b8:	2140      	movs	r1, #64	; 0x40
    20ba:	f7ff ff31 	bl	1f20 <_malloc_r>
    20be:	6038      	str	r0, [r7, #0]
    20c0:	6138      	str	r0, [r7, #16]
    20c2:	2800      	cmp	r0, #0
    20c4:	d105      	bne.n	20d2 <_svfiprintf_r+0x32>
    20c6:	230c      	movs	r3, #12
    20c8:	9a02      	ldr	r2, [sp, #8]
    20ca:	3801      	subs	r0, #1
    20cc:	6013      	str	r3, [r2, #0]
    20ce:	b01f      	add	sp, #124	; 0x7c
    20d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    20d2:	2340      	movs	r3, #64	; 0x40
    20d4:	617b      	str	r3, [r7, #20]
    20d6:	2300      	movs	r3, #0
    20d8:	ad06      	add	r5, sp, #24
    20da:	616b      	str	r3, [r5, #20]
    20dc:	3320      	adds	r3, #32
    20de:	766b      	strb	r3, [r5, #25]
    20e0:	3310      	adds	r3, #16
    20e2:	76ab      	strb	r3, [r5, #26]
    20e4:	0034      	movs	r4, r6
    20e6:	7823      	ldrb	r3, [r4, #0]
    20e8:	2b00      	cmp	r3, #0
    20ea:	d147      	bne.n	217c <_svfiprintf_r+0xdc>
    20ec:	1ba3      	subs	r3, r4, r6
    20ee:	9304      	str	r3, [sp, #16]
    20f0:	d00d      	beq.n	210e <_svfiprintf_r+0x6e>
    20f2:	1ba3      	subs	r3, r4, r6
    20f4:	0032      	movs	r2, r6
    20f6:	0039      	movs	r1, r7
    20f8:	9802      	ldr	r0, [sp, #8]
    20fa:	f7ff ff6f 	bl	1fdc <__ssputs_r>
    20fe:	1c43      	adds	r3, r0, #1
    2100:	d100      	bne.n	2104 <_svfiprintf_r+0x64>
    2102:	e0b5      	b.n	2270 <_svfiprintf_r+0x1d0>
    2104:	696a      	ldr	r2, [r5, #20]
    2106:	9b04      	ldr	r3, [sp, #16]
    2108:	4694      	mov	ip, r2
    210a:	4463      	add	r3, ip
    210c:	616b      	str	r3, [r5, #20]
    210e:	7823      	ldrb	r3, [r4, #0]
    2110:	2b00      	cmp	r3, #0
    2112:	d100      	bne.n	2116 <_svfiprintf_r+0x76>
    2114:	e0ac      	b.n	2270 <_svfiprintf_r+0x1d0>
    2116:	2201      	movs	r2, #1
    2118:	2300      	movs	r3, #0
    211a:	4252      	negs	r2, r2
    211c:	606a      	str	r2, [r5, #4]
    211e:	a902      	add	r1, sp, #8
    2120:	3254      	adds	r2, #84	; 0x54
    2122:	1852      	adds	r2, r2, r1
    2124:	3401      	adds	r4, #1
    2126:	602b      	str	r3, [r5, #0]
    2128:	60eb      	str	r3, [r5, #12]
    212a:	60ab      	str	r3, [r5, #8]
    212c:	7013      	strb	r3, [r2, #0]
    212e:	65ab      	str	r3, [r5, #88]	; 0x58
    2130:	4e58      	ldr	r6, [pc, #352]	; (2294 <_svfiprintf_r+0x1f4>)
    2132:	2205      	movs	r2, #5
    2134:	7821      	ldrb	r1, [r4, #0]
    2136:	0030      	movs	r0, r6
    2138:	f000 fa50 	bl	25dc <memchr>
    213c:	1c62      	adds	r2, r4, #1
    213e:	2800      	cmp	r0, #0
    2140:	d120      	bne.n	2184 <_svfiprintf_r+0xe4>
    2142:	6829      	ldr	r1, [r5, #0]
    2144:	06cb      	lsls	r3, r1, #27
    2146:	d504      	bpl.n	2152 <_svfiprintf_r+0xb2>
    2148:	2353      	movs	r3, #83	; 0x53
    214a:	ae02      	add	r6, sp, #8
    214c:	3020      	adds	r0, #32
    214e:	199b      	adds	r3, r3, r6
    2150:	7018      	strb	r0, [r3, #0]
    2152:	070b      	lsls	r3, r1, #28
    2154:	d504      	bpl.n	2160 <_svfiprintf_r+0xc0>
    2156:	2353      	movs	r3, #83	; 0x53
    2158:	202b      	movs	r0, #43	; 0x2b
    215a:	ae02      	add	r6, sp, #8
    215c:	199b      	adds	r3, r3, r6
    215e:	7018      	strb	r0, [r3, #0]
    2160:	7823      	ldrb	r3, [r4, #0]
    2162:	2b2a      	cmp	r3, #42	; 0x2a
    2164:	d016      	beq.n	2194 <_svfiprintf_r+0xf4>
    2166:	2000      	movs	r0, #0
    2168:	210a      	movs	r1, #10
    216a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    216c:	7822      	ldrb	r2, [r4, #0]
    216e:	3a30      	subs	r2, #48	; 0x30
    2170:	2a09      	cmp	r2, #9
    2172:	d955      	bls.n	2220 <_svfiprintf_r+0x180>
    2174:	2800      	cmp	r0, #0
    2176:	d015      	beq.n	21a4 <_svfiprintf_r+0x104>
    2178:	9309      	str	r3, [sp, #36]	; 0x24
    217a:	e013      	b.n	21a4 <_svfiprintf_r+0x104>
    217c:	2b25      	cmp	r3, #37	; 0x25
    217e:	d0b5      	beq.n	20ec <_svfiprintf_r+0x4c>
    2180:	3401      	adds	r4, #1
    2182:	e7b0      	b.n	20e6 <_svfiprintf_r+0x46>
    2184:	2301      	movs	r3, #1
    2186:	1b80      	subs	r0, r0, r6
    2188:	4083      	lsls	r3, r0
    218a:	6829      	ldr	r1, [r5, #0]
    218c:	0014      	movs	r4, r2
    218e:	430b      	orrs	r3, r1
    2190:	602b      	str	r3, [r5, #0]
    2192:	e7cd      	b.n	2130 <_svfiprintf_r+0x90>
    2194:	9b05      	ldr	r3, [sp, #20]
    2196:	1d18      	adds	r0, r3, #4
    2198:	681b      	ldr	r3, [r3, #0]
    219a:	9005      	str	r0, [sp, #20]
    219c:	2b00      	cmp	r3, #0
    219e:	db39      	blt.n	2214 <_svfiprintf_r+0x174>
    21a0:	9309      	str	r3, [sp, #36]	; 0x24
    21a2:	0014      	movs	r4, r2
    21a4:	7823      	ldrb	r3, [r4, #0]
    21a6:	2b2e      	cmp	r3, #46	; 0x2e
    21a8:	d10b      	bne.n	21c2 <_svfiprintf_r+0x122>
    21aa:	7863      	ldrb	r3, [r4, #1]
    21ac:	1c62      	adds	r2, r4, #1
    21ae:	2b2a      	cmp	r3, #42	; 0x2a
    21b0:	d13e      	bne.n	2230 <_svfiprintf_r+0x190>
    21b2:	9b05      	ldr	r3, [sp, #20]
    21b4:	3402      	adds	r4, #2
    21b6:	1d1a      	adds	r2, r3, #4
    21b8:	681b      	ldr	r3, [r3, #0]
    21ba:	9205      	str	r2, [sp, #20]
    21bc:	2b00      	cmp	r3, #0
    21be:	db34      	blt.n	222a <_svfiprintf_r+0x18a>
    21c0:	9307      	str	r3, [sp, #28]
    21c2:	4e35      	ldr	r6, [pc, #212]	; (2298 <_svfiprintf_r+0x1f8>)
    21c4:	7821      	ldrb	r1, [r4, #0]
    21c6:	2203      	movs	r2, #3
    21c8:	0030      	movs	r0, r6
    21ca:	f000 fa07 	bl	25dc <memchr>
    21ce:	2800      	cmp	r0, #0
    21d0:	d006      	beq.n	21e0 <_svfiprintf_r+0x140>
    21d2:	2340      	movs	r3, #64	; 0x40
    21d4:	1b80      	subs	r0, r0, r6
    21d6:	4083      	lsls	r3, r0
    21d8:	682a      	ldr	r2, [r5, #0]
    21da:	3401      	adds	r4, #1
    21dc:	4313      	orrs	r3, r2
    21de:	602b      	str	r3, [r5, #0]
    21e0:	7821      	ldrb	r1, [r4, #0]
    21e2:	2206      	movs	r2, #6
    21e4:	482d      	ldr	r0, [pc, #180]	; (229c <_svfiprintf_r+0x1fc>)
    21e6:	1c66      	adds	r6, r4, #1
    21e8:	7629      	strb	r1, [r5, #24]
    21ea:	f000 f9f7 	bl	25dc <memchr>
    21ee:	2800      	cmp	r0, #0
    21f0:	d046      	beq.n	2280 <_svfiprintf_r+0x1e0>
    21f2:	4b2b      	ldr	r3, [pc, #172]	; (22a0 <_svfiprintf_r+0x200>)
    21f4:	2b00      	cmp	r3, #0
    21f6:	d12f      	bne.n	2258 <_svfiprintf_r+0x1b8>
    21f8:	6829      	ldr	r1, [r5, #0]
    21fa:	9b05      	ldr	r3, [sp, #20]
    21fc:	2207      	movs	r2, #7
    21fe:	05c9      	lsls	r1, r1, #23
    2200:	d528      	bpl.n	2254 <_svfiprintf_r+0x1b4>
    2202:	189b      	adds	r3, r3, r2
    2204:	4393      	bics	r3, r2
    2206:	3308      	adds	r3, #8
    2208:	9305      	str	r3, [sp, #20]
    220a:	696b      	ldr	r3, [r5, #20]
    220c:	9a03      	ldr	r2, [sp, #12]
    220e:	189b      	adds	r3, r3, r2
    2210:	616b      	str	r3, [r5, #20]
    2212:	e767      	b.n	20e4 <_svfiprintf_r+0x44>
    2214:	425b      	negs	r3, r3
    2216:	60eb      	str	r3, [r5, #12]
    2218:	2302      	movs	r3, #2
    221a:	430b      	orrs	r3, r1
    221c:	602b      	str	r3, [r5, #0]
    221e:	e7c0      	b.n	21a2 <_svfiprintf_r+0x102>
    2220:	434b      	muls	r3, r1
    2222:	3401      	adds	r4, #1
    2224:	189b      	adds	r3, r3, r2
    2226:	2001      	movs	r0, #1
    2228:	e7a0      	b.n	216c <_svfiprintf_r+0xcc>
    222a:	2301      	movs	r3, #1
    222c:	425b      	negs	r3, r3
    222e:	e7c7      	b.n	21c0 <_svfiprintf_r+0x120>
    2230:	2300      	movs	r3, #0
    2232:	0014      	movs	r4, r2
    2234:	200a      	movs	r0, #10
    2236:	001a      	movs	r2, r3
    2238:	606b      	str	r3, [r5, #4]
    223a:	7821      	ldrb	r1, [r4, #0]
    223c:	3930      	subs	r1, #48	; 0x30
    223e:	2909      	cmp	r1, #9
    2240:	d903      	bls.n	224a <_svfiprintf_r+0x1aa>
    2242:	2b00      	cmp	r3, #0
    2244:	d0bd      	beq.n	21c2 <_svfiprintf_r+0x122>
    2246:	9207      	str	r2, [sp, #28]
    2248:	e7bb      	b.n	21c2 <_svfiprintf_r+0x122>
    224a:	4342      	muls	r2, r0
    224c:	3401      	adds	r4, #1
    224e:	1852      	adds	r2, r2, r1
    2250:	2301      	movs	r3, #1
    2252:	e7f2      	b.n	223a <_svfiprintf_r+0x19a>
    2254:	3307      	adds	r3, #7
    2256:	e7d5      	b.n	2204 <_svfiprintf_r+0x164>
    2258:	ab05      	add	r3, sp, #20
    225a:	9300      	str	r3, [sp, #0]
    225c:	003a      	movs	r2, r7
    225e:	4b11      	ldr	r3, [pc, #68]	; (22a4 <_svfiprintf_r+0x204>)
    2260:	0029      	movs	r1, r5
    2262:	9802      	ldr	r0, [sp, #8]
    2264:	e000      	b.n	2268 <_svfiprintf_r+0x1c8>
    2266:	bf00      	nop
    2268:	9003      	str	r0, [sp, #12]
    226a:	9b03      	ldr	r3, [sp, #12]
    226c:	3301      	adds	r3, #1
    226e:	d1cc      	bne.n	220a <_svfiprintf_r+0x16a>
    2270:	89bb      	ldrh	r3, [r7, #12]
    2272:	980b      	ldr	r0, [sp, #44]	; 0x2c
    2274:	065b      	lsls	r3, r3, #25
    2276:	d400      	bmi.n	227a <_svfiprintf_r+0x1da>
    2278:	e729      	b.n	20ce <_svfiprintf_r+0x2e>
    227a:	2001      	movs	r0, #1
    227c:	4240      	negs	r0, r0
    227e:	e726      	b.n	20ce <_svfiprintf_r+0x2e>
    2280:	ab05      	add	r3, sp, #20
    2282:	9300      	str	r3, [sp, #0]
    2284:	003a      	movs	r2, r7
    2286:	4b07      	ldr	r3, [pc, #28]	; (22a4 <_svfiprintf_r+0x204>)
    2288:	0029      	movs	r1, r5
    228a:	9802      	ldr	r0, [sp, #8]
    228c:	f000 f87a 	bl	2384 <_printf_i>
    2290:	e7ea      	b.n	2268 <_svfiprintf_r+0x1c8>
    2292:	46c0      	nop			; (mov r8, r8)
    2294:	00002a1c 	.word	0x00002a1c
    2298:	00002a22 	.word	0x00002a22
    229c:	00002a26 	.word	0x00002a26
    22a0:	00000000 	.word	0x00000000
    22a4:	00001fdd 	.word	0x00001fdd

000022a8 <_printf_common>:
    22a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    22aa:	0015      	movs	r5, r2
    22ac:	9301      	str	r3, [sp, #4]
    22ae:	688a      	ldr	r2, [r1, #8]
    22b0:	690b      	ldr	r3, [r1, #16]
    22b2:	9000      	str	r0, [sp, #0]
    22b4:	000c      	movs	r4, r1
    22b6:	4293      	cmp	r3, r2
    22b8:	da00      	bge.n	22bc <_printf_common+0x14>
    22ba:	0013      	movs	r3, r2
    22bc:	0022      	movs	r2, r4
    22be:	602b      	str	r3, [r5, #0]
    22c0:	3243      	adds	r2, #67	; 0x43
    22c2:	7812      	ldrb	r2, [r2, #0]
    22c4:	2a00      	cmp	r2, #0
    22c6:	d001      	beq.n	22cc <_printf_common+0x24>
    22c8:	3301      	adds	r3, #1
    22ca:	602b      	str	r3, [r5, #0]
    22cc:	6823      	ldr	r3, [r4, #0]
    22ce:	069b      	lsls	r3, r3, #26
    22d0:	d502      	bpl.n	22d8 <_printf_common+0x30>
    22d2:	682b      	ldr	r3, [r5, #0]
    22d4:	3302      	adds	r3, #2
    22d6:	602b      	str	r3, [r5, #0]
    22d8:	2706      	movs	r7, #6
    22da:	6823      	ldr	r3, [r4, #0]
    22dc:	401f      	ands	r7, r3
    22de:	d027      	beq.n	2330 <_printf_common+0x88>
    22e0:	0023      	movs	r3, r4
    22e2:	3343      	adds	r3, #67	; 0x43
    22e4:	781b      	ldrb	r3, [r3, #0]
    22e6:	1e5a      	subs	r2, r3, #1
    22e8:	4193      	sbcs	r3, r2
    22ea:	6822      	ldr	r2, [r4, #0]
    22ec:	0692      	lsls	r2, r2, #26
    22ee:	d430      	bmi.n	2352 <_printf_common+0xaa>
    22f0:	0022      	movs	r2, r4
    22f2:	9901      	ldr	r1, [sp, #4]
    22f4:	3243      	adds	r2, #67	; 0x43
    22f6:	9800      	ldr	r0, [sp, #0]
    22f8:	9e08      	ldr	r6, [sp, #32]
    22fa:	47b0      	blx	r6
    22fc:	1c43      	adds	r3, r0, #1
    22fe:	d025      	beq.n	234c <_printf_common+0xa4>
    2300:	2306      	movs	r3, #6
    2302:	6820      	ldr	r0, [r4, #0]
    2304:	682a      	ldr	r2, [r5, #0]
    2306:	68e1      	ldr	r1, [r4, #12]
    2308:	4003      	ands	r3, r0
    230a:	2500      	movs	r5, #0
    230c:	2b04      	cmp	r3, #4
    230e:	d103      	bne.n	2318 <_printf_common+0x70>
    2310:	1a8d      	subs	r5, r1, r2
    2312:	43eb      	mvns	r3, r5
    2314:	17db      	asrs	r3, r3, #31
    2316:	401d      	ands	r5, r3
    2318:	68a3      	ldr	r3, [r4, #8]
    231a:	6922      	ldr	r2, [r4, #16]
    231c:	4293      	cmp	r3, r2
    231e:	dd01      	ble.n	2324 <_printf_common+0x7c>
    2320:	1a9b      	subs	r3, r3, r2
    2322:	18ed      	adds	r5, r5, r3
    2324:	2700      	movs	r7, #0
    2326:	42bd      	cmp	r5, r7
    2328:	d120      	bne.n	236c <_printf_common+0xc4>
    232a:	2000      	movs	r0, #0
    232c:	e010      	b.n	2350 <_printf_common+0xa8>
    232e:	3701      	adds	r7, #1
    2330:	68e3      	ldr	r3, [r4, #12]
    2332:	682a      	ldr	r2, [r5, #0]
    2334:	1a9b      	subs	r3, r3, r2
    2336:	429f      	cmp	r7, r3
    2338:	dad2      	bge.n	22e0 <_printf_common+0x38>
    233a:	0022      	movs	r2, r4
    233c:	2301      	movs	r3, #1
    233e:	3219      	adds	r2, #25
    2340:	9901      	ldr	r1, [sp, #4]
    2342:	9800      	ldr	r0, [sp, #0]
    2344:	9e08      	ldr	r6, [sp, #32]
    2346:	47b0      	blx	r6
    2348:	1c43      	adds	r3, r0, #1
    234a:	d1f0      	bne.n	232e <_printf_common+0x86>
    234c:	2001      	movs	r0, #1
    234e:	4240      	negs	r0, r0
    2350:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2352:	2030      	movs	r0, #48	; 0x30
    2354:	18e1      	adds	r1, r4, r3
    2356:	3143      	adds	r1, #67	; 0x43
    2358:	7008      	strb	r0, [r1, #0]
    235a:	0021      	movs	r1, r4
    235c:	1c5a      	adds	r2, r3, #1
    235e:	3145      	adds	r1, #69	; 0x45
    2360:	7809      	ldrb	r1, [r1, #0]
    2362:	18a2      	adds	r2, r4, r2
    2364:	3243      	adds	r2, #67	; 0x43
    2366:	3302      	adds	r3, #2
    2368:	7011      	strb	r1, [r2, #0]
    236a:	e7c1      	b.n	22f0 <_printf_common+0x48>
    236c:	0022      	movs	r2, r4
    236e:	2301      	movs	r3, #1
    2370:	321a      	adds	r2, #26
    2372:	9901      	ldr	r1, [sp, #4]
    2374:	9800      	ldr	r0, [sp, #0]
    2376:	9e08      	ldr	r6, [sp, #32]
    2378:	47b0      	blx	r6
    237a:	1c43      	adds	r3, r0, #1
    237c:	d0e6      	beq.n	234c <_printf_common+0xa4>
    237e:	3701      	adds	r7, #1
    2380:	e7d1      	b.n	2326 <_printf_common+0x7e>
	...

00002384 <_printf_i>:
    2384:	b5f0      	push	{r4, r5, r6, r7, lr}
    2386:	b08b      	sub	sp, #44	; 0x2c
    2388:	9206      	str	r2, [sp, #24]
    238a:	000a      	movs	r2, r1
    238c:	3243      	adds	r2, #67	; 0x43
    238e:	9307      	str	r3, [sp, #28]
    2390:	9005      	str	r0, [sp, #20]
    2392:	9204      	str	r2, [sp, #16]
    2394:	7e0a      	ldrb	r2, [r1, #24]
    2396:	000c      	movs	r4, r1
    2398:	9b10      	ldr	r3, [sp, #64]	; 0x40
    239a:	2a6e      	cmp	r2, #110	; 0x6e
    239c:	d100      	bne.n	23a0 <_printf_i+0x1c>
    239e:	e08f      	b.n	24c0 <_printf_i+0x13c>
    23a0:	d817      	bhi.n	23d2 <_printf_i+0x4e>
    23a2:	2a63      	cmp	r2, #99	; 0x63
    23a4:	d02c      	beq.n	2400 <_printf_i+0x7c>
    23a6:	d808      	bhi.n	23ba <_printf_i+0x36>
    23a8:	2a00      	cmp	r2, #0
    23aa:	d100      	bne.n	23ae <_printf_i+0x2a>
    23ac:	e099      	b.n	24e2 <_printf_i+0x15e>
    23ae:	2a58      	cmp	r2, #88	; 0x58
    23b0:	d054      	beq.n	245c <_printf_i+0xd8>
    23b2:	0026      	movs	r6, r4
    23b4:	3642      	adds	r6, #66	; 0x42
    23b6:	7032      	strb	r2, [r6, #0]
    23b8:	e029      	b.n	240e <_printf_i+0x8a>
    23ba:	2a64      	cmp	r2, #100	; 0x64
    23bc:	d001      	beq.n	23c2 <_printf_i+0x3e>
    23be:	2a69      	cmp	r2, #105	; 0x69
    23c0:	d1f7      	bne.n	23b2 <_printf_i+0x2e>
    23c2:	6821      	ldr	r1, [r4, #0]
    23c4:	681a      	ldr	r2, [r3, #0]
    23c6:	0608      	lsls	r0, r1, #24
    23c8:	d523      	bpl.n	2412 <_printf_i+0x8e>
    23ca:	1d11      	adds	r1, r2, #4
    23cc:	6019      	str	r1, [r3, #0]
    23ce:	6815      	ldr	r5, [r2, #0]
    23d0:	e025      	b.n	241e <_printf_i+0x9a>
    23d2:	2a73      	cmp	r2, #115	; 0x73
    23d4:	d100      	bne.n	23d8 <_printf_i+0x54>
    23d6:	e088      	b.n	24ea <_printf_i+0x166>
    23d8:	d808      	bhi.n	23ec <_printf_i+0x68>
    23da:	2a6f      	cmp	r2, #111	; 0x6f
    23dc:	d029      	beq.n	2432 <_printf_i+0xae>
    23de:	2a70      	cmp	r2, #112	; 0x70
    23e0:	d1e7      	bne.n	23b2 <_printf_i+0x2e>
    23e2:	2220      	movs	r2, #32
    23e4:	6809      	ldr	r1, [r1, #0]
    23e6:	430a      	orrs	r2, r1
    23e8:	6022      	str	r2, [r4, #0]
    23ea:	e003      	b.n	23f4 <_printf_i+0x70>
    23ec:	2a75      	cmp	r2, #117	; 0x75
    23ee:	d020      	beq.n	2432 <_printf_i+0xae>
    23f0:	2a78      	cmp	r2, #120	; 0x78
    23f2:	d1de      	bne.n	23b2 <_printf_i+0x2e>
    23f4:	0022      	movs	r2, r4
    23f6:	2178      	movs	r1, #120	; 0x78
    23f8:	3245      	adds	r2, #69	; 0x45
    23fa:	7011      	strb	r1, [r2, #0]
    23fc:	4a6c      	ldr	r2, [pc, #432]	; (25b0 <_printf_i+0x22c>)
    23fe:	e030      	b.n	2462 <_printf_i+0xde>
    2400:	000e      	movs	r6, r1
    2402:	681a      	ldr	r2, [r3, #0]
    2404:	3642      	adds	r6, #66	; 0x42
    2406:	1d11      	adds	r1, r2, #4
    2408:	6019      	str	r1, [r3, #0]
    240a:	6813      	ldr	r3, [r2, #0]
    240c:	7033      	strb	r3, [r6, #0]
    240e:	2301      	movs	r3, #1
    2410:	e079      	b.n	2506 <_printf_i+0x182>
    2412:	0649      	lsls	r1, r1, #25
    2414:	d5d9      	bpl.n	23ca <_printf_i+0x46>
    2416:	1d11      	adds	r1, r2, #4
    2418:	6019      	str	r1, [r3, #0]
    241a:	2300      	movs	r3, #0
    241c:	5ed5      	ldrsh	r5, [r2, r3]
    241e:	2d00      	cmp	r5, #0
    2420:	da03      	bge.n	242a <_printf_i+0xa6>
    2422:	232d      	movs	r3, #45	; 0x2d
    2424:	9a04      	ldr	r2, [sp, #16]
    2426:	426d      	negs	r5, r5
    2428:	7013      	strb	r3, [r2, #0]
    242a:	4b62      	ldr	r3, [pc, #392]	; (25b4 <_printf_i+0x230>)
    242c:	270a      	movs	r7, #10
    242e:	9303      	str	r3, [sp, #12]
    2430:	e02f      	b.n	2492 <_printf_i+0x10e>
    2432:	6820      	ldr	r0, [r4, #0]
    2434:	6819      	ldr	r1, [r3, #0]
    2436:	0605      	lsls	r5, r0, #24
    2438:	d503      	bpl.n	2442 <_printf_i+0xbe>
    243a:	1d08      	adds	r0, r1, #4
    243c:	6018      	str	r0, [r3, #0]
    243e:	680d      	ldr	r5, [r1, #0]
    2440:	e005      	b.n	244e <_printf_i+0xca>
    2442:	0640      	lsls	r0, r0, #25
    2444:	d5f9      	bpl.n	243a <_printf_i+0xb6>
    2446:	680d      	ldr	r5, [r1, #0]
    2448:	1d08      	adds	r0, r1, #4
    244a:	6018      	str	r0, [r3, #0]
    244c:	b2ad      	uxth	r5, r5
    244e:	4b59      	ldr	r3, [pc, #356]	; (25b4 <_printf_i+0x230>)
    2450:	2708      	movs	r7, #8
    2452:	9303      	str	r3, [sp, #12]
    2454:	2a6f      	cmp	r2, #111	; 0x6f
    2456:	d018      	beq.n	248a <_printf_i+0x106>
    2458:	270a      	movs	r7, #10
    245a:	e016      	b.n	248a <_printf_i+0x106>
    245c:	3145      	adds	r1, #69	; 0x45
    245e:	700a      	strb	r2, [r1, #0]
    2460:	4a54      	ldr	r2, [pc, #336]	; (25b4 <_printf_i+0x230>)
    2462:	9203      	str	r2, [sp, #12]
    2464:	681a      	ldr	r2, [r3, #0]
    2466:	6821      	ldr	r1, [r4, #0]
    2468:	1d10      	adds	r0, r2, #4
    246a:	6018      	str	r0, [r3, #0]
    246c:	6815      	ldr	r5, [r2, #0]
    246e:	0608      	lsls	r0, r1, #24
    2470:	d522      	bpl.n	24b8 <_printf_i+0x134>
    2472:	07cb      	lsls	r3, r1, #31
    2474:	d502      	bpl.n	247c <_printf_i+0xf8>
    2476:	2320      	movs	r3, #32
    2478:	4319      	orrs	r1, r3
    247a:	6021      	str	r1, [r4, #0]
    247c:	2710      	movs	r7, #16
    247e:	2d00      	cmp	r5, #0
    2480:	d103      	bne.n	248a <_printf_i+0x106>
    2482:	2320      	movs	r3, #32
    2484:	6822      	ldr	r2, [r4, #0]
    2486:	439a      	bics	r2, r3
    2488:	6022      	str	r2, [r4, #0]
    248a:	0023      	movs	r3, r4
    248c:	2200      	movs	r2, #0
    248e:	3343      	adds	r3, #67	; 0x43
    2490:	701a      	strb	r2, [r3, #0]
    2492:	6863      	ldr	r3, [r4, #4]
    2494:	60a3      	str	r3, [r4, #8]
    2496:	2b00      	cmp	r3, #0
    2498:	db5c      	blt.n	2554 <_printf_i+0x1d0>
    249a:	2204      	movs	r2, #4
    249c:	6821      	ldr	r1, [r4, #0]
    249e:	4391      	bics	r1, r2
    24a0:	6021      	str	r1, [r4, #0]
    24a2:	2d00      	cmp	r5, #0
    24a4:	d158      	bne.n	2558 <_printf_i+0x1d4>
    24a6:	9e04      	ldr	r6, [sp, #16]
    24a8:	2b00      	cmp	r3, #0
    24aa:	d064      	beq.n	2576 <_printf_i+0x1f2>
    24ac:	0026      	movs	r6, r4
    24ae:	9b03      	ldr	r3, [sp, #12]
    24b0:	3642      	adds	r6, #66	; 0x42
    24b2:	781b      	ldrb	r3, [r3, #0]
    24b4:	7033      	strb	r3, [r6, #0]
    24b6:	e05e      	b.n	2576 <_printf_i+0x1f2>
    24b8:	0648      	lsls	r0, r1, #25
    24ba:	d5da      	bpl.n	2472 <_printf_i+0xee>
    24bc:	b2ad      	uxth	r5, r5
    24be:	e7d8      	b.n	2472 <_printf_i+0xee>
    24c0:	6809      	ldr	r1, [r1, #0]
    24c2:	681a      	ldr	r2, [r3, #0]
    24c4:	0608      	lsls	r0, r1, #24
    24c6:	d505      	bpl.n	24d4 <_printf_i+0x150>
    24c8:	1d11      	adds	r1, r2, #4
    24ca:	6019      	str	r1, [r3, #0]
    24cc:	6813      	ldr	r3, [r2, #0]
    24ce:	6962      	ldr	r2, [r4, #20]
    24d0:	601a      	str	r2, [r3, #0]
    24d2:	e006      	b.n	24e2 <_printf_i+0x15e>
    24d4:	0649      	lsls	r1, r1, #25
    24d6:	d5f7      	bpl.n	24c8 <_printf_i+0x144>
    24d8:	1d11      	adds	r1, r2, #4
    24da:	6019      	str	r1, [r3, #0]
    24dc:	6813      	ldr	r3, [r2, #0]
    24de:	8aa2      	ldrh	r2, [r4, #20]
    24e0:	801a      	strh	r2, [r3, #0]
    24e2:	2300      	movs	r3, #0
    24e4:	9e04      	ldr	r6, [sp, #16]
    24e6:	6123      	str	r3, [r4, #16]
    24e8:	e054      	b.n	2594 <_printf_i+0x210>
    24ea:	681a      	ldr	r2, [r3, #0]
    24ec:	1d11      	adds	r1, r2, #4
    24ee:	6019      	str	r1, [r3, #0]
    24f0:	6816      	ldr	r6, [r2, #0]
    24f2:	2100      	movs	r1, #0
    24f4:	6862      	ldr	r2, [r4, #4]
    24f6:	0030      	movs	r0, r6
    24f8:	f000 f870 	bl	25dc <memchr>
    24fc:	2800      	cmp	r0, #0
    24fe:	d001      	beq.n	2504 <_printf_i+0x180>
    2500:	1b80      	subs	r0, r0, r6
    2502:	6060      	str	r0, [r4, #4]
    2504:	6863      	ldr	r3, [r4, #4]
    2506:	6123      	str	r3, [r4, #16]
    2508:	2300      	movs	r3, #0
    250a:	9a04      	ldr	r2, [sp, #16]
    250c:	7013      	strb	r3, [r2, #0]
    250e:	e041      	b.n	2594 <_printf_i+0x210>
    2510:	6923      	ldr	r3, [r4, #16]
    2512:	0032      	movs	r2, r6
    2514:	9906      	ldr	r1, [sp, #24]
    2516:	9805      	ldr	r0, [sp, #20]
    2518:	9d07      	ldr	r5, [sp, #28]
    251a:	47a8      	blx	r5
    251c:	1c43      	adds	r3, r0, #1
    251e:	d043      	beq.n	25a8 <_printf_i+0x224>
    2520:	6823      	ldr	r3, [r4, #0]
    2522:	2500      	movs	r5, #0
    2524:	079b      	lsls	r3, r3, #30
    2526:	d40f      	bmi.n	2548 <_printf_i+0x1c4>
    2528:	9b09      	ldr	r3, [sp, #36]	; 0x24
    252a:	68e0      	ldr	r0, [r4, #12]
    252c:	4298      	cmp	r0, r3
    252e:	da3d      	bge.n	25ac <_printf_i+0x228>
    2530:	0018      	movs	r0, r3
    2532:	e03b      	b.n	25ac <_printf_i+0x228>
    2534:	0022      	movs	r2, r4
    2536:	2301      	movs	r3, #1
    2538:	3219      	adds	r2, #25
    253a:	9906      	ldr	r1, [sp, #24]
    253c:	9805      	ldr	r0, [sp, #20]
    253e:	9e07      	ldr	r6, [sp, #28]
    2540:	47b0      	blx	r6
    2542:	1c43      	adds	r3, r0, #1
    2544:	d030      	beq.n	25a8 <_printf_i+0x224>
    2546:	3501      	adds	r5, #1
    2548:	68e3      	ldr	r3, [r4, #12]
    254a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    254c:	1a9b      	subs	r3, r3, r2
    254e:	429d      	cmp	r5, r3
    2550:	dbf0      	blt.n	2534 <_printf_i+0x1b0>
    2552:	e7e9      	b.n	2528 <_printf_i+0x1a4>
    2554:	2d00      	cmp	r5, #0
    2556:	d0a9      	beq.n	24ac <_printf_i+0x128>
    2558:	9e04      	ldr	r6, [sp, #16]
    255a:	0028      	movs	r0, r5
    255c:	0039      	movs	r1, r7
    255e:	f7ff f869 	bl	1634 <__aeabi_uidivmod>
    2562:	9b03      	ldr	r3, [sp, #12]
    2564:	3e01      	subs	r6, #1
    2566:	5c5b      	ldrb	r3, [r3, r1]
    2568:	0028      	movs	r0, r5
    256a:	7033      	strb	r3, [r6, #0]
    256c:	0039      	movs	r1, r7
    256e:	f7fe ffdb 	bl	1528 <__udivsi3>
    2572:	1e05      	subs	r5, r0, #0
    2574:	d1f1      	bne.n	255a <_printf_i+0x1d6>
    2576:	2f08      	cmp	r7, #8
    2578:	d109      	bne.n	258e <_printf_i+0x20a>
    257a:	6823      	ldr	r3, [r4, #0]
    257c:	07db      	lsls	r3, r3, #31
    257e:	d506      	bpl.n	258e <_printf_i+0x20a>
    2580:	6863      	ldr	r3, [r4, #4]
    2582:	6922      	ldr	r2, [r4, #16]
    2584:	4293      	cmp	r3, r2
    2586:	dc02      	bgt.n	258e <_printf_i+0x20a>
    2588:	2330      	movs	r3, #48	; 0x30
    258a:	3e01      	subs	r6, #1
    258c:	7033      	strb	r3, [r6, #0]
    258e:	9b04      	ldr	r3, [sp, #16]
    2590:	1b9b      	subs	r3, r3, r6
    2592:	6123      	str	r3, [r4, #16]
    2594:	9b07      	ldr	r3, [sp, #28]
    2596:	aa09      	add	r2, sp, #36	; 0x24
    2598:	9300      	str	r3, [sp, #0]
    259a:	0021      	movs	r1, r4
    259c:	9b06      	ldr	r3, [sp, #24]
    259e:	9805      	ldr	r0, [sp, #20]
    25a0:	f7ff fe82 	bl	22a8 <_printf_common>
    25a4:	1c43      	adds	r3, r0, #1
    25a6:	d1b3      	bne.n	2510 <_printf_i+0x18c>
    25a8:	2001      	movs	r0, #1
    25aa:	4240      	negs	r0, r0
    25ac:	b00b      	add	sp, #44	; 0x2c
    25ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    25b0:	00002a3e 	.word	0x00002a3e
    25b4:	00002a2d 	.word	0x00002a2d

000025b8 <_sbrk_r>:
    25b8:	2300      	movs	r3, #0
    25ba:	b570      	push	{r4, r5, r6, lr}
    25bc:	4c06      	ldr	r4, [pc, #24]	; (25d8 <_sbrk_r+0x20>)
    25be:	0005      	movs	r5, r0
    25c0:	0008      	movs	r0, r1
    25c2:	6023      	str	r3, [r4, #0]
    25c4:	f7fe fd94 	bl	10f0 <_sbrk>
    25c8:	1c43      	adds	r3, r0, #1
    25ca:	d103      	bne.n	25d4 <_sbrk_r+0x1c>
    25cc:	6823      	ldr	r3, [r4, #0]
    25ce:	2b00      	cmp	r3, #0
    25d0:	d000      	beq.n	25d4 <_sbrk_r+0x1c>
    25d2:	602b      	str	r3, [r5, #0]
    25d4:	bd70      	pop	{r4, r5, r6, pc}
    25d6:	46c0      	nop			; (mov r8, r8)
    25d8:	20000244 	.word	0x20000244

000025dc <memchr>:
    25dc:	b2c9      	uxtb	r1, r1
    25de:	1882      	adds	r2, r0, r2
    25e0:	4290      	cmp	r0, r2
    25e2:	d101      	bne.n	25e8 <memchr+0xc>
    25e4:	2000      	movs	r0, #0
    25e6:	4770      	bx	lr
    25e8:	7803      	ldrb	r3, [r0, #0]
    25ea:	428b      	cmp	r3, r1
    25ec:	d0fb      	beq.n	25e6 <memchr+0xa>
    25ee:	3001      	adds	r0, #1
    25f0:	e7f6      	b.n	25e0 <memchr+0x4>

000025f2 <memcpy>:
    25f2:	2300      	movs	r3, #0
    25f4:	b510      	push	{r4, lr}
    25f6:	429a      	cmp	r2, r3
    25f8:	d100      	bne.n	25fc <memcpy+0xa>
    25fa:	bd10      	pop	{r4, pc}
    25fc:	5ccc      	ldrb	r4, [r1, r3]
    25fe:	54c4      	strb	r4, [r0, r3]
    2600:	3301      	adds	r3, #1
    2602:	e7f8      	b.n	25f6 <memcpy+0x4>

00002604 <memmove>:
    2604:	b510      	push	{r4, lr}
    2606:	4288      	cmp	r0, r1
    2608:	d902      	bls.n	2610 <memmove+0xc>
    260a:	188b      	adds	r3, r1, r2
    260c:	4298      	cmp	r0, r3
    260e:	d308      	bcc.n	2622 <memmove+0x1e>
    2610:	2300      	movs	r3, #0
    2612:	429a      	cmp	r2, r3
    2614:	d007      	beq.n	2626 <memmove+0x22>
    2616:	5ccc      	ldrb	r4, [r1, r3]
    2618:	54c4      	strb	r4, [r0, r3]
    261a:	3301      	adds	r3, #1
    261c:	e7f9      	b.n	2612 <memmove+0xe>
    261e:	5c8b      	ldrb	r3, [r1, r2]
    2620:	5483      	strb	r3, [r0, r2]
    2622:	3a01      	subs	r2, #1
    2624:	d2fb      	bcs.n	261e <memmove+0x1a>
    2626:	bd10      	pop	{r4, pc}

00002628 <__malloc_lock>:
    2628:	4770      	bx	lr

0000262a <__malloc_unlock>:
    262a:	4770      	bx	lr

0000262c <_free_r>:
    262c:	b570      	push	{r4, r5, r6, lr}
    262e:	0005      	movs	r5, r0
    2630:	2900      	cmp	r1, #0
    2632:	d010      	beq.n	2656 <_free_r+0x2a>
    2634:	1f0c      	subs	r4, r1, #4
    2636:	6823      	ldr	r3, [r4, #0]
    2638:	2b00      	cmp	r3, #0
    263a:	da00      	bge.n	263e <_free_r+0x12>
    263c:	18e4      	adds	r4, r4, r3
    263e:	0028      	movs	r0, r5
    2640:	f7ff fff2 	bl	2628 <__malloc_lock>
    2644:	4a1d      	ldr	r2, [pc, #116]	; (26bc <_free_r+0x90>)
    2646:	6813      	ldr	r3, [r2, #0]
    2648:	2b00      	cmp	r3, #0
    264a:	d105      	bne.n	2658 <_free_r+0x2c>
    264c:	6063      	str	r3, [r4, #4]
    264e:	6014      	str	r4, [r2, #0]
    2650:	0028      	movs	r0, r5
    2652:	f7ff ffea 	bl	262a <__malloc_unlock>
    2656:	bd70      	pop	{r4, r5, r6, pc}
    2658:	42a3      	cmp	r3, r4
    265a:	d909      	bls.n	2670 <_free_r+0x44>
    265c:	6821      	ldr	r1, [r4, #0]
    265e:	1860      	adds	r0, r4, r1
    2660:	4283      	cmp	r3, r0
    2662:	d1f3      	bne.n	264c <_free_r+0x20>
    2664:	6818      	ldr	r0, [r3, #0]
    2666:	685b      	ldr	r3, [r3, #4]
    2668:	1841      	adds	r1, r0, r1
    266a:	6021      	str	r1, [r4, #0]
    266c:	e7ee      	b.n	264c <_free_r+0x20>
    266e:	0013      	movs	r3, r2
    2670:	685a      	ldr	r2, [r3, #4]
    2672:	2a00      	cmp	r2, #0
    2674:	d001      	beq.n	267a <_free_r+0x4e>
    2676:	42a2      	cmp	r2, r4
    2678:	d9f9      	bls.n	266e <_free_r+0x42>
    267a:	6819      	ldr	r1, [r3, #0]
    267c:	1858      	adds	r0, r3, r1
    267e:	42a0      	cmp	r0, r4
    2680:	d10b      	bne.n	269a <_free_r+0x6e>
    2682:	6820      	ldr	r0, [r4, #0]
    2684:	1809      	adds	r1, r1, r0
    2686:	1858      	adds	r0, r3, r1
    2688:	6019      	str	r1, [r3, #0]
    268a:	4282      	cmp	r2, r0
    268c:	d1e0      	bne.n	2650 <_free_r+0x24>
    268e:	6810      	ldr	r0, [r2, #0]
    2690:	6852      	ldr	r2, [r2, #4]
    2692:	1841      	adds	r1, r0, r1
    2694:	6019      	str	r1, [r3, #0]
    2696:	605a      	str	r2, [r3, #4]
    2698:	e7da      	b.n	2650 <_free_r+0x24>
    269a:	42a0      	cmp	r0, r4
    269c:	d902      	bls.n	26a4 <_free_r+0x78>
    269e:	230c      	movs	r3, #12
    26a0:	602b      	str	r3, [r5, #0]
    26a2:	e7d5      	b.n	2650 <_free_r+0x24>
    26a4:	6821      	ldr	r1, [r4, #0]
    26a6:	1860      	adds	r0, r4, r1
    26a8:	4282      	cmp	r2, r0
    26aa:	d103      	bne.n	26b4 <_free_r+0x88>
    26ac:	6810      	ldr	r0, [r2, #0]
    26ae:	6852      	ldr	r2, [r2, #4]
    26b0:	1841      	adds	r1, r0, r1
    26b2:	6021      	str	r1, [r4, #0]
    26b4:	6062      	str	r2, [r4, #4]
    26b6:	605c      	str	r4, [r3, #4]
    26b8:	e7ca      	b.n	2650 <_free_r+0x24>
    26ba:	46c0      	nop			; (mov r8, r8)
    26bc:	200001d0 	.word	0x200001d0

000026c0 <_realloc_r>:
    26c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    26c2:	0007      	movs	r7, r0
    26c4:	000d      	movs	r5, r1
    26c6:	0016      	movs	r6, r2
    26c8:	2900      	cmp	r1, #0
    26ca:	d105      	bne.n	26d8 <_realloc_r+0x18>
    26cc:	0011      	movs	r1, r2
    26ce:	f7ff fc27 	bl	1f20 <_malloc_r>
    26d2:	0004      	movs	r4, r0
    26d4:	0020      	movs	r0, r4
    26d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    26d8:	2a00      	cmp	r2, #0
    26da:	d103      	bne.n	26e4 <_realloc_r+0x24>
    26dc:	f7ff ffa6 	bl	262c <_free_r>
    26e0:	0034      	movs	r4, r6
    26e2:	e7f7      	b.n	26d4 <_realloc_r+0x14>
    26e4:	f000 f812 	bl	270c <_malloc_usable_size_r>
    26e8:	002c      	movs	r4, r5
    26ea:	4286      	cmp	r6, r0
    26ec:	d9f2      	bls.n	26d4 <_realloc_r+0x14>
    26ee:	0031      	movs	r1, r6
    26f0:	0038      	movs	r0, r7
    26f2:	f7ff fc15 	bl	1f20 <_malloc_r>
    26f6:	1e04      	subs	r4, r0, #0
    26f8:	d0ec      	beq.n	26d4 <_realloc_r+0x14>
    26fa:	0029      	movs	r1, r5
    26fc:	0032      	movs	r2, r6
    26fe:	f7ff ff78 	bl	25f2 <memcpy>
    2702:	0029      	movs	r1, r5
    2704:	0038      	movs	r0, r7
    2706:	f7ff ff91 	bl	262c <_free_r>
    270a:	e7e3      	b.n	26d4 <_realloc_r+0x14>

0000270c <_malloc_usable_size_r>:
    270c:	1f0b      	subs	r3, r1, #4
    270e:	681b      	ldr	r3, [r3, #0]
    2710:	1f18      	subs	r0, r3, #4
    2712:	2b00      	cmp	r3, #0
    2714:	da01      	bge.n	271a <_malloc_usable_size_r+0xe>
    2716:	580b      	ldr	r3, [r1, r0]
    2718:	18c0      	adds	r0, r0, r3
    271a:	4770      	bx	lr
    271c:	0044454c 	.word	0x0044454c
    2720:	696e6f4d 	.word	0x696e6f4d
    2724:	00726f74 	.word	0x00726f74
    2728:	454c202d 	.word	0x454c202d
    272c:	6c622044 	.word	0x6c622044
    2730:	206b6e69 	.word	0x206b6e69
    2734:	6b736174 	.word	0x6b736174
    2738:	74636120 	.word	0x74636120
    273c:	2e657669 	.word	0x2e657669
    2740:	00000a0d 	.word	0x00000a0d
    2744:	454c202d 	.word	0x454c202d
    2748:	464f2044 	.word	0x464f2044
    274c:	6e612046 	.word	0x6e612046
    2750:	6c622064 	.word	0x6c622064
    2754:	206b6e69 	.word	0x206b6e69
    2758:	6b736174 	.word	0x6b736174
    275c:	73757320 	.word	0x73757320
    2760:	646e6570 	.word	0x646e6570
    2764:	0d2e6465 	.word	0x0d2e6465
    2768:	0000000a 	.word	0x0000000a
    276c:	6f4d202d 	.word	0x6f4d202d
    2770:	6f74696e 	.word	0x6f74696e
    2774:	61742072 	.word	0x61742072
    2778:	61206b73 	.word	0x61206b73
    277c:	76697463 	.word	0x76697463
    2780:	0a0d2e65 	.word	0x0a0d2e65
    2784:	00000000 	.word	0x00000000
    2788:	6f4d202d 	.word	0x6f4d202d
    278c:	6f74696e 	.word	0x6f74696e
    2790:	61742072 	.word	0x61742072
    2794:	73206b73 	.word	0x73206b73
    2798:	65707375 	.word	0x65707375
    279c:	6465646e 	.word	0x6465646e
    27a0:	000a0d2e 	.word	0x000a0d2e
    27a4:	73303125 	.word	0x73303125
    27a8:	6425203a 	.word	0x6425203a
    27ac:	00662520 	.word	0x00662520
    27b0:	313b315b 	.word	0x313b315b
    27b4:	00000048 	.word	0x00000048
    27b8:	73256325 	.word	0x73256325
    27bc:	73256325 	.word	0x73256325
    27c0:	00000000 	.word	0x00000000
    27c4:	004a325b 	.word	0x004a325b
    27c8:	2d2d0a0d 	.word	0x2d2d0a0d
    27cc:	754e202d 	.word	0x754e202d
    27d0:	7265626d 	.word	0x7265626d
    27d4:	20666f20 	.word	0x20666f20
    27d8:	6b736174 	.word	0x6b736174
    27dc:	25203a73 	.word	0x25203a73
    27e0:	00000075 	.word	0x00000075
    27e4:	203e0a0d 	.word	0x203e0a0d
    27e8:	6b736154 	.word	0x6b736154
    27ec:	74530973 	.word	0x74530973
    27f0:	09657461 	.word	0x09657461
    27f4:	09697250 	.word	0x09697250
    27f8:	63617453 	.word	0x63617453
    27fc:	754e096b 	.word	0x754e096b
    2800:	0000006d 	.word	0x0000006d
    2804:	2a2a0a0d 	.word	0x2a2a0a0d
    2808:	2a2a2a2a 	.word	0x2a2a2a2a
    280c:	2a2a2a2a 	.word	0x2a2a2a2a
    2810:	2a2a2a2a 	.word	0x2a2a2a2a
    2814:	2a2a2a2a 	.word	0x2a2a2a2a
    2818:	2a2a2a2a 	.word	0x2a2a2a2a
    281c:	2a2a2a2a 	.word	0x2a2a2a2a
    2820:	2a2a2a2a 	.word	0x2a2a2a2a
    2824:	2a2a2a2a 	.word	0x2a2a2a2a
    2828:	0000002a 	.word	0x0000002a
    282c:	2d2d0a0d 	.word	0x2d2d0a0d
    2830:	7250202d 	.word	0x7250202d
    2834:	20737365 	.word	0x20737365
    2838:	656b2061 	.word	0x656b2061
    283c:	0a0d3a79 	.word	0x0a0d3a79
    2840:	203a6120 	.word	0x203a6120
    2844:	2044454c 	.word	0x2044454c
    2848:	6e696c62 	.word	0x6e696c62
    284c:	6174206b 	.word	0x6174206b
    2850:	61206b73 	.word	0x61206b73
    2854:	76697463 	.word	0x76697463
    2858:	200a0d65 	.word	0x200a0d65
    285c:	4c203a73 	.word	0x4c203a73
    2860:	4f204445 	.word	0x4f204445
    2864:	61204646 	.word	0x61204646
    2868:	6220646e 	.word	0x6220646e
    286c:	6b6e696c 	.word	0x6b6e696c
    2870:	73617420 	.word	0x73617420
    2874:	7573206b 	.word	0x7573206b
    2878:	6e657073 	.word	0x6e657073
    287c:	200a0d64 	.word	0x200a0d64
    2880:	4d203a4d 	.word	0x4d203a4d
    2884:	74696e6f 	.word	0x74696e6f
    2888:	7420726f 	.word	0x7420726f
    288c:	206b7361 	.word	0x206b7361
    2890:	70737573 	.word	0x70737573
    2894:	0d646e65 	.word	0x0d646e65
    2898:	3a6d200a 	.word	0x3a6d200a
    289c:	6e6f4d20 	.word	0x6e6f4d20
    28a0:	726f7469 	.word	0x726f7469
    28a4:	73617420 	.word	0x73617420
    28a8:	6572206b 	.word	0x6572206b
    28ac:	656d7573 	.word	0x656d7573
    28b0:	6f200a0d 	.word	0x6f200a0d
    28b4:	72656874 	.word	0x72656874
    28b8:	45203a73 	.word	0x45203a73
    28bc:	206f6863 	.word	0x206f6863
    28c0:	6b636162 	.word	0x6b636162
    28c4:	20230a0d 	.word	0x20230a0d
    28c8:	00000000 	.word	0x00000000
    28cc:	736e6f43 	.word	0x736e6f43
    28d0:	00656c6f 	.word	0x00656c6f
    28d4:	682f2e2e 	.word	0x682f2e2e
    28d8:	732f6c61 	.word	0x732f6c61
    28dc:	682f6372 	.word	0x682f6372
    28e0:	635f6c61 	.word	0x635f6c61
    28e4:	6e656c61 	.word	0x6e656c61
    28e8:	2e726164 	.word	0x2e726164
    28ec:	00000063 	.word	0x00000063
    28f0:	682f2e2e 	.word	0x682f2e2e
    28f4:	732f6c61 	.word	0x732f6c61
    28f8:	682f6372 	.word	0x682f6372
    28fc:	695f6c61 	.word	0x695f6c61
    2900:	00632e6f 	.word	0x00632e6f
    2904:	682f2e2e 	.word	0x682f2e2e
    2908:	732f6c61 	.word	0x732f6c61
    290c:	682f6372 	.word	0x682f6372
    2910:	755f6c61 	.word	0x755f6c61
    2914:	74726173 	.word	0x74726173
    2918:	7973615f 	.word	0x7973615f
    291c:	632e636e 	.word	0x632e636e
    2920:	00000000 	.word	0x00000000
    2924:	682f2e2e 	.word	0x682f2e2e
    2928:	752f6c61 	.word	0x752f6c61
    292c:	736c6974 	.word	0x736c6974
    2930:	6372732f 	.word	0x6372732f
    2934:	6974752f 	.word	0x6974752f
    2938:	725f736c 	.word	0x725f736c
    293c:	62676e69 	.word	0x62676e69
    2940:	65666675 	.word	0x65666675
    2944:	00632e72 	.word	0x00632e72
    2948:	682f2e2e 	.word	0x682f2e2e
    294c:	722f6c70 	.word	0x722f6c70
    2950:	682f6374 	.word	0x682f6374
    2954:	725f6c70 	.word	0x725f6c70
    2958:	632e6374 	.word	0x632e6374
    295c:	00000000 	.word	0x00000000
    2960:	682f2e2e 	.word	0x682f2e2e
    2964:	732f6c70 	.word	0x732f6c70
    2968:	6f637265 	.word	0x6f637265
    296c:	70682f6d 	.word	0x70682f6d
    2970:	65735f6c 	.word	0x65735f6c
    2974:	6d6f6372 	.word	0x6d6f6372
    2978:	0000632e 	.word	0x0000632e
    297c:	00001830 	.word	0x00001830
    2980:	000016f0 	.word	0x000016f0
    2984:	000016f0 	.word	0x000016f0
    2988:	000016ec 	.word	0x000016ec
    298c:	00001808 	.word	0x00001808
    2990:	00001808 	.word	0x00001808
    2994:	000017fa 	.word	0x000017fa
    2998:	000016ec 	.word	0x000016ec
    299c:	00001808 	.word	0x00001808
    29a0:	000017fa 	.word	0x000017fa
    29a4:	00001808 	.word	0x00001808
    29a8:	000016ec 	.word	0x000016ec
    29ac:	00001810 	.word	0x00001810
    29b0:	00001810 	.word	0x00001810
    29b4:	00001810 	.word	0x00001810
    29b8:	00001a14 	.word	0x00001a14

000029bc <__sf_fake_stderr>:
	...

000029dc <__sf_fake_stdin>:
	...

000029fc <__sf_fake_stdout>:
	...
    2a1c:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    2a2c:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    2a3c:	31300046 35343332 39383736 64636261     F.0123456789abcd
    2a4c:	00006665                                ef..

00002a50 <_init>:
    2a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2a52:	46c0      	nop			; (mov r8, r8)
    2a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2a56:	bc08      	pop	{r3}
    2a58:	469e      	mov	lr, r3
    2a5a:	4770      	bx	lr

00002a5c <__init_array_start>:
    2a5c:	000000dd 	.word	0x000000dd

00002a60 <_fini>:
    2a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2a62:	46c0      	nop			; (mov r8, r8)
    2a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2a66:	bc08      	pop	{r3}
    2a68:	469e      	mov	lr, r3
    2a6a:	4770      	bx	lr

00002a6c <__fini_array_start>:
    2a6c:	000000b5 	.word	0x000000b5
